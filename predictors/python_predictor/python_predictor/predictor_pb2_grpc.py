# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import predictor_pb2 as predictor__pb2


class PredictStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.Open = channel.unary_unary(
        '/carml.org.predictor.Predict/Open',
        request_serializer=predictor__pb2.PredictorOpenRequest.SerializeToString,
        response_deserializer=predictor__pb2.Predictor.FromString,
        )
    self.Close = channel.unary_unary(
        '/carml.org.predictor.Predict/Close',
        request_serializer=predictor__pb2.Predictor.SerializeToString,
        response_deserializer=predictor__pb2.PredictorCloseResponse.FromString,
        )
    self.URLs = channel.unary_unary(
        '/carml.org.predictor.Predict/URLs',
        request_serializer=predictor__pb2.URLsRequest.SerializeToString,
        response_deserializer=predictor__pb2.FeaturesResponse.FromString,
        )
    self.URLsStream = channel.unary_stream(
        '/carml.org.predictor.Predict/URLsStream',
        request_serializer=predictor__pb2.URLsRequest.SerializeToString,
        response_deserializer=predictor__pb2.FeatureResponse.FromString,
        )
    self.Images = channel.unary_unary(
        '/carml.org.predictor.Predict/Images',
        request_serializer=predictor__pb2.ImagesRequest.SerializeToString,
        response_deserializer=predictor__pb2.FeaturesResponse.FromString,
        )
    self.ImagesStream = channel.unary_stream(
        '/carml.org.predictor.Predict/ImagesStream',
        request_serializer=predictor__pb2.ImagesRequest.SerializeToString,
        response_deserializer=predictor__pb2.FeatureResponse.FromString,
        )
    self.Dataset = channel.unary_unary(
        '/carml.org.predictor.Predict/Dataset',
        request_serializer=predictor__pb2.DatasetRequest.SerializeToString,
        response_deserializer=predictor__pb2.FeaturesResponse.FromString,
        )
    self.DatasetStream = channel.unary_stream(
        '/carml.org.predictor.Predict/DatasetStream',
        request_serializer=predictor__pb2.DatasetRequest.SerializeToString,
        response_deserializer=predictor__pb2.FeatureResponse.FromString,
        )
    self.Reset = channel.unary_unary(
        '/carml.org.predictor.Predict/Reset',
        request_serializer=predictor__pb2.ResetRequest.SerializeToString,
        response_deserializer=predictor__pb2.ResetResponse.FromString,
        )


class PredictServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def Open(self, request, context):
    """Opens a predictor and returns an id where the predictor
    is accessible. The id can be used to perform inference
    requests.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Close(self, request, context):
    """rpc Information(Predictor) returns (PredictorInformation) {
    option (google.api.http) = {
    post : "/v1/predict/information",
    body : "*"
    };
    }

    Close a predictor clear it's memory.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def URLs(self, request, context):
    """Image method receives a stream of urls and runs
    the predictor on all the urls. The

    The result is a prediction feature stream for each url.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def URLsStream(self, request, context):
    """Image method receives a stream of urls and runs
    the predictor on all the urls. The

    The result is a prediction feature stream for each url.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Images(self, request, context):
    """Image method receives a list base64 encoded images and runs
    the predictor on all the images.

    The result is a prediction feature list for each image.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def ImagesStream(self, request, context):
    """Image method receives a list base64 encoded images and runs
    the predictor on all the images.

    The result is a prediction feature stream for each image.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Dataset(self, request, context):
    """Dataset method receives a single dataset and runs
    the predictor on all elements of the dataset.

    The result is a prediction feature list.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def DatasetStream(self, request, context):
    """Dataset method receives a single dataset and runs
    the predictor on all elements of the dataset.

    The result is a prediction feature stream.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Reset(self, request, context):
    """Clear method clears the internal cache of the predictors
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_PredictServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'Open': grpc.unary_unary_rpc_method_handler(
          servicer.Open,
          request_deserializer=predictor__pb2.PredictorOpenRequest.FromString,
          response_serializer=predictor__pb2.Predictor.SerializeToString,
      ),
      'Close': grpc.unary_unary_rpc_method_handler(
          servicer.Close,
          request_deserializer=predictor__pb2.Predictor.FromString,
          response_serializer=predictor__pb2.PredictorCloseResponse.SerializeToString,
      ),
      'URLs': grpc.unary_unary_rpc_method_handler(
          servicer.URLs,
          request_deserializer=predictor__pb2.URLsRequest.FromString,
          response_serializer=predictor__pb2.FeaturesResponse.SerializeToString,
      ),
      'URLsStream': grpc.unary_stream_rpc_method_handler(
          servicer.URLsStream,
          request_deserializer=predictor__pb2.URLsRequest.FromString,
          response_serializer=predictor__pb2.FeatureResponse.SerializeToString,
      ),
      'Images': grpc.unary_unary_rpc_method_handler(
          servicer.Images,
          request_deserializer=predictor__pb2.ImagesRequest.FromString,
          response_serializer=predictor__pb2.FeaturesResponse.SerializeToString,
      ),
      'ImagesStream': grpc.unary_stream_rpc_method_handler(
          servicer.ImagesStream,
          request_deserializer=predictor__pb2.ImagesRequest.FromString,
          response_serializer=predictor__pb2.FeatureResponse.SerializeToString,
      ),
      'Dataset': grpc.unary_unary_rpc_method_handler(
          servicer.Dataset,
          request_deserializer=predictor__pb2.DatasetRequest.FromString,
          response_serializer=predictor__pb2.FeaturesResponse.SerializeToString,
      ),
      'DatasetStream': grpc.unary_stream_rpc_method_handler(
          servicer.DatasetStream,
          request_deserializer=predictor__pb2.DatasetRequest.FromString,
          response_serializer=predictor__pb2.FeatureResponse.SerializeToString,
      ),
      'Reset': grpc.unary_unary_rpc_method_handler(
          servicer.Reset,
          request_deserializer=predictor__pb2.ResetRequest.FromString,
          response_serializer=predictor__pb2.ResetResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'carml.org.predictor.Predict', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
