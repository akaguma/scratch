syntax = "proto3";

// CarML DLFramework
//
// CarML (Cognitive ARtifacts for Machine Learning) is a framework allowing
// people to develop and deploy machine learning models. It allows machine
// learning (ML) developers to publish and evaluate their models, users to
// experiment with different models and frameworks through a web user
// interface or a REST api, and system architects to capture system resource
// usage to inform future system and hardware configuration.

package carml.org.dlframework;

import "google/api/annotations.proto";
import "github.com/gogo/protobuf/gogoproto/gogo.proto";

option (gogoproto.goproto_registration) = true;
option (gogoproto.gostring_all) = true;
option (gogoproto.equal_all) = true;
option (gogoproto.verbose_equal_all) = true;
option (gogoproto.goproto_stringer_all) = false;
option (gogoproto.stringer_all) = true;
option (gogoproto.populate_all) = true;
option (gogoproto.testgen_all) = true;
option (gogoproto.benchgen_all) = true;
option (gogoproto.marshaler_all) = true;
option (gogoproto.sizer_all) = true;
option (gogoproto.unmarshaler_all) = true;

option go_package = "dlframework";

message ErrorStatus {
  option (gogoproto.description) = true;
  bool ok = 1 [ (gogoproto.moretags) = "yaml:\"ok,omitempty\"" ];
  string message = 2 [ (gogoproto.moretags) = "yaml:\"message,omitempty\"" ];
}

message ContainerHardware {
  option (gogoproto.description) = true;
  string gpu = 1 [ (gogoproto.moretags) = "yaml:\"gpu,omitempty\"" ];
  string cpu = 2 [ (gogoproto.moretags) = "yaml:\"cpu,omitempty\"" ];
}

message FrameworkManifest {
  option (gogoproto.description) = true;
  string name = 1 [ (gogoproto.moretags) = "yaml:\"name,omitempty\"" ];
  string version = 2 [ (gogoproto.moretags) = "yaml:\"version,omitempty\"" ];
  map<string, ContainerHardware> container = 3
      [ (gogoproto.moretags) = "yaml:\"container,omitempty\"" ];
}

message ModelManifest {
  message Type {
    message Parameter {
      string value = 1 [ (gogoproto.moretags) = "yaml:\",inline\"" ];
    }
    string type = 1 [ (gogoproto.moretags) = "yaml:\"type,omitempty\"" ];
    string description = 2
        [ (gogoproto.moretags) = "yaml:\"description,omitempty\"" ];
    map<string, Parameter> parameters = 3
        [ (gogoproto.moretags) = "yaml:\"parameters,omitempty\"" ];
  }

  message Model {
    string base_url = 1
        [ (gogoproto.moretags) = "yaml:\"base_url,omitempty\"" ];
    string weights_path = 2
        [ (gogoproto.moretags) = "yaml:\"weights_path,omitempty\"" ];
    string graph_path = 3
        [ (gogoproto.moretags) = "yaml:\"graph_path,omitempty\"" ];
    bool is_archive = 4
        [ (gogoproto.moretags) = "yaml:\"is_archive,omitempty\"" ];
  }

  string name = 1 [ (gogoproto.moretags) = "yaml:\"name,omitempty\"" ];
  string version = 2 [ (gogoproto.moretags) = "yaml:\"version,omitempty\"" ];
  FrameworkManifest framework = 3
      [ (gogoproto.moretags) = "yaml:\"framework,omitempty\"" ];
  map<string, ContainerHardware> container = 4
      [ (gogoproto.moretags) = "yaml:\"container,omitempty\"" ];
  string description = 5
      [ (gogoproto.moretags) = "yaml:\"description,omitempty\"" ];
  repeated string reference = 6
      [ (gogoproto.moretags) = "yaml:\"references,omitempty\"" ];
  string license = 7 [ (gogoproto.moretags) = "yaml:\"license,omitempty\"" ];
  repeated Type inputs = 8
      [ (gogoproto.moretags) = "yaml:\"inputs,omitempty\"" ];
  Type output = 9 [ (gogoproto.moretags) = "yaml:\"output,omitempty\"" ];
  string before_preprocess = 10
      [ (gogoproto.moretags) = "yaml:\"before_preprocess,omitempty\"" ];
  string preprocess = 11
      [ (gogoproto.moretags) = "yaml:\"preprocess,omitempty\"" ];
  string after_preprocess = 12
      [ (gogoproto.moretags) = "yaml:\"after_preprocess,omitempty\"" ];
  string before_postprocess = 13
      [ (gogoproto.moretags) = "yaml:\"before_postprocess,omitempty\"" ];
  string postprocess = 14
      [ (gogoproto.moretags) = "yaml:\"postprocess,omitempty\"" ];
  string after_postprocess = 15
      [ (gogoproto.moretags) = "yaml:\"after_postprocess,omitempty\"" ];
  Model model = 16 [ (gogoproto.moretags) = "yaml:\"model,omitempty\"" ];
  map<string, string> attributes = 17
      [ (gogoproto.moretags) = "yaml:\"attributes,omitempty\"" ];
  bool hidden = 18 [ (gogoproto.moretags) = "yaml:\"hidden,omitempty\"" ];
}

message FrameworkRequest {
  option (gogoproto.description) = true;
  string framework_name = 1
      [ (gogoproto.moretags) = "yaml:\"framework_name,omitempty\"" ];
  string framework_version = 2
      [ (gogoproto.moretags) = "yaml:\"framework_version,omitempty\"" ];
}

message FrameworkManifestsResponse {
  option (gogoproto.description) = true;
  repeated FrameworkManifest manifests = 1
      [ (gogoproto.moretags) = "yaml:\"manifests,omitempty\"" ];
}

message Agent {
  option (gogoproto.description) = true;
  string host = 1 [ (gogoproto.moretags) = "yaml:\"host,omitempty\"" ];
  string port = 2 [ (gogoproto.moretags) = "yaml:\"port,omitempty\"" ];
  string specification = 3
      [ (gogoproto.moretags) = "yaml:\"specification,omitempty\"" ];
}

message Agents {
  option (gogoproto.description) = true;
  repeated Agent agents = 1
      [ (gogoproto.moretags) = "yaml:\"agents,omitempty\"" ];
}

message ModelRequest {
  option (gogoproto.description) = true;
  string framework_name = 1
      [ (gogoproto.moretags) = "yaml:\"framework_name,omitempty\"" ];
  string framework_version = 2
      [ (gogoproto.moretags) = "yaml:\"framework_version,omitempty\"" ];
  string model_name = 3
      [ (gogoproto.moretags) = "yaml:\"model_name,omitempty\"" ];
  string model_version = 4
      [ (gogoproto.moretags) = "yaml:\"model_version,omitempty\"" ];
}

message ModelManifestsResponse {
  option (gogoproto.description) = true;
  repeated ModelManifest manifests = 1
      [ (gogoproto.moretags) = "yaml:\"manifests,omitempty\"" ];
}

message PredictorOpenRequest {
  option (gogoproto.description) = true;
  string model_name = 1
      [ (gogoproto.moretags) = "yaml:\"model_name,omitempty\"" ];
  string model_version = 2
      [ (gogoproto.moretags) = "yaml:\"model_version,omitempty\"" ];
  string framework_name = 3
      [ (gogoproto.moretags) = "yaml:\"framework_name,omitempty\"" ];
  string framework_version = 4
      [ (gogoproto.moretags) = "yaml:\"framework_version,omitempty\"" ];
}

message PredictorCloseResponse {}

message PredictionOptions {
  option (gogoproto.description) = true;
  string request_id = 1 [
    (gogoproto.customname) = "RequestID",
    (gogoproto.jsontag) = "request_id,omitempty",
    (gogoproto.moretags) = "yaml:\"request_id,omitempty\""
  ];
  int32 feature_limit = 2
      [ (gogoproto.moretags) = "yaml:\"feature_limit,omitempty\"" ];
}

message Predictor {
  option (gogoproto.description) = true;
  string id = 1 [
    (gogoproto.customname) = "ID",
    (gogoproto.jsontag) = "id,omitempty",
    (gogoproto.moretags) = "yaml:\"id,omitempty\""
  ];
}

message URLsRequest {
  message URL {
    // An id used to identify the output feature: maps to input_id for output
    string id = 1 [
      (gogoproto.customname) = "ID",
      (gogoproto.jsontag) = "id,omitempty",
      (gogoproto.moretags) = "yaml:\"id,omitempty\""
    ];
    string data = 2 [ (gogoproto.moretags) = "yaml:\"data,omitempty\"" ];
  }
  option (gogoproto.description) = true;
  Predictor predictor = 1
      [ (gogoproto.moretags) = "yaml:\"predictor,omitempty\"" ];
  repeated URL urls = 2 [ (gogoproto.moretags) = "yaml:\"urls,omitempty\"" ];
  PredictionOptions options = 3
      [ (gogoproto.moretags) = "yaml:\"options,omitempty\"" ];
}

message ImagesRequest {
  message Image {
    // An id used to identify the output feature: maps to input_id for output
    string id = 1 [
      (gogoproto.customname) = "ID",
      (gogoproto.jsontag) = "id,omitempty",
      (gogoproto.moretags) = "yaml:\"id,omitempty\""
    ];
    // The image is base64 encoded
    bytes data = 2 [ (gogoproto.moretags) = "yaml:\"data,omitempty\"" ];
    // Preprocessed is set to true to disable preprocessing.
    // If enabled then the image is assumed to be rescaled and
    // encoded as an array of float32 values
    bool preprocessed = 3
        [ (gogoproto.moretags) = "yaml:\"preprocessed,omitempty\"" ];
  }
  option (gogoproto.description) = true;
  Predictor predictor = 1
      [ (gogoproto.moretags) = "yaml:\"predictor,omitempty\"" ];
  // A list of Base64 encoded images
  repeated Image images = 2
      [ (gogoproto.moretags) = "yaml:\"images,omitempty\"" ];
  PredictionOptions options = 3
      [ (gogoproto.moretags) = "yaml:\"options,omitempty\"" ];
}

message DatasetRequest {
  message Dataset {
    string category = 1
        [ (gogoproto.moretags) = "yaml:\"category,omitempty\"" ];
    string name = 2 [ (gogoproto.moretags) = "yaml:\"name,omitempty\"" ];
  }
  option (gogoproto.description) = true;
  Predictor predictor = 1
      [ (gogoproto.moretags) = "yaml:\"predictor,omitempty\"" ];
  Dataset dataset = 2 [ (gogoproto.moretags) = "yaml:\"dataset,omitempty\"" ];
  PredictionOptions options = 3
      [ (gogoproto.moretags) = "yaml:\"options,omitempty\"" ];
}

message Feature {
  option (gogoproto.description) = true;
  int64 index = 1 [ (gogoproto.moretags) = "yaml:\"index,omitempty\"" ];
  string name = 2 [ (gogoproto.moretags) = "yaml:\"name,omitempty\"" ];
  float probability = 3
      [ (gogoproto.moretags) = "yaml:\"probability,omitempty\"" ];
  map<string, string> metadata = 4
      [ (gogoproto.moretags) = "yaml:\"metadata,omitempty\"" ];
}

message FeatureResponse {
  option (gogoproto.description) = true;
  string id = 1 [
    (gogoproto.customname) = "ID",
    (gogoproto.jsontag) = "id,omitempty",
    (gogoproto.moretags) = "yaml:\"id,omitempty\""
  ];
  string request_id = 2 [
    (gogoproto.customname) = "RequestID",
    (gogoproto.jsontag) = "request_id,omitempty",
    (gogoproto.moretags) = "yaml:\"request_id,omitempty\""
  ];
  string input_id = 3 [
    (gogoproto.customname) = "InputID",
    (gogoproto.jsontag) = "input_id,omitempty",
    (gogoproto.moretags) = "yaml:\"input_id,omitempty\""
  ];
  repeated Feature features = 4
      [ (gogoproto.moretags) = "yaml:\"features,omitempty\"" ];
  map<string, string> metadata = 5
      [ (gogoproto.moretags) = "yaml:\"metadata,omitempty\"" ];
}

message FeaturesResponse {
  option (gogoproto.description) = true;
  string id = 1 [
    (gogoproto.customname) = "ID",
    (gogoproto.jsontag) = "id,omitempty",
    (gogoproto.moretags) = "yaml:\"id,omitempty\""
  ];
  repeated FeatureResponse responses = 2
      [ (gogoproto.moretags) = "yaml:\"responses,omitempty\"" ];
}

message ResetRequest {
  option (gogoproto.description) = true;
  string id = 2 [
    (gogoproto.customname) = "ID",
    (gogoproto.jsontag) = "id,omitempty",
    (gogoproto.moretags) = "yaml:\"id,omitempty\""
  ];
  Predictor predictor = 1
      [ (gogoproto.moretags) = "yaml:\"predictor,omitempty\"" ];
}

message ResetResponse {
  option (gogoproto.description) = true;
  Predictor predictor = 1 [
    (gogoproto.embed) = true,
    (gogoproto.moretags) = "yaml:\"predictor,omitempty\""
  ];
}

service Registry {
  rpc FrameworkManifests(FrameworkRequest)
      returns (FrameworkManifestsResponse) {
    option (google.api.http) = {
      get : "/v1/registry/frameworks/manifest",
    };
  }
  rpc FrameworkAgents(FrameworkRequest) returns (Agents) {
    option (google.api.http) = {
      get : "/v1/registry/frameworks/agent",
    };
  }
  rpc ModelManifests(ModelRequest) returns (ModelManifestsResponse) {
    option (google.api.http) = {
      get : "/v1/registry/models/manifest",
    };
  }
  rpc ModelAgents(ModelRequest) returns (Agents) {
    option (google.api.http) = {
      get : "/v1/registry/models/agent",
    };
  }
}

service Predict {
  // Opens a predictor and returns an id where the predictor
  // is accessible. The id can be used to perform inference
  // requests.
  rpc Open(PredictorOpenRequest) returns (Predictor) {
    option (google.api.http) = {
      post : "/v1/predict/open",
      body : "*"
    };
  }

  // rpc Information(Predictor) returns (PredictorInformation) {
  //   option (google.api.http) = {
  //     post : "/v1/predict/information",
  //     body : "*"
  //   };
  // }

  // Close a predictor clear it's memory.
  rpc Close(Predictor) returns (PredictorCloseResponse) {
    option (google.api.http) = {
      post : "/v1/predict/close",
      body : "*"
    };
  }

  // Image method receives a stream of urls and runs
  // the predictor on all the urls. The
  //
  // The result is a prediction feature stream for each url.
  rpc URLs(URLsRequest) returns (FeaturesResponse) {
    option (google.api.http) = {
      post : "/v1/predict/urls",
      body : "*"
    };
  }

  // Image method receives a stream of urls and runs
  // the predictor on all the urls. The
  //
  // The result is a prediction feature stream for each url.
  rpc URLsStream(URLsRequest) returns (stream FeatureResponse) {
    option (google.api.http) = {
      post : "/v1/predict/stream/urls",
      body : "*"
    };
  }

  // Image method receives a list base64 encoded images and runs
  // the predictor on all the images.
  //
  // The result is a prediction feature list for each image.
  rpc Images(ImagesRequest) returns (FeaturesResponse) {
    option (google.api.http) = {
      post : "/v1/predict/images",
      body : "*"
    };
  }

  // Image method receives a list base64 encoded images and runs
  // the predictor on all the images.
  //
  // The result is a prediction feature stream for each image.
  rpc ImagesStream(ImagesRequest) returns (stream FeatureResponse) {
    option (google.api.http) = {
      post : "/v1/predict/stream/images",
      body : "*"
    };
  }

  // Dataset method receives a single dataset and runs
  // the predictor on all elements of the dataset.
  //
  // The result is a prediction feature list.
  rpc Dataset(DatasetRequest) returns (FeaturesResponse) {
    option (google.api.http) = {
      post : "/v1/predict/dataset",
      body : "*"
    };
  }

  // Dataset method receives a single dataset and runs
  // the predictor on all elements of the dataset.
  //
  // The result is a prediction feature stream.
  rpc DatasetStream(DatasetRequest) returns (stream FeatureResponse) {
    option (google.api.http) = {
      post : "/v1/predict/stream/dataset",
      body : "*"
    };
  }

  // Clear method clears the internal cache of the predictors
  rpc Reset(ResetRequest) returns (ResetResponse) {
    option (google.api.http) = {
      post : "/v1/predict/reset",
      body : "*"
    };
  }
}
