// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: predictor.proto

#ifndef PROTOBUF_predictor_2eproto__INCLUDED
#define PROTOBUF_predictor_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
#include "google/api/annotations.pb.h"
#include "github.com/gogo/protobuf/gogoproto/gogo.pb.h"
// @@protoc_insertion_point(includes)
namespace carml {
namespace org {
namespace predictor {
class DatasetRequest;
class DatasetRequestDefaultTypeInternal;
extern DatasetRequestDefaultTypeInternal _DatasetRequest_default_instance_;
class DatasetRequest_Dataset;
class DatasetRequest_DatasetDefaultTypeInternal;
extern DatasetRequest_DatasetDefaultTypeInternal _DatasetRequest_Dataset_default_instance_;
class ErrorStatus;
class ErrorStatusDefaultTypeInternal;
extern ErrorStatusDefaultTypeInternal _ErrorStatus_default_instance_;
class Feature;
class FeatureDefaultTypeInternal;
extern FeatureDefaultTypeInternal _Feature_default_instance_;
class FeatureResponse;
class FeatureResponseDefaultTypeInternal;
extern FeatureResponseDefaultTypeInternal _FeatureResponse_default_instance_;
class FeatureResponse_MetadataEntry;
class FeatureResponse_MetadataEntryDefaultTypeInternal;
extern FeatureResponse_MetadataEntryDefaultTypeInternal _FeatureResponse_MetadataEntry_default_instance_;
class Feature_MetadataEntry;
class Feature_MetadataEntryDefaultTypeInternal;
extern Feature_MetadataEntryDefaultTypeInternal _Feature_MetadataEntry_default_instance_;
class FeaturesResponse;
class FeaturesResponseDefaultTypeInternal;
extern FeaturesResponseDefaultTypeInternal _FeaturesResponse_default_instance_;
class ImagesRequest;
class ImagesRequestDefaultTypeInternal;
extern ImagesRequestDefaultTypeInternal _ImagesRequest_default_instance_;
class ImagesRequest_Image;
class ImagesRequest_ImageDefaultTypeInternal;
extern ImagesRequest_ImageDefaultTypeInternal _ImagesRequest_Image_default_instance_;
class PredictionOptions;
class PredictionOptionsDefaultTypeInternal;
extern PredictionOptionsDefaultTypeInternal _PredictionOptions_default_instance_;
class Predictor;
class PredictorDefaultTypeInternal;
extern PredictorDefaultTypeInternal _Predictor_default_instance_;
class PredictorCloseResponse;
class PredictorCloseResponseDefaultTypeInternal;
extern PredictorCloseResponseDefaultTypeInternal _PredictorCloseResponse_default_instance_;
class PredictorOpenRequest;
class PredictorOpenRequestDefaultTypeInternal;
extern PredictorOpenRequestDefaultTypeInternal _PredictorOpenRequest_default_instance_;
class ResetRequest;
class ResetRequestDefaultTypeInternal;
extern ResetRequestDefaultTypeInternal _ResetRequest_default_instance_;
class ResetResponse;
class ResetResponseDefaultTypeInternal;
extern ResetResponseDefaultTypeInternal _ResetResponse_default_instance_;
class URLsRequest;
class URLsRequestDefaultTypeInternal;
extern URLsRequestDefaultTypeInternal _URLsRequest_default_instance_;
class URLsRequest_URL;
class URLsRequest_URLDefaultTypeInternal;
extern URLsRequest_URLDefaultTypeInternal _URLsRequest_URL_default_instance_;
}  // namespace predictor
}  // namespace org
}  // namespace carml

namespace carml {
namespace org {
namespace predictor {

namespace protobuf_predictor_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_predictor_2eproto

// ===================================================================

class ErrorStatus : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:carml.org.predictor.ErrorStatus) */ {
 public:
  ErrorStatus();
  virtual ~ErrorStatus();

  ErrorStatus(const ErrorStatus& from);

  inline ErrorStatus& operator=(const ErrorStatus& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ErrorStatus(ErrorStatus&& from) noexcept
    : ErrorStatus() {
    *this = ::std::move(from);
  }

  inline ErrorStatus& operator=(ErrorStatus&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const ErrorStatus& default_instance();

  static inline const ErrorStatus* internal_default_instance() {
    return reinterpret_cast<const ErrorStatus*>(
               &_ErrorStatus_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void UnsafeArenaSwap(ErrorStatus* other);
  void Swap(ErrorStatus* other);
  friend void swap(ErrorStatus& a, ErrorStatus& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ErrorStatus* New() const PROTOBUF_FINAL { return New(NULL); }

  ErrorStatus* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ErrorStatus& from);
  void MergeFrom(const ErrorStatus& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ErrorStatus* other);
  protected:
  explicit ErrorStatus(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string message = 2 [(.gogoproto.moretags) = "yaml:\"message,omitempty\""];
  void clear_message();
  static const int kMessageFieldNumber = 2;
  const ::std::string& message() const;
  void set_message(const ::std::string& value);
  #if LANG_CXX11
  void set_message(::std::string&& value);
  #endif
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  ::std::string* mutable_message();
  ::std::string* release_message();
  void set_allocated_message(::std::string* message);
  ::std::string* unsafe_arena_release_message();
  void unsafe_arena_set_allocated_message(
      ::std::string* message);

  // bool ok = 1 [(.gogoproto.moretags) = "yaml:\"ok,omitempty\""];
  void clear_ok();
  static const int kOkFieldNumber = 1;
  bool ok() const;
  void set_ok(bool value);

  // @@protoc_insertion_point(class_scope:carml.org.predictor.ErrorStatus)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr message_;
  bool ok_;
  mutable int _cached_size_;
  friend struct protobuf_predictor_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PredictorOpenRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:carml.org.predictor.PredictorOpenRequest) */ {
 public:
  PredictorOpenRequest();
  virtual ~PredictorOpenRequest();

  PredictorOpenRequest(const PredictorOpenRequest& from);

  inline PredictorOpenRequest& operator=(const PredictorOpenRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PredictorOpenRequest(PredictorOpenRequest&& from) noexcept
    : PredictorOpenRequest() {
    *this = ::std::move(from);
  }

  inline PredictorOpenRequest& operator=(PredictorOpenRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const PredictorOpenRequest& default_instance();

  static inline const PredictorOpenRequest* internal_default_instance() {
    return reinterpret_cast<const PredictorOpenRequest*>(
               &_PredictorOpenRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void UnsafeArenaSwap(PredictorOpenRequest* other);
  void Swap(PredictorOpenRequest* other);
  friend void swap(PredictorOpenRequest& a, PredictorOpenRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PredictorOpenRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  PredictorOpenRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PredictorOpenRequest& from);
  void MergeFrom(const PredictorOpenRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PredictorOpenRequest* other);
  protected:
  explicit PredictorOpenRequest(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string model_name = 1 [(.gogoproto.moretags) = "yaml:\"model_name,omitempty\""];
  void clear_model_name();
  static const int kModelNameFieldNumber = 1;
  const ::std::string& model_name() const;
  void set_model_name(const ::std::string& value);
  #if LANG_CXX11
  void set_model_name(::std::string&& value);
  #endif
  void set_model_name(const char* value);
  void set_model_name(const char* value, size_t size);
  ::std::string* mutable_model_name();
  ::std::string* release_model_name();
  void set_allocated_model_name(::std::string* model_name);
  ::std::string* unsafe_arena_release_model_name();
  void unsafe_arena_set_allocated_model_name(
      ::std::string* model_name);

  // string model_version = 2 [(.gogoproto.moretags) = "yaml:\"model_version,omitempty\""];
  void clear_model_version();
  static const int kModelVersionFieldNumber = 2;
  const ::std::string& model_version() const;
  void set_model_version(const ::std::string& value);
  #if LANG_CXX11
  void set_model_version(::std::string&& value);
  #endif
  void set_model_version(const char* value);
  void set_model_version(const char* value, size_t size);
  ::std::string* mutable_model_version();
  ::std::string* release_model_version();
  void set_allocated_model_version(::std::string* model_version);
  ::std::string* unsafe_arena_release_model_version();
  void unsafe_arena_set_allocated_model_version(
      ::std::string* model_version);

  // string framework_name = 3 [(.gogoproto.moretags) = "yaml:\"framework_name,omitempty\""];
  void clear_framework_name();
  static const int kFrameworkNameFieldNumber = 3;
  const ::std::string& framework_name() const;
  void set_framework_name(const ::std::string& value);
  #if LANG_CXX11
  void set_framework_name(::std::string&& value);
  #endif
  void set_framework_name(const char* value);
  void set_framework_name(const char* value, size_t size);
  ::std::string* mutable_framework_name();
  ::std::string* release_framework_name();
  void set_allocated_framework_name(::std::string* framework_name);
  ::std::string* unsafe_arena_release_framework_name();
  void unsafe_arena_set_allocated_framework_name(
      ::std::string* framework_name);

  // string framework_version = 4 [(.gogoproto.moretags) = "yaml:\"framework_version,omitempty\""];
  void clear_framework_version();
  static const int kFrameworkVersionFieldNumber = 4;
  const ::std::string& framework_version() const;
  void set_framework_version(const ::std::string& value);
  #if LANG_CXX11
  void set_framework_version(::std::string&& value);
  #endif
  void set_framework_version(const char* value);
  void set_framework_version(const char* value, size_t size);
  ::std::string* mutable_framework_version();
  ::std::string* release_framework_version();
  void set_allocated_framework_version(::std::string* framework_version);
  ::std::string* unsafe_arena_release_framework_version();
  void unsafe_arena_set_allocated_framework_version(
      ::std::string* framework_version);

  // @@protoc_insertion_point(class_scope:carml.org.predictor.PredictorOpenRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr model_name_;
  ::google::protobuf::internal::ArenaStringPtr model_version_;
  ::google::protobuf::internal::ArenaStringPtr framework_name_;
  ::google::protobuf::internal::ArenaStringPtr framework_version_;
  mutable int _cached_size_;
  friend struct protobuf_predictor_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PredictorCloseResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:carml.org.predictor.PredictorCloseResponse) */ {
 public:
  PredictorCloseResponse();
  virtual ~PredictorCloseResponse();

  PredictorCloseResponse(const PredictorCloseResponse& from);

  inline PredictorCloseResponse& operator=(const PredictorCloseResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PredictorCloseResponse(PredictorCloseResponse&& from) noexcept
    : PredictorCloseResponse() {
    *this = ::std::move(from);
  }

  inline PredictorCloseResponse& operator=(PredictorCloseResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const PredictorCloseResponse& default_instance();

  static inline const PredictorCloseResponse* internal_default_instance() {
    return reinterpret_cast<const PredictorCloseResponse*>(
               &_PredictorCloseResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void UnsafeArenaSwap(PredictorCloseResponse* other);
  void Swap(PredictorCloseResponse* other);
  friend void swap(PredictorCloseResponse& a, PredictorCloseResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PredictorCloseResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  PredictorCloseResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PredictorCloseResponse& from);
  void MergeFrom(const PredictorCloseResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PredictorCloseResponse* other);
  protected:
  explicit PredictorCloseResponse(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:carml.org.predictor.PredictorCloseResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable int _cached_size_;
  friend struct protobuf_predictor_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PredictionOptions : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:carml.org.predictor.PredictionOptions) */ {
 public:
  PredictionOptions();
  virtual ~PredictionOptions();

  PredictionOptions(const PredictionOptions& from);

  inline PredictionOptions& operator=(const PredictionOptions& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PredictionOptions(PredictionOptions&& from) noexcept
    : PredictionOptions() {
    *this = ::std::move(from);
  }

  inline PredictionOptions& operator=(PredictionOptions&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const PredictionOptions& default_instance();

  static inline const PredictionOptions* internal_default_instance() {
    return reinterpret_cast<const PredictionOptions*>(
               &_PredictionOptions_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void UnsafeArenaSwap(PredictionOptions* other);
  void Swap(PredictionOptions* other);
  friend void swap(PredictionOptions& a, PredictionOptions& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PredictionOptions* New() const PROTOBUF_FINAL { return New(NULL); }

  PredictionOptions* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PredictionOptions& from);
  void MergeFrom(const PredictionOptions& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PredictionOptions* other);
  protected:
  explicit PredictionOptions(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string request_id = 1 [(.gogoproto.customname) = "RequestID", (.gogoproto.jsontag) = "request_id,omitempty", (.gogoproto.moretags) = "yaml:\"request_id,omitempty\""];
  void clear_request_id();
  static const int kRequestIdFieldNumber = 1;
  const ::std::string& request_id() const;
  void set_request_id(const ::std::string& value);
  #if LANG_CXX11
  void set_request_id(::std::string&& value);
  #endif
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  ::std::string* mutable_request_id();
  ::std::string* release_request_id();
  void set_allocated_request_id(::std::string* request_id);
  ::std::string* unsafe_arena_release_request_id();
  void unsafe_arena_set_allocated_request_id(
      ::std::string* request_id);

  // int32 feature_limit = 2 [(.gogoproto.moretags) = "yaml:\"feature_limit,omitempty\""];
  void clear_feature_limit();
  static const int kFeatureLimitFieldNumber = 2;
  ::google::protobuf::int32 feature_limit() const;
  void set_feature_limit(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:carml.org.predictor.PredictionOptions)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr request_id_;
  ::google::protobuf::int32 feature_limit_;
  mutable int _cached_size_;
  friend struct protobuf_predictor_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Predictor : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:carml.org.predictor.Predictor) */ {
 public:
  Predictor();
  virtual ~Predictor();

  Predictor(const Predictor& from);

  inline Predictor& operator=(const Predictor& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Predictor(Predictor&& from) noexcept
    : Predictor() {
    *this = ::std::move(from);
  }

  inline Predictor& operator=(Predictor&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const Predictor& default_instance();

  static inline const Predictor* internal_default_instance() {
    return reinterpret_cast<const Predictor*>(
               &_Predictor_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void UnsafeArenaSwap(Predictor* other);
  void Swap(Predictor* other);
  friend void swap(Predictor& a, Predictor& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Predictor* New() const PROTOBUF_FINAL { return New(NULL); }

  Predictor* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Predictor& from);
  void MergeFrom(const Predictor& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Predictor* other);
  protected:
  explicit Predictor(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string id = 1 [(.gogoproto.customname) = "ID", (.gogoproto.jsontag) = "id,omitempty", (.gogoproto.moretags) = "yaml:\"id,omitempty\""];
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);
  ::std::string* unsafe_arena_release_id();
  void unsafe_arena_set_allocated_id(
      ::std::string* id);

  // @@protoc_insertion_point(class_scope:carml.org.predictor.Predictor)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  mutable int _cached_size_;
  friend struct protobuf_predictor_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class URLsRequest_URL : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:carml.org.predictor.URLsRequest.URL) */ {
 public:
  URLsRequest_URL();
  virtual ~URLsRequest_URL();

  URLsRequest_URL(const URLsRequest_URL& from);

  inline URLsRequest_URL& operator=(const URLsRequest_URL& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  URLsRequest_URL(URLsRequest_URL&& from) noexcept
    : URLsRequest_URL() {
    *this = ::std::move(from);
  }

  inline URLsRequest_URL& operator=(URLsRequest_URL&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const URLsRequest_URL& default_instance();

  static inline const URLsRequest_URL* internal_default_instance() {
    return reinterpret_cast<const URLsRequest_URL*>(
               &_URLsRequest_URL_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void UnsafeArenaSwap(URLsRequest_URL* other);
  void Swap(URLsRequest_URL* other);
  friend void swap(URLsRequest_URL& a, URLsRequest_URL& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline URLsRequest_URL* New() const PROTOBUF_FINAL { return New(NULL); }

  URLsRequest_URL* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const URLsRequest_URL& from);
  void MergeFrom(const URLsRequest_URL& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(URLsRequest_URL* other);
  protected:
  explicit URLsRequest_URL(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string id = 1 [(.gogoproto.customname) = "ID", (.gogoproto.jsontag) = "id,omitempty", (.gogoproto.moretags) = "yaml:\"id,omitempty\""];
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);
  ::std::string* unsafe_arena_release_id();
  void unsafe_arena_set_allocated_id(
      ::std::string* id);

  // string data = 2 [(.gogoproto.moretags) = "yaml:\"data,omitempty\""];
  void clear_data();
  static const int kDataFieldNumber = 2;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const char* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);
  ::std::string* unsafe_arena_release_data();
  void unsafe_arena_set_allocated_data(
      ::std::string* data);

  // @@protoc_insertion_point(class_scope:carml.org.predictor.URLsRequest.URL)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  mutable int _cached_size_;
  friend struct protobuf_predictor_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class URLsRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:carml.org.predictor.URLsRequest) */ {
 public:
  URLsRequest();
  virtual ~URLsRequest();

  URLsRequest(const URLsRequest& from);

  inline URLsRequest& operator=(const URLsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  URLsRequest(URLsRequest&& from) noexcept
    : URLsRequest() {
    *this = ::std::move(from);
  }

  inline URLsRequest& operator=(URLsRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const URLsRequest& default_instance();

  static inline const URLsRequest* internal_default_instance() {
    return reinterpret_cast<const URLsRequest*>(
               &_URLsRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void UnsafeArenaSwap(URLsRequest* other);
  void Swap(URLsRequest* other);
  friend void swap(URLsRequest& a, URLsRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline URLsRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  URLsRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const URLsRequest& from);
  void MergeFrom(const URLsRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(URLsRequest* other);
  protected:
  explicit URLsRequest(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef URLsRequest_URL URL;

  // accessors -------------------------------------------------------

  // repeated .carml.org.predictor.URLsRequest.URL urls = 2 [(.gogoproto.moretags) = "yaml:\"urls,omitempty\""];
  int urls_size() const;
  void clear_urls();
  static const int kUrlsFieldNumber = 2;
  const ::carml::org::predictor::URLsRequest_URL& urls(int index) const;
  ::carml::org::predictor::URLsRequest_URL* mutable_urls(int index);
  ::carml::org::predictor::URLsRequest_URL* add_urls();
  ::google::protobuf::RepeatedPtrField< ::carml::org::predictor::URLsRequest_URL >*
      mutable_urls();
  const ::google::protobuf::RepeatedPtrField< ::carml::org::predictor::URLsRequest_URL >&
      urls() const;

  // .carml.org.predictor.Predictor predictor = 1 [(.gogoproto.moretags) = "yaml:\"predictor,omitempty\""];
  bool has_predictor() const;
  void clear_predictor();
  static const int kPredictorFieldNumber = 1;
  private:
  void _slow_mutable_predictor();
  void _slow_set_allocated_predictor(
      ::google::protobuf::Arena* message_arena, ::carml::org::predictor::Predictor** predictor);
  ::carml::org::predictor::Predictor* _slow_release_predictor();
  public:
  const ::carml::org::predictor::Predictor& predictor() const;
  ::carml::org::predictor::Predictor* mutable_predictor();
  ::carml::org::predictor::Predictor* release_predictor();
  void set_allocated_predictor(::carml::org::predictor::Predictor* predictor);
  ::carml::org::predictor::Predictor* unsafe_arena_release_predictor();
  void unsafe_arena_set_allocated_predictor(
      ::carml::org::predictor::Predictor* predictor);

  // .carml.org.predictor.PredictionOptions options = 3 [(.gogoproto.moretags) = "yaml:\"options,omitempty\""];
  bool has_options() const;
  void clear_options();
  static const int kOptionsFieldNumber = 3;
  private:
  void _slow_mutable_options();
  void _slow_set_allocated_options(
      ::google::protobuf::Arena* message_arena, ::carml::org::predictor::PredictionOptions** options);
  ::carml::org::predictor::PredictionOptions* _slow_release_options();
  public:
  const ::carml::org::predictor::PredictionOptions& options() const;
  ::carml::org::predictor::PredictionOptions* mutable_options();
  ::carml::org::predictor::PredictionOptions* release_options();
  void set_allocated_options(::carml::org::predictor::PredictionOptions* options);
  ::carml::org::predictor::PredictionOptions* unsafe_arena_release_options();
  void unsafe_arena_set_allocated_options(
      ::carml::org::predictor::PredictionOptions* options);

  // @@protoc_insertion_point(class_scope:carml.org.predictor.URLsRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::RepeatedPtrField< ::carml::org::predictor::URLsRequest_URL > urls_;
  ::carml::org::predictor::Predictor* predictor_;
  ::carml::org::predictor::PredictionOptions* options_;
  mutable int _cached_size_;
  friend struct protobuf_predictor_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ImagesRequest_Image : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:carml.org.predictor.ImagesRequest.Image) */ {
 public:
  ImagesRequest_Image();
  virtual ~ImagesRequest_Image();

  ImagesRequest_Image(const ImagesRequest_Image& from);

  inline ImagesRequest_Image& operator=(const ImagesRequest_Image& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ImagesRequest_Image(ImagesRequest_Image&& from) noexcept
    : ImagesRequest_Image() {
    *this = ::std::move(from);
  }

  inline ImagesRequest_Image& operator=(ImagesRequest_Image&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const ImagesRequest_Image& default_instance();

  static inline const ImagesRequest_Image* internal_default_instance() {
    return reinterpret_cast<const ImagesRequest_Image*>(
               &_ImagesRequest_Image_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void UnsafeArenaSwap(ImagesRequest_Image* other);
  void Swap(ImagesRequest_Image* other);
  friend void swap(ImagesRequest_Image& a, ImagesRequest_Image& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ImagesRequest_Image* New() const PROTOBUF_FINAL { return New(NULL); }

  ImagesRequest_Image* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ImagesRequest_Image& from);
  void MergeFrom(const ImagesRequest_Image& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ImagesRequest_Image* other);
  protected:
  explicit ImagesRequest_Image(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string id = 1 [(.gogoproto.customname) = "ID", (.gogoproto.jsontag) = "id,omitempty", (.gogoproto.moretags) = "yaml:\"id,omitempty\""];
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);
  ::std::string* unsafe_arena_release_id();
  void unsafe_arena_set_allocated_id(
      ::std::string* id);

  // bytes data = 2 [(.gogoproto.moretags) = "yaml:\"data,omitempty\""];
  void clear_data();
  static const int kDataFieldNumber = 2;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);
  ::std::string* unsafe_arena_release_data();
  void unsafe_arena_set_allocated_data(
      ::std::string* data);

  // bool preprocessed = 3 [(.gogoproto.moretags) = "yaml:\"preprocessed,omitempty\""];
  void clear_preprocessed();
  static const int kPreprocessedFieldNumber = 3;
  bool preprocessed() const;
  void set_preprocessed(bool value);

  // @@protoc_insertion_point(class_scope:carml.org.predictor.ImagesRequest.Image)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  bool preprocessed_;
  mutable int _cached_size_;
  friend struct protobuf_predictor_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ImagesRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:carml.org.predictor.ImagesRequest) */ {
 public:
  ImagesRequest();
  virtual ~ImagesRequest();

  ImagesRequest(const ImagesRequest& from);

  inline ImagesRequest& operator=(const ImagesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ImagesRequest(ImagesRequest&& from) noexcept
    : ImagesRequest() {
    *this = ::std::move(from);
  }

  inline ImagesRequest& operator=(ImagesRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const ImagesRequest& default_instance();

  static inline const ImagesRequest* internal_default_instance() {
    return reinterpret_cast<const ImagesRequest*>(
               &_ImagesRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void UnsafeArenaSwap(ImagesRequest* other);
  void Swap(ImagesRequest* other);
  friend void swap(ImagesRequest& a, ImagesRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ImagesRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  ImagesRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ImagesRequest& from);
  void MergeFrom(const ImagesRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ImagesRequest* other);
  protected:
  explicit ImagesRequest(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef ImagesRequest_Image Image;

  // accessors -------------------------------------------------------

  // repeated .carml.org.predictor.ImagesRequest.Image images = 2 [(.gogoproto.moretags) = "yaml:\"images,omitempty\""];
  int images_size() const;
  void clear_images();
  static const int kImagesFieldNumber = 2;
  const ::carml::org::predictor::ImagesRequest_Image& images(int index) const;
  ::carml::org::predictor::ImagesRequest_Image* mutable_images(int index);
  ::carml::org::predictor::ImagesRequest_Image* add_images();
  ::google::protobuf::RepeatedPtrField< ::carml::org::predictor::ImagesRequest_Image >*
      mutable_images();
  const ::google::protobuf::RepeatedPtrField< ::carml::org::predictor::ImagesRequest_Image >&
      images() const;

  // .carml.org.predictor.Predictor predictor = 1 [(.gogoproto.moretags) = "yaml:\"predictor,omitempty\""];
  bool has_predictor() const;
  void clear_predictor();
  static const int kPredictorFieldNumber = 1;
  private:
  void _slow_mutable_predictor();
  void _slow_set_allocated_predictor(
      ::google::protobuf::Arena* message_arena, ::carml::org::predictor::Predictor** predictor);
  ::carml::org::predictor::Predictor* _slow_release_predictor();
  public:
  const ::carml::org::predictor::Predictor& predictor() const;
  ::carml::org::predictor::Predictor* mutable_predictor();
  ::carml::org::predictor::Predictor* release_predictor();
  void set_allocated_predictor(::carml::org::predictor::Predictor* predictor);
  ::carml::org::predictor::Predictor* unsafe_arena_release_predictor();
  void unsafe_arena_set_allocated_predictor(
      ::carml::org::predictor::Predictor* predictor);

  // .carml.org.predictor.PredictionOptions options = 3 [(.gogoproto.moretags) = "yaml:\"options,omitempty\""];
  bool has_options() const;
  void clear_options();
  static const int kOptionsFieldNumber = 3;
  private:
  void _slow_mutable_options();
  void _slow_set_allocated_options(
      ::google::protobuf::Arena* message_arena, ::carml::org::predictor::PredictionOptions** options);
  ::carml::org::predictor::PredictionOptions* _slow_release_options();
  public:
  const ::carml::org::predictor::PredictionOptions& options() const;
  ::carml::org::predictor::PredictionOptions* mutable_options();
  ::carml::org::predictor::PredictionOptions* release_options();
  void set_allocated_options(::carml::org::predictor::PredictionOptions* options);
  ::carml::org::predictor::PredictionOptions* unsafe_arena_release_options();
  void unsafe_arena_set_allocated_options(
      ::carml::org::predictor::PredictionOptions* options);

  // @@protoc_insertion_point(class_scope:carml.org.predictor.ImagesRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::RepeatedPtrField< ::carml::org::predictor::ImagesRequest_Image > images_;
  ::carml::org::predictor::Predictor* predictor_;
  ::carml::org::predictor::PredictionOptions* options_;
  mutable int _cached_size_;
  friend struct protobuf_predictor_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DatasetRequest_Dataset : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:carml.org.predictor.DatasetRequest.Dataset) */ {
 public:
  DatasetRequest_Dataset();
  virtual ~DatasetRequest_Dataset();

  DatasetRequest_Dataset(const DatasetRequest_Dataset& from);

  inline DatasetRequest_Dataset& operator=(const DatasetRequest_Dataset& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DatasetRequest_Dataset(DatasetRequest_Dataset&& from) noexcept
    : DatasetRequest_Dataset() {
    *this = ::std::move(from);
  }

  inline DatasetRequest_Dataset& operator=(DatasetRequest_Dataset&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const DatasetRequest_Dataset& default_instance();

  static inline const DatasetRequest_Dataset* internal_default_instance() {
    return reinterpret_cast<const DatasetRequest_Dataset*>(
               &_DatasetRequest_Dataset_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    9;

  void UnsafeArenaSwap(DatasetRequest_Dataset* other);
  void Swap(DatasetRequest_Dataset* other);
  friend void swap(DatasetRequest_Dataset& a, DatasetRequest_Dataset& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DatasetRequest_Dataset* New() const PROTOBUF_FINAL { return New(NULL); }

  DatasetRequest_Dataset* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DatasetRequest_Dataset& from);
  void MergeFrom(const DatasetRequest_Dataset& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DatasetRequest_Dataset* other);
  protected:
  explicit DatasetRequest_Dataset(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string category = 1 [(.gogoproto.moretags) = "yaml:\"category,omitempty\""];
  void clear_category();
  static const int kCategoryFieldNumber = 1;
  const ::std::string& category() const;
  void set_category(const ::std::string& value);
  #if LANG_CXX11
  void set_category(::std::string&& value);
  #endif
  void set_category(const char* value);
  void set_category(const char* value, size_t size);
  ::std::string* mutable_category();
  ::std::string* release_category();
  void set_allocated_category(::std::string* category);
  ::std::string* unsafe_arena_release_category();
  void unsafe_arena_set_allocated_category(
      ::std::string* category);

  // string name = 2 [(.gogoproto.moretags) = "yaml:\"name,omitempty\""];
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);
  ::std::string* unsafe_arena_release_name();
  void unsafe_arena_set_allocated_name(
      ::std::string* name);

  // @@protoc_insertion_point(class_scope:carml.org.predictor.DatasetRequest.Dataset)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr category_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  mutable int _cached_size_;
  friend struct protobuf_predictor_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DatasetRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:carml.org.predictor.DatasetRequest) */ {
 public:
  DatasetRequest();
  virtual ~DatasetRequest();

  DatasetRequest(const DatasetRequest& from);

  inline DatasetRequest& operator=(const DatasetRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DatasetRequest(DatasetRequest&& from) noexcept
    : DatasetRequest() {
    *this = ::std::move(from);
  }

  inline DatasetRequest& operator=(DatasetRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const DatasetRequest& default_instance();

  static inline const DatasetRequest* internal_default_instance() {
    return reinterpret_cast<const DatasetRequest*>(
               &_DatasetRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    10;

  void UnsafeArenaSwap(DatasetRequest* other);
  void Swap(DatasetRequest* other);
  friend void swap(DatasetRequest& a, DatasetRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DatasetRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  DatasetRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DatasetRequest& from);
  void MergeFrom(const DatasetRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DatasetRequest* other);
  protected:
  explicit DatasetRequest(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef DatasetRequest_Dataset Dataset;

  // accessors -------------------------------------------------------

  // .carml.org.predictor.Predictor predictor = 1 [(.gogoproto.moretags) = "yaml:\"predictor,omitempty\""];
  bool has_predictor() const;
  void clear_predictor();
  static const int kPredictorFieldNumber = 1;
  private:
  void _slow_mutable_predictor();
  void _slow_set_allocated_predictor(
      ::google::protobuf::Arena* message_arena, ::carml::org::predictor::Predictor** predictor);
  ::carml::org::predictor::Predictor* _slow_release_predictor();
  public:
  const ::carml::org::predictor::Predictor& predictor() const;
  ::carml::org::predictor::Predictor* mutable_predictor();
  ::carml::org::predictor::Predictor* release_predictor();
  void set_allocated_predictor(::carml::org::predictor::Predictor* predictor);
  ::carml::org::predictor::Predictor* unsafe_arena_release_predictor();
  void unsafe_arena_set_allocated_predictor(
      ::carml::org::predictor::Predictor* predictor);

  // .carml.org.predictor.DatasetRequest.Dataset dataset = 2 [(.gogoproto.moretags) = "yaml:\"dataset,omitempty\""];
  bool has_dataset() const;
  void clear_dataset();
  static const int kDatasetFieldNumber = 2;
  private:
  void _slow_mutable_dataset();
  void _slow_set_allocated_dataset(
      ::google::protobuf::Arena* message_arena, ::carml::org::predictor::DatasetRequest_Dataset** dataset);
  ::carml::org::predictor::DatasetRequest_Dataset* _slow_release_dataset();
  public:
  const ::carml::org::predictor::DatasetRequest_Dataset& dataset() const;
  ::carml::org::predictor::DatasetRequest_Dataset* mutable_dataset();
  ::carml::org::predictor::DatasetRequest_Dataset* release_dataset();
  void set_allocated_dataset(::carml::org::predictor::DatasetRequest_Dataset* dataset);
  ::carml::org::predictor::DatasetRequest_Dataset* unsafe_arena_release_dataset();
  void unsafe_arena_set_allocated_dataset(
      ::carml::org::predictor::DatasetRequest_Dataset* dataset);

  // .carml.org.predictor.PredictionOptions options = 3 [(.gogoproto.moretags) = "yaml:\"options,omitempty\""];
  bool has_options() const;
  void clear_options();
  static const int kOptionsFieldNumber = 3;
  private:
  void _slow_mutable_options();
  void _slow_set_allocated_options(
      ::google::protobuf::Arena* message_arena, ::carml::org::predictor::PredictionOptions** options);
  ::carml::org::predictor::PredictionOptions* _slow_release_options();
  public:
  const ::carml::org::predictor::PredictionOptions& options() const;
  ::carml::org::predictor::PredictionOptions* mutable_options();
  ::carml::org::predictor::PredictionOptions* release_options();
  void set_allocated_options(::carml::org::predictor::PredictionOptions* options);
  ::carml::org::predictor::PredictionOptions* unsafe_arena_release_options();
  void unsafe_arena_set_allocated_options(
      ::carml::org::predictor::PredictionOptions* options);

  // @@protoc_insertion_point(class_scope:carml.org.predictor.DatasetRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::carml::org::predictor::Predictor* predictor_;
  ::carml::org::predictor::DatasetRequest_Dataset* dataset_;
  ::carml::org::predictor::PredictionOptions* options_;
  mutable int _cached_size_;
  friend struct protobuf_predictor_2eproto::TableStruct;
};
// -------------------------------------------------------------------


// -------------------------------------------------------------------

class Feature : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:carml.org.predictor.Feature) */ {
 public:
  Feature();
  virtual ~Feature();

  Feature(const Feature& from);

  inline Feature& operator=(const Feature& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Feature(Feature&& from) noexcept
    : Feature() {
    *this = ::std::move(from);
  }

  inline Feature& operator=(Feature&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const Feature& default_instance();

  static inline const Feature* internal_default_instance() {
    return reinterpret_cast<const Feature*>(
               &_Feature_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    12;

  void UnsafeArenaSwap(Feature* other);
  void Swap(Feature* other);
  friend void swap(Feature& a, Feature& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Feature* New() const PROTOBUF_FINAL { return New(NULL); }

  Feature* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Feature& from);
  void MergeFrom(const Feature& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Feature* other);
  protected:
  explicit Feature(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<string, string> metadata = 4 [(.gogoproto.moretags) = "yaml:\"metadata,omitempty\""];
  int metadata_size() const;
  void clear_metadata();
  static const int kMetadataFieldNumber = 4;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      metadata() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_metadata();

  // string name = 2 [(.gogoproto.moretags) = "yaml:\"name,omitempty\""];
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);
  ::std::string* unsafe_arena_release_name();
  void unsafe_arena_set_allocated_name(
      ::std::string* name);

  // int64 index = 1 [(.gogoproto.moretags) = "yaml:\"index,omitempty\""];
  void clear_index();
  static const int kIndexFieldNumber = 1;
  ::google::protobuf::int64 index() const;
  void set_index(::google::protobuf::int64 value);

  // float probability = 3 [(.gogoproto.moretags) = "yaml:\"probability,omitempty\""];
  void clear_probability();
  static const int kProbabilityFieldNumber = 3;
  float probability() const;
  void set_probability(float value);

  // @@protoc_insertion_point(class_scope:carml.org.predictor.Feature)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  public:
  class Feature_MetadataEntry : public ::google::protobuf::internal::MapEntry<Feature_MetadataEntry, 
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > {
  public:
    typedef ::google::protobuf::internal::MapEntry<Feature_MetadataEntry, 
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > SuperType;
    Feature_MetadataEntry();
    Feature_MetadataEntry(::google::protobuf::Arena* arena);
    void MergeFrom(const ::google::protobuf::Message& other) PROTOBUF_FINAL;
    void MergeFrom(const Feature_MetadataEntry& other);
    static const Message* internal_default_instance() { return reinterpret_cast<const Message*>(&_Feature_MetadataEntry_default_instance_); }
    ::google::protobuf::Metadata GetMetadata() const;
  };
  private:
  ::google::protobuf::internal::MapField<
      Feature_MetadataEntry,
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > metadata_;
  private:
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::int64 index_;
  float probability_;
  mutable int _cached_size_;
  friend struct protobuf_predictor_2eproto::TableStruct;
};
// -------------------------------------------------------------------


// -------------------------------------------------------------------

class FeatureResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:carml.org.predictor.FeatureResponse) */ {
 public:
  FeatureResponse();
  virtual ~FeatureResponse();

  FeatureResponse(const FeatureResponse& from);

  inline FeatureResponse& operator=(const FeatureResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FeatureResponse(FeatureResponse&& from) noexcept
    : FeatureResponse() {
    *this = ::std::move(from);
  }

  inline FeatureResponse& operator=(FeatureResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const FeatureResponse& default_instance();

  static inline const FeatureResponse* internal_default_instance() {
    return reinterpret_cast<const FeatureResponse*>(
               &_FeatureResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    14;

  void UnsafeArenaSwap(FeatureResponse* other);
  void Swap(FeatureResponse* other);
  friend void swap(FeatureResponse& a, FeatureResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FeatureResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  FeatureResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FeatureResponse& from);
  void MergeFrom(const FeatureResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FeatureResponse* other);
  protected:
  explicit FeatureResponse(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // repeated .carml.org.predictor.Feature features = 4 [(.gogoproto.moretags) = "yaml:\"features,omitempty\""];
  int features_size() const;
  void clear_features();
  static const int kFeaturesFieldNumber = 4;
  const ::carml::org::predictor::Feature& features(int index) const;
  ::carml::org::predictor::Feature* mutable_features(int index);
  ::carml::org::predictor::Feature* add_features();
  ::google::protobuf::RepeatedPtrField< ::carml::org::predictor::Feature >*
      mutable_features();
  const ::google::protobuf::RepeatedPtrField< ::carml::org::predictor::Feature >&
      features() const;

  // map<string, string> metadata = 5 [(.gogoproto.moretags) = "yaml:\"metadata,omitempty\""];
  int metadata_size() const;
  void clear_metadata();
  static const int kMetadataFieldNumber = 5;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      metadata() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_metadata();

  // string id = 1 [(.gogoproto.customname) = "ID", (.gogoproto.jsontag) = "id,omitempty", (.gogoproto.moretags) = "yaml:\"id,omitempty\""];
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);
  ::std::string* unsafe_arena_release_id();
  void unsafe_arena_set_allocated_id(
      ::std::string* id);

  // string request_id = 2 [(.gogoproto.customname) = "RequestID", (.gogoproto.jsontag) = "request_id,omitempty", (.gogoproto.moretags) = "yaml:\"request_id,omitempty\""];
  void clear_request_id();
  static const int kRequestIdFieldNumber = 2;
  const ::std::string& request_id() const;
  void set_request_id(const ::std::string& value);
  #if LANG_CXX11
  void set_request_id(::std::string&& value);
  #endif
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  ::std::string* mutable_request_id();
  ::std::string* release_request_id();
  void set_allocated_request_id(::std::string* request_id);
  ::std::string* unsafe_arena_release_request_id();
  void unsafe_arena_set_allocated_request_id(
      ::std::string* request_id);

  // string input_id = 3 [(.gogoproto.customname) = "InputID", (.gogoproto.jsontag) = "input_id,omitempty", (.gogoproto.moretags) = "yaml:\"input_id,omitempty\""];
  void clear_input_id();
  static const int kInputIdFieldNumber = 3;
  const ::std::string& input_id() const;
  void set_input_id(const ::std::string& value);
  #if LANG_CXX11
  void set_input_id(::std::string&& value);
  #endif
  void set_input_id(const char* value);
  void set_input_id(const char* value, size_t size);
  ::std::string* mutable_input_id();
  ::std::string* release_input_id();
  void set_allocated_input_id(::std::string* input_id);
  ::std::string* unsafe_arena_release_input_id();
  void unsafe_arena_set_allocated_input_id(
      ::std::string* input_id);

  // @@protoc_insertion_point(class_scope:carml.org.predictor.FeatureResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::RepeatedPtrField< ::carml::org::predictor::Feature > features_;
  public:
  class FeatureResponse_MetadataEntry : public ::google::protobuf::internal::MapEntry<FeatureResponse_MetadataEntry, 
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > {
  public:
    typedef ::google::protobuf::internal::MapEntry<FeatureResponse_MetadataEntry, 
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > SuperType;
    FeatureResponse_MetadataEntry();
    FeatureResponse_MetadataEntry(::google::protobuf::Arena* arena);
    void MergeFrom(const ::google::protobuf::Message& other) PROTOBUF_FINAL;
    void MergeFrom(const FeatureResponse_MetadataEntry& other);
    static const Message* internal_default_instance() { return reinterpret_cast<const Message*>(&_FeatureResponse_MetadataEntry_default_instance_); }
    ::google::protobuf::Metadata GetMetadata() const;
  };
  private:
  ::google::protobuf::internal::MapField<
      FeatureResponse_MetadataEntry,
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > metadata_;
  private:
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr request_id_;
  ::google::protobuf::internal::ArenaStringPtr input_id_;
  mutable int _cached_size_;
  friend struct protobuf_predictor_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FeaturesResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:carml.org.predictor.FeaturesResponse) */ {
 public:
  FeaturesResponse();
  virtual ~FeaturesResponse();

  FeaturesResponse(const FeaturesResponse& from);

  inline FeaturesResponse& operator=(const FeaturesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FeaturesResponse(FeaturesResponse&& from) noexcept
    : FeaturesResponse() {
    *this = ::std::move(from);
  }

  inline FeaturesResponse& operator=(FeaturesResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const FeaturesResponse& default_instance();

  static inline const FeaturesResponse* internal_default_instance() {
    return reinterpret_cast<const FeaturesResponse*>(
               &_FeaturesResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    15;

  void UnsafeArenaSwap(FeaturesResponse* other);
  void Swap(FeaturesResponse* other);
  friend void swap(FeaturesResponse& a, FeaturesResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FeaturesResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  FeaturesResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FeaturesResponse& from);
  void MergeFrom(const FeaturesResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FeaturesResponse* other);
  protected:
  explicit FeaturesResponse(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .carml.org.predictor.FeatureResponse responses = 2 [(.gogoproto.moretags) = "yaml:\"responses,omitempty\""];
  int responses_size() const;
  void clear_responses();
  static const int kResponsesFieldNumber = 2;
  const ::carml::org::predictor::FeatureResponse& responses(int index) const;
  ::carml::org::predictor::FeatureResponse* mutable_responses(int index);
  ::carml::org::predictor::FeatureResponse* add_responses();
  ::google::protobuf::RepeatedPtrField< ::carml::org::predictor::FeatureResponse >*
      mutable_responses();
  const ::google::protobuf::RepeatedPtrField< ::carml::org::predictor::FeatureResponse >&
      responses() const;

  // string id = 1 [(.gogoproto.customname) = "ID", (.gogoproto.jsontag) = "id,omitempty", (.gogoproto.moretags) = "yaml:\"id,omitempty\""];
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);
  ::std::string* unsafe_arena_release_id();
  void unsafe_arena_set_allocated_id(
      ::std::string* id);

  // @@protoc_insertion_point(class_scope:carml.org.predictor.FeaturesResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::RepeatedPtrField< ::carml::org::predictor::FeatureResponse > responses_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  mutable int _cached_size_;
  friend struct protobuf_predictor_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ResetRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:carml.org.predictor.ResetRequest) */ {
 public:
  ResetRequest();
  virtual ~ResetRequest();

  ResetRequest(const ResetRequest& from);

  inline ResetRequest& operator=(const ResetRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResetRequest(ResetRequest&& from) noexcept
    : ResetRequest() {
    *this = ::std::move(from);
  }

  inline ResetRequest& operator=(ResetRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const ResetRequest& default_instance();

  static inline const ResetRequest* internal_default_instance() {
    return reinterpret_cast<const ResetRequest*>(
               &_ResetRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    16;

  void UnsafeArenaSwap(ResetRequest* other);
  void Swap(ResetRequest* other);
  friend void swap(ResetRequest& a, ResetRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResetRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  ResetRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ResetRequest& from);
  void MergeFrom(const ResetRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ResetRequest* other);
  protected:
  explicit ResetRequest(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string id = 2 [(.gogoproto.customname) = "ID", (.gogoproto.jsontag) = "id,omitempty", (.gogoproto.moretags) = "yaml:\"id,omitempty\""];
  void clear_id();
  static const int kIdFieldNumber = 2;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);
  ::std::string* unsafe_arena_release_id();
  void unsafe_arena_set_allocated_id(
      ::std::string* id);

  // .carml.org.predictor.Predictor predictor = 1 [(.gogoproto.moretags) = "yaml:\"predictor,omitempty\""];
  bool has_predictor() const;
  void clear_predictor();
  static const int kPredictorFieldNumber = 1;
  private:
  void _slow_mutable_predictor();
  void _slow_set_allocated_predictor(
      ::google::protobuf::Arena* message_arena, ::carml::org::predictor::Predictor** predictor);
  ::carml::org::predictor::Predictor* _slow_release_predictor();
  public:
  const ::carml::org::predictor::Predictor& predictor() const;
  ::carml::org::predictor::Predictor* mutable_predictor();
  ::carml::org::predictor::Predictor* release_predictor();
  void set_allocated_predictor(::carml::org::predictor::Predictor* predictor);
  ::carml::org::predictor::Predictor* unsafe_arena_release_predictor();
  void unsafe_arena_set_allocated_predictor(
      ::carml::org::predictor::Predictor* predictor);

  // @@protoc_insertion_point(class_scope:carml.org.predictor.ResetRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::carml::org::predictor::Predictor* predictor_;
  mutable int _cached_size_;
  friend struct protobuf_predictor_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ResetResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:carml.org.predictor.ResetResponse) */ {
 public:
  ResetResponse();
  virtual ~ResetResponse();

  ResetResponse(const ResetResponse& from);

  inline ResetResponse& operator=(const ResetResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResetResponse(ResetResponse&& from) noexcept
    : ResetResponse() {
    *this = ::std::move(from);
  }

  inline ResetResponse& operator=(ResetResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const ResetResponse& default_instance();

  static inline const ResetResponse* internal_default_instance() {
    return reinterpret_cast<const ResetResponse*>(
               &_ResetResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    17;

  void UnsafeArenaSwap(ResetResponse* other);
  void Swap(ResetResponse* other);
  friend void swap(ResetResponse& a, ResetResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResetResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  ResetResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ResetResponse& from);
  void MergeFrom(const ResetResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ResetResponse* other);
  protected:
  explicit ResetResponse(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .carml.org.predictor.Predictor predictor = 1 [(.gogoproto.embed) = true, (.gogoproto.moretags) = "yaml:\"predictor,omitempty\""];
  bool has_predictor() const;
  void clear_predictor();
  static const int kPredictorFieldNumber = 1;
  private:
  void _slow_mutable_predictor();
  void _slow_set_allocated_predictor(
      ::google::protobuf::Arena* message_arena, ::carml::org::predictor::Predictor** predictor);
  ::carml::org::predictor::Predictor* _slow_release_predictor();
  public:
  const ::carml::org::predictor::Predictor& predictor() const;
  ::carml::org::predictor::Predictor* mutable_predictor();
  ::carml::org::predictor::Predictor* release_predictor();
  void set_allocated_predictor(::carml::org::predictor::Predictor* predictor);
  ::carml::org::predictor::Predictor* unsafe_arena_release_predictor();
  void unsafe_arena_set_allocated_predictor(
      ::carml::org::predictor::Predictor* predictor);

  // @@protoc_insertion_point(class_scope:carml.org.predictor.ResetResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::carml::org::predictor::Predictor* predictor_;
  mutable int _cached_size_;
  friend struct protobuf_predictor_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ErrorStatus

// bool ok = 1 [(.gogoproto.moretags) = "yaml:\"ok,omitempty\""];
inline void ErrorStatus::clear_ok() {
  ok_ = false;
}
inline bool ErrorStatus::ok() const {
  // @@protoc_insertion_point(field_get:carml.org.predictor.ErrorStatus.ok)
  return ok_;
}
inline void ErrorStatus::set_ok(bool value) {
  
  ok_ = value;
  // @@protoc_insertion_point(field_set:carml.org.predictor.ErrorStatus.ok)
}

// string message = 2 [(.gogoproto.moretags) = "yaml:\"message,omitempty\""];
inline void ErrorStatus::clear_message() {
  message_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& ErrorStatus::message() const {
  // @@protoc_insertion_point(field_get:carml.org.predictor.ErrorStatus.message)
  return message_.Get();
}
inline void ErrorStatus::set_message(const ::std::string& value) {
  
  message_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:carml.org.predictor.ErrorStatus.message)
}
#if LANG_CXX11
inline void ErrorStatus::set_message(::std::string&& value) {
  
  message_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:carml.org.predictor.ErrorStatus.message)
}
#endif
inline void ErrorStatus::set_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  message_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:carml.org.predictor.ErrorStatus.message)
}
inline void ErrorStatus::set_message(const char* value,
    size_t size) {
  
  message_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:carml.org.predictor.ErrorStatus.message)
}
inline ::std::string* ErrorStatus::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:carml.org.predictor.ErrorStatus.message)
  return message_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ErrorStatus::release_message() {
  // @@protoc_insertion_point(field_release:carml.org.predictor.ErrorStatus.message)
  
  return message_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ErrorStatus::unsafe_arena_release_message() {
  // @@protoc_insertion_point(field_unsafe_arena_release:carml.org.predictor.ErrorStatus.message)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return message_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ErrorStatus::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    
  } else {
    
  }
  message_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:carml.org.predictor.ErrorStatus.message)
}
inline void ErrorStatus::unsafe_arena_set_allocated_message(
    ::std::string* message) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (message != NULL) {
    
  } else {
    
  }
  message_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      message, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:carml.org.predictor.ErrorStatus.message)
}

// -------------------------------------------------------------------

// PredictorOpenRequest

// string model_name = 1 [(.gogoproto.moretags) = "yaml:\"model_name,omitempty\""];
inline void PredictorOpenRequest::clear_model_name() {
  model_name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& PredictorOpenRequest::model_name() const {
  // @@protoc_insertion_point(field_get:carml.org.predictor.PredictorOpenRequest.model_name)
  return model_name_.Get();
}
inline void PredictorOpenRequest::set_model_name(const ::std::string& value) {
  
  model_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:carml.org.predictor.PredictorOpenRequest.model_name)
}
#if LANG_CXX11
inline void PredictorOpenRequest::set_model_name(::std::string&& value) {
  
  model_name_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:carml.org.predictor.PredictorOpenRequest.model_name)
}
#endif
inline void PredictorOpenRequest::set_model_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  model_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:carml.org.predictor.PredictorOpenRequest.model_name)
}
inline void PredictorOpenRequest::set_model_name(const char* value,
    size_t size) {
  
  model_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:carml.org.predictor.PredictorOpenRequest.model_name)
}
inline ::std::string* PredictorOpenRequest::mutable_model_name() {
  
  // @@protoc_insertion_point(field_mutable:carml.org.predictor.PredictorOpenRequest.model_name)
  return model_name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* PredictorOpenRequest::release_model_name() {
  // @@protoc_insertion_point(field_release:carml.org.predictor.PredictorOpenRequest.model_name)
  
  return model_name_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* PredictorOpenRequest::unsafe_arena_release_model_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:carml.org.predictor.PredictorOpenRequest.model_name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return model_name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void PredictorOpenRequest::set_allocated_model_name(::std::string* model_name) {
  if (model_name != NULL) {
    
  } else {
    
  }
  model_name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), model_name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:carml.org.predictor.PredictorOpenRequest.model_name)
}
inline void PredictorOpenRequest::unsafe_arena_set_allocated_model_name(
    ::std::string* model_name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (model_name != NULL) {
    
  } else {
    
  }
  model_name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      model_name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:carml.org.predictor.PredictorOpenRequest.model_name)
}

// string model_version = 2 [(.gogoproto.moretags) = "yaml:\"model_version,omitempty\""];
inline void PredictorOpenRequest::clear_model_version() {
  model_version_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& PredictorOpenRequest::model_version() const {
  // @@protoc_insertion_point(field_get:carml.org.predictor.PredictorOpenRequest.model_version)
  return model_version_.Get();
}
inline void PredictorOpenRequest::set_model_version(const ::std::string& value) {
  
  model_version_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:carml.org.predictor.PredictorOpenRequest.model_version)
}
#if LANG_CXX11
inline void PredictorOpenRequest::set_model_version(::std::string&& value) {
  
  model_version_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:carml.org.predictor.PredictorOpenRequest.model_version)
}
#endif
inline void PredictorOpenRequest::set_model_version(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  model_version_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:carml.org.predictor.PredictorOpenRequest.model_version)
}
inline void PredictorOpenRequest::set_model_version(const char* value,
    size_t size) {
  
  model_version_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:carml.org.predictor.PredictorOpenRequest.model_version)
}
inline ::std::string* PredictorOpenRequest::mutable_model_version() {
  
  // @@protoc_insertion_point(field_mutable:carml.org.predictor.PredictorOpenRequest.model_version)
  return model_version_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* PredictorOpenRequest::release_model_version() {
  // @@protoc_insertion_point(field_release:carml.org.predictor.PredictorOpenRequest.model_version)
  
  return model_version_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* PredictorOpenRequest::unsafe_arena_release_model_version() {
  // @@protoc_insertion_point(field_unsafe_arena_release:carml.org.predictor.PredictorOpenRequest.model_version)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return model_version_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void PredictorOpenRequest::set_allocated_model_version(::std::string* model_version) {
  if (model_version != NULL) {
    
  } else {
    
  }
  model_version_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), model_version,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:carml.org.predictor.PredictorOpenRequest.model_version)
}
inline void PredictorOpenRequest::unsafe_arena_set_allocated_model_version(
    ::std::string* model_version) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (model_version != NULL) {
    
  } else {
    
  }
  model_version_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      model_version, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:carml.org.predictor.PredictorOpenRequest.model_version)
}

// string framework_name = 3 [(.gogoproto.moretags) = "yaml:\"framework_name,omitempty\""];
inline void PredictorOpenRequest::clear_framework_name() {
  framework_name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& PredictorOpenRequest::framework_name() const {
  // @@protoc_insertion_point(field_get:carml.org.predictor.PredictorOpenRequest.framework_name)
  return framework_name_.Get();
}
inline void PredictorOpenRequest::set_framework_name(const ::std::string& value) {
  
  framework_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:carml.org.predictor.PredictorOpenRequest.framework_name)
}
#if LANG_CXX11
inline void PredictorOpenRequest::set_framework_name(::std::string&& value) {
  
  framework_name_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:carml.org.predictor.PredictorOpenRequest.framework_name)
}
#endif
inline void PredictorOpenRequest::set_framework_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  framework_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:carml.org.predictor.PredictorOpenRequest.framework_name)
}
inline void PredictorOpenRequest::set_framework_name(const char* value,
    size_t size) {
  
  framework_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:carml.org.predictor.PredictorOpenRequest.framework_name)
}
inline ::std::string* PredictorOpenRequest::mutable_framework_name() {
  
  // @@protoc_insertion_point(field_mutable:carml.org.predictor.PredictorOpenRequest.framework_name)
  return framework_name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* PredictorOpenRequest::release_framework_name() {
  // @@protoc_insertion_point(field_release:carml.org.predictor.PredictorOpenRequest.framework_name)
  
  return framework_name_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* PredictorOpenRequest::unsafe_arena_release_framework_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:carml.org.predictor.PredictorOpenRequest.framework_name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return framework_name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void PredictorOpenRequest::set_allocated_framework_name(::std::string* framework_name) {
  if (framework_name != NULL) {
    
  } else {
    
  }
  framework_name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), framework_name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:carml.org.predictor.PredictorOpenRequest.framework_name)
}
inline void PredictorOpenRequest::unsafe_arena_set_allocated_framework_name(
    ::std::string* framework_name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (framework_name != NULL) {
    
  } else {
    
  }
  framework_name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      framework_name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:carml.org.predictor.PredictorOpenRequest.framework_name)
}

// string framework_version = 4 [(.gogoproto.moretags) = "yaml:\"framework_version,omitempty\""];
inline void PredictorOpenRequest::clear_framework_version() {
  framework_version_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& PredictorOpenRequest::framework_version() const {
  // @@protoc_insertion_point(field_get:carml.org.predictor.PredictorOpenRequest.framework_version)
  return framework_version_.Get();
}
inline void PredictorOpenRequest::set_framework_version(const ::std::string& value) {
  
  framework_version_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:carml.org.predictor.PredictorOpenRequest.framework_version)
}
#if LANG_CXX11
inline void PredictorOpenRequest::set_framework_version(::std::string&& value) {
  
  framework_version_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:carml.org.predictor.PredictorOpenRequest.framework_version)
}
#endif
inline void PredictorOpenRequest::set_framework_version(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  framework_version_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:carml.org.predictor.PredictorOpenRequest.framework_version)
}
inline void PredictorOpenRequest::set_framework_version(const char* value,
    size_t size) {
  
  framework_version_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:carml.org.predictor.PredictorOpenRequest.framework_version)
}
inline ::std::string* PredictorOpenRequest::mutable_framework_version() {
  
  // @@protoc_insertion_point(field_mutable:carml.org.predictor.PredictorOpenRequest.framework_version)
  return framework_version_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* PredictorOpenRequest::release_framework_version() {
  // @@protoc_insertion_point(field_release:carml.org.predictor.PredictorOpenRequest.framework_version)
  
  return framework_version_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* PredictorOpenRequest::unsafe_arena_release_framework_version() {
  // @@protoc_insertion_point(field_unsafe_arena_release:carml.org.predictor.PredictorOpenRequest.framework_version)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return framework_version_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void PredictorOpenRequest::set_allocated_framework_version(::std::string* framework_version) {
  if (framework_version != NULL) {
    
  } else {
    
  }
  framework_version_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), framework_version,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:carml.org.predictor.PredictorOpenRequest.framework_version)
}
inline void PredictorOpenRequest::unsafe_arena_set_allocated_framework_version(
    ::std::string* framework_version) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (framework_version != NULL) {
    
  } else {
    
  }
  framework_version_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      framework_version, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:carml.org.predictor.PredictorOpenRequest.framework_version)
}

// -------------------------------------------------------------------

// PredictorCloseResponse

// -------------------------------------------------------------------

// PredictionOptions

// string request_id = 1 [(.gogoproto.customname) = "RequestID", (.gogoproto.jsontag) = "request_id,omitempty", (.gogoproto.moretags) = "yaml:\"request_id,omitempty\""];
inline void PredictionOptions::clear_request_id() {
  request_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& PredictionOptions::request_id() const {
  // @@protoc_insertion_point(field_get:carml.org.predictor.PredictionOptions.request_id)
  return request_id_.Get();
}
inline void PredictionOptions::set_request_id(const ::std::string& value) {
  
  request_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:carml.org.predictor.PredictionOptions.request_id)
}
#if LANG_CXX11
inline void PredictionOptions::set_request_id(::std::string&& value) {
  
  request_id_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:carml.org.predictor.PredictionOptions.request_id)
}
#endif
inline void PredictionOptions::set_request_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  request_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:carml.org.predictor.PredictionOptions.request_id)
}
inline void PredictionOptions::set_request_id(const char* value,
    size_t size) {
  
  request_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:carml.org.predictor.PredictionOptions.request_id)
}
inline ::std::string* PredictionOptions::mutable_request_id() {
  
  // @@protoc_insertion_point(field_mutable:carml.org.predictor.PredictionOptions.request_id)
  return request_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* PredictionOptions::release_request_id() {
  // @@protoc_insertion_point(field_release:carml.org.predictor.PredictionOptions.request_id)
  
  return request_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* PredictionOptions::unsafe_arena_release_request_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:carml.org.predictor.PredictionOptions.request_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return request_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void PredictionOptions::set_allocated_request_id(::std::string* request_id) {
  if (request_id != NULL) {
    
  } else {
    
  }
  request_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), request_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:carml.org.predictor.PredictionOptions.request_id)
}
inline void PredictionOptions::unsafe_arena_set_allocated_request_id(
    ::std::string* request_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (request_id != NULL) {
    
  } else {
    
  }
  request_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      request_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:carml.org.predictor.PredictionOptions.request_id)
}

// int32 feature_limit = 2 [(.gogoproto.moretags) = "yaml:\"feature_limit,omitempty\""];
inline void PredictionOptions::clear_feature_limit() {
  feature_limit_ = 0;
}
inline ::google::protobuf::int32 PredictionOptions::feature_limit() const {
  // @@protoc_insertion_point(field_get:carml.org.predictor.PredictionOptions.feature_limit)
  return feature_limit_;
}
inline void PredictionOptions::set_feature_limit(::google::protobuf::int32 value) {
  
  feature_limit_ = value;
  // @@protoc_insertion_point(field_set:carml.org.predictor.PredictionOptions.feature_limit)
}

// -------------------------------------------------------------------

// Predictor

// string id = 1 [(.gogoproto.customname) = "ID", (.gogoproto.jsontag) = "id,omitempty", (.gogoproto.moretags) = "yaml:\"id,omitempty\""];
inline void Predictor::clear_id() {
  id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& Predictor::id() const {
  // @@protoc_insertion_point(field_get:carml.org.predictor.Predictor.id)
  return id_.Get();
}
inline void Predictor::set_id(const ::std::string& value) {
  
  id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:carml.org.predictor.Predictor.id)
}
#if LANG_CXX11
inline void Predictor::set_id(::std::string&& value) {
  
  id_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:carml.org.predictor.Predictor.id)
}
#endif
inline void Predictor::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:carml.org.predictor.Predictor.id)
}
inline void Predictor::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:carml.org.predictor.Predictor.id)
}
inline ::std::string* Predictor::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:carml.org.predictor.Predictor.id)
  return id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* Predictor::release_id() {
  // @@protoc_insertion_point(field_release:carml.org.predictor.Predictor.id)
  
  return id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* Predictor::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:carml.org.predictor.Predictor.id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void Predictor::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:carml.org.predictor.Predictor.id)
}
inline void Predictor::unsafe_arena_set_allocated_id(
    ::std::string* id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (id != NULL) {
    
  } else {
    
  }
  id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:carml.org.predictor.Predictor.id)
}

// -------------------------------------------------------------------

// URLsRequest_URL

// string id = 1 [(.gogoproto.customname) = "ID", (.gogoproto.jsontag) = "id,omitempty", (.gogoproto.moretags) = "yaml:\"id,omitempty\""];
inline void URLsRequest_URL::clear_id() {
  id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& URLsRequest_URL::id() const {
  // @@protoc_insertion_point(field_get:carml.org.predictor.URLsRequest.URL.id)
  return id_.Get();
}
inline void URLsRequest_URL::set_id(const ::std::string& value) {
  
  id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:carml.org.predictor.URLsRequest.URL.id)
}
#if LANG_CXX11
inline void URLsRequest_URL::set_id(::std::string&& value) {
  
  id_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:carml.org.predictor.URLsRequest.URL.id)
}
#endif
inline void URLsRequest_URL::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:carml.org.predictor.URLsRequest.URL.id)
}
inline void URLsRequest_URL::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:carml.org.predictor.URLsRequest.URL.id)
}
inline ::std::string* URLsRequest_URL::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:carml.org.predictor.URLsRequest.URL.id)
  return id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* URLsRequest_URL::release_id() {
  // @@protoc_insertion_point(field_release:carml.org.predictor.URLsRequest.URL.id)
  
  return id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* URLsRequest_URL::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:carml.org.predictor.URLsRequest.URL.id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void URLsRequest_URL::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:carml.org.predictor.URLsRequest.URL.id)
}
inline void URLsRequest_URL::unsafe_arena_set_allocated_id(
    ::std::string* id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (id != NULL) {
    
  } else {
    
  }
  id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:carml.org.predictor.URLsRequest.URL.id)
}

// string data = 2 [(.gogoproto.moretags) = "yaml:\"data,omitempty\""];
inline void URLsRequest_URL::clear_data() {
  data_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& URLsRequest_URL::data() const {
  // @@protoc_insertion_point(field_get:carml.org.predictor.URLsRequest.URL.data)
  return data_.Get();
}
inline void URLsRequest_URL::set_data(const ::std::string& value) {
  
  data_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:carml.org.predictor.URLsRequest.URL.data)
}
#if LANG_CXX11
inline void URLsRequest_URL::set_data(::std::string&& value) {
  
  data_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:carml.org.predictor.URLsRequest.URL.data)
}
#endif
inline void URLsRequest_URL::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  data_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:carml.org.predictor.URLsRequest.URL.data)
}
inline void URLsRequest_URL::set_data(const char* value,
    size_t size) {
  
  data_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:carml.org.predictor.URLsRequest.URL.data)
}
inline ::std::string* URLsRequest_URL::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:carml.org.predictor.URLsRequest.URL.data)
  return data_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* URLsRequest_URL::release_data() {
  // @@protoc_insertion_point(field_release:carml.org.predictor.URLsRequest.URL.data)
  
  return data_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* URLsRequest_URL::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:carml.org.predictor.URLsRequest.URL.data)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return data_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void URLsRequest_URL::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:carml.org.predictor.URLsRequest.URL.data)
}
inline void URLsRequest_URL::unsafe_arena_set_allocated_data(
    ::std::string* data) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (data != NULL) {
    
  } else {
    
  }
  data_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      data, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:carml.org.predictor.URLsRequest.URL.data)
}

// -------------------------------------------------------------------

// URLsRequest

// .carml.org.predictor.Predictor predictor = 1 [(.gogoproto.moretags) = "yaml:\"predictor,omitempty\""];
inline bool URLsRequest::has_predictor() const {
  return this != internal_default_instance() && predictor_ != NULL;
}
inline void URLsRequest::clear_predictor() {
  if (GetArenaNoVirtual() == NULL && predictor_ != NULL) delete predictor_;
  predictor_ = NULL;
}
inline const ::carml::org::predictor::Predictor& URLsRequest::predictor() const {
  const ::carml::org::predictor::Predictor* p = predictor_;
  // @@protoc_insertion_point(field_get:carml.org.predictor.URLsRequest.predictor)
  return p != NULL ? *p : *reinterpret_cast<const ::carml::org::predictor::Predictor*>(
      &::carml::org::predictor::_Predictor_default_instance_);
}
inline ::carml::org::predictor::Predictor* URLsRequest::mutable_predictor() {
  
  if (predictor_ == NULL) {
    _slow_mutable_predictor();
  }
  // @@protoc_insertion_point(field_mutable:carml.org.predictor.URLsRequest.predictor)
  return predictor_;
}
inline ::carml::org::predictor::Predictor* URLsRequest::release_predictor() {
  // @@protoc_insertion_point(field_release:carml.org.predictor.URLsRequest.predictor)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_predictor();
  } else {
    ::carml::org::predictor::Predictor* temp = predictor_;
    predictor_ = NULL;
    return temp;
  }
}
inline  void URLsRequest::set_allocated_predictor(::carml::org::predictor::Predictor* predictor) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete predictor_;
  }
  if (predictor != NULL) {
    _slow_set_allocated_predictor(message_arena, &predictor);
  }
  predictor_ = predictor;
  if (predictor) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:carml.org.predictor.URLsRequest.predictor)
}

// repeated .carml.org.predictor.URLsRequest.URL urls = 2 [(.gogoproto.moretags) = "yaml:\"urls,omitempty\""];
inline int URLsRequest::urls_size() const {
  return urls_.size();
}
inline void URLsRequest::clear_urls() {
  urls_.Clear();
}
inline const ::carml::org::predictor::URLsRequest_URL& URLsRequest::urls(int index) const {
  // @@protoc_insertion_point(field_get:carml.org.predictor.URLsRequest.urls)
  return urls_.Get(index);
}
inline ::carml::org::predictor::URLsRequest_URL* URLsRequest::mutable_urls(int index) {
  // @@protoc_insertion_point(field_mutable:carml.org.predictor.URLsRequest.urls)
  return urls_.Mutable(index);
}
inline ::carml::org::predictor::URLsRequest_URL* URLsRequest::add_urls() {
  // @@protoc_insertion_point(field_add:carml.org.predictor.URLsRequest.urls)
  return urls_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::carml::org::predictor::URLsRequest_URL >*
URLsRequest::mutable_urls() {
  // @@protoc_insertion_point(field_mutable_list:carml.org.predictor.URLsRequest.urls)
  return &urls_;
}
inline const ::google::protobuf::RepeatedPtrField< ::carml::org::predictor::URLsRequest_URL >&
URLsRequest::urls() const {
  // @@protoc_insertion_point(field_list:carml.org.predictor.URLsRequest.urls)
  return urls_;
}

// .carml.org.predictor.PredictionOptions options = 3 [(.gogoproto.moretags) = "yaml:\"options,omitempty\""];
inline bool URLsRequest::has_options() const {
  return this != internal_default_instance() && options_ != NULL;
}
inline void URLsRequest::clear_options() {
  if (GetArenaNoVirtual() == NULL && options_ != NULL) delete options_;
  options_ = NULL;
}
inline const ::carml::org::predictor::PredictionOptions& URLsRequest::options() const {
  const ::carml::org::predictor::PredictionOptions* p = options_;
  // @@protoc_insertion_point(field_get:carml.org.predictor.URLsRequest.options)
  return p != NULL ? *p : *reinterpret_cast<const ::carml::org::predictor::PredictionOptions*>(
      &::carml::org::predictor::_PredictionOptions_default_instance_);
}
inline ::carml::org::predictor::PredictionOptions* URLsRequest::mutable_options() {
  
  if (options_ == NULL) {
    _slow_mutable_options();
  }
  // @@protoc_insertion_point(field_mutable:carml.org.predictor.URLsRequest.options)
  return options_;
}
inline ::carml::org::predictor::PredictionOptions* URLsRequest::release_options() {
  // @@protoc_insertion_point(field_release:carml.org.predictor.URLsRequest.options)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_options();
  } else {
    ::carml::org::predictor::PredictionOptions* temp = options_;
    options_ = NULL;
    return temp;
  }
}
inline  void URLsRequest::set_allocated_options(::carml::org::predictor::PredictionOptions* options) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete options_;
  }
  if (options != NULL) {
    _slow_set_allocated_options(message_arena, &options);
  }
  options_ = options;
  if (options) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:carml.org.predictor.URLsRequest.options)
}

// -------------------------------------------------------------------

// ImagesRequest_Image

// string id = 1 [(.gogoproto.customname) = "ID", (.gogoproto.jsontag) = "id,omitempty", (.gogoproto.moretags) = "yaml:\"id,omitempty\""];
inline void ImagesRequest_Image::clear_id() {
  id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& ImagesRequest_Image::id() const {
  // @@protoc_insertion_point(field_get:carml.org.predictor.ImagesRequest.Image.id)
  return id_.Get();
}
inline void ImagesRequest_Image::set_id(const ::std::string& value) {
  
  id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:carml.org.predictor.ImagesRequest.Image.id)
}
#if LANG_CXX11
inline void ImagesRequest_Image::set_id(::std::string&& value) {
  
  id_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:carml.org.predictor.ImagesRequest.Image.id)
}
#endif
inline void ImagesRequest_Image::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:carml.org.predictor.ImagesRequest.Image.id)
}
inline void ImagesRequest_Image::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:carml.org.predictor.ImagesRequest.Image.id)
}
inline ::std::string* ImagesRequest_Image::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:carml.org.predictor.ImagesRequest.Image.id)
  return id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ImagesRequest_Image::release_id() {
  // @@protoc_insertion_point(field_release:carml.org.predictor.ImagesRequest.Image.id)
  
  return id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ImagesRequest_Image::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:carml.org.predictor.ImagesRequest.Image.id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ImagesRequest_Image::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:carml.org.predictor.ImagesRequest.Image.id)
}
inline void ImagesRequest_Image::unsafe_arena_set_allocated_id(
    ::std::string* id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (id != NULL) {
    
  } else {
    
  }
  id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:carml.org.predictor.ImagesRequest.Image.id)
}

// bytes data = 2 [(.gogoproto.moretags) = "yaml:\"data,omitempty\""];
inline void ImagesRequest_Image::clear_data() {
  data_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& ImagesRequest_Image::data() const {
  // @@protoc_insertion_point(field_get:carml.org.predictor.ImagesRequest.Image.data)
  return data_.Get();
}
inline void ImagesRequest_Image::set_data(const ::std::string& value) {
  
  data_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:carml.org.predictor.ImagesRequest.Image.data)
}
#if LANG_CXX11
inline void ImagesRequest_Image::set_data(::std::string&& value) {
  
  data_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:carml.org.predictor.ImagesRequest.Image.data)
}
#endif
inline void ImagesRequest_Image::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  data_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:carml.org.predictor.ImagesRequest.Image.data)
}
inline void ImagesRequest_Image::set_data(const void* value,
    size_t size) {
  
  data_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:carml.org.predictor.ImagesRequest.Image.data)
}
inline ::std::string* ImagesRequest_Image::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:carml.org.predictor.ImagesRequest.Image.data)
  return data_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ImagesRequest_Image::release_data() {
  // @@protoc_insertion_point(field_release:carml.org.predictor.ImagesRequest.Image.data)
  
  return data_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ImagesRequest_Image::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:carml.org.predictor.ImagesRequest.Image.data)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return data_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ImagesRequest_Image::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:carml.org.predictor.ImagesRequest.Image.data)
}
inline void ImagesRequest_Image::unsafe_arena_set_allocated_data(
    ::std::string* data) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (data != NULL) {
    
  } else {
    
  }
  data_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      data, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:carml.org.predictor.ImagesRequest.Image.data)
}

// bool preprocessed = 3 [(.gogoproto.moretags) = "yaml:\"preprocessed,omitempty\""];
inline void ImagesRequest_Image::clear_preprocessed() {
  preprocessed_ = false;
}
inline bool ImagesRequest_Image::preprocessed() const {
  // @@protoc_insertion_point(field_get:carml.org.predictor.ImagesRequest.Image.preprocessed)
  return preprocessed_;
}
inline void ImagesRequest_Image::set_preprocessed(bool value) {
  
  preprocessed_ = value;
  // @@protoc_insertion_point(field_set:carml.org.predictor.ImagesRequest.Image.preprocessed)
}

// -------------------------------------------------------------------

// ImagesRequest

// .carml.org.predictor.Predictor predictor = 1 [(.gogoproto.moretags) = "yaml:\"predictor,omitempty\""];
inline bool ImagesRequest::has_predictor() const {
  return this != internal_default_instance() && predictor_ != NULL;
}
inline void ImagesRequest::clear_predictor() {
  if (GetArenaNoVirtual() == NULL && predictor_ != NULL) delete predictor_;
  predictor_ = NULL;
}
inline const ::carml::org::predictor::Predictor& ImagesRequest::predictor() const {
  const ::carml::org::predictor::Predictor* p = predictor_;
  // @@protoc_insertion_point(field_get:carml.org.predictor.ImagesRequest.predictor)
  return p != NULL ? *p : *reinterpret_cast<const ::carml::org::predictor::Predictor*>(
      &::carml::org::predictor::_Predictor_default_instance_);
}
inline ::carml::org::predictor::Predictor* ImagesRequest::mutable_predictor() {
  
  if (predictor_ == NULL) {
    _slow_mutable_predictor();
  }
  // @@protoc_insertion_point(field_mutable:carml.org.predictor.ImagesRequest.predictor)
  return predictor_;
}
inline ::carml::org::predictor::Predictor* ImagesRequest::release_predictor() {
  // @@protoc_insertion_point(field_release:carml.org.predictor.ImagesRequest.predictor)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_predictor();
  } else {
    ::carml::org::predictor::Predictor* temp = predictor_;
    predictor_ = NULL;
    return temp;
  }
}
inline  void ImagesRequest::set_allocated_predictor(::carml::org::predictor::Predictor* predictor) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete predictor_;
  }
  if (predictor != NULL) {
    _slow_set_allocated_predictor(message_arena, &predictor);
  }
  predictor_ = predictor;
  if (predictor) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:carml.org.predictor.ImagesRequest.predictor)
}

// repeated .carml.org.predictor.ImagesRequest.Image images = 2 [(.gogoproto.moretags) = "yaml:\"images,omitempty\""];
inline int ImagesRequest::images_size() const {
  return images_.size();
}
inline void ImagesRequest::clear_images() {
  images_.Clear();
}
inline const ::carml::org::predictor::ImagesRequest_Image& ImagesRequest::images(int index) const {
  // @@protoc_insertion_point(field_get:carml.org.predictor.ImagesRequest.images)
  return images_.Get(index);
}
inline ::carml::org::predictor::ImagesRequest_Image* ImagesRequest::mutable_images(int index) {
  // @@protoc_insertion_point(field_mutable:carml.org.predictor.ImagesRequest.images)
  return images_.Mutable(index);
}
inline ::carml::org::predictor::ImagesRequest_Image* ImagesRequest::add_images() {
  // @@protoc_insertion_point(field_add:carml.org.predictor.ImagesRequest.images)
  return images_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::carml::org::predictor::ImagesRequest_Image >*
ImagesRequest::mutable_images() {
  // @@protoc_insertion_point(field_mutable_list:carml.org.predictor.ImagesRequest.images)
  return &images_;
}
inline const ::google::protobuf::RepeatedPtrField< ::carml::org::predictor::ImagesRequest_Image >&
ImagesRequest::images() const {
  // @@protoc_insertion_point(field_list:carml.org.predictor.ImagesRequest.images)
  return images_;
}

// .carml.org.predictor.PredictionOptions options = 3 [(.gogoproto.moretags) = "yaml:\"options,omitempty\""];
inline bool ImagesRequest::has_options() const {
  return this != internal_default_instance() && options_ != NULL;
}
inline void ImagesRequest::clear_options() {
  if (GetArenaNoVirtual() == NULL && options_ != NULL) delete options_;
  options_ = NULL;
}
inline const ::carml::org::predictor::PredictionOptions& ImagesRequest::options() const {
  const ::carml::org::predictor::PredictionOptions* p = options_;
  // @@protoc_insertion_point(field_get:carml.org.predictor.ImagesRequest.options)
  return p != NULL ? *p : *reinterpret_cast<const ::carml::org::predictor::PredictionOptions*>(
      &::carml::org::predictor::_PredictionOptions_default_instance_);
}
inline ::carml::org::predictor::PredictionOptions* ImagesRequest::mutable_options() {
  
  if (options_ == NULL) {
    _slow_mutable_options();
  }
  // @@protoc_insertion_point(field_mutable:carml.org.predictor.ImagesRequest.options)
  return options_;
}
inline ::carml::org::predictor::PredictionOptions* ImagesRequest::release_options() {
  // @@protoc_insertion_point(field_release:carml.org.predictor.ImagesRequest.options)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_options();
  } else {
    ::carml::org::predictor::PredictionOptions* temp = options_;
    options_ = NULL;
    return temp;
  }
}
inline  void ImagesRequest::set_allocated_options(::carml::org::predictor::PredictionOptions* options) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete options_;
  }
  if (options != NULL) {
    _slow_set_allocated_options(message_arena, &options);
  }
  options_ = options;
  if (options) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:carml.org.predictor.ImagesRequest.options)
}

// -------------------------------------------------------------------

// DatasetRequest_Dataset

// string category = 1 [(.gogoproto.moretags) = "yaml:\"category,omitempty\""];
inline void DatasetRequest_Dataset::clear_category() {
  category_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& DatasetRequest_Dataset::category() const {
  // @@protoc_insertion_point(field_get:carml.org.predictor.DatasetRequest.Dataset.category)
  return category_.Get();
}
inline void DatasetRequest_Dataset::set_category(const ::std::string& value) {
  
  category_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:carml.org.predictor.DatasetRequest.Dataset.category)
}
#if LANG_CXX11
inline void DatasetRequest_Dataset::set_category(::std::string&& value) {
  
  category_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:carml.org.predictor.DatasetRequest.Dataset.category)
}
#endif
inline void DatasetRequest_Dataset::set_category(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  category_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:carml.org.predictor.DatasetRequest.Dataset.category)
}
inline void DatasetRequest_Dataset::set_category(const char* value,
    size_t size) {
  
  category_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:carml.org.predictor.DatasetRequest.Dataset.category)
}
inline ::std::string* DatasetRequest_Dataset::mutable_category() {
  
  // @@protoc_insertion_point(field_mutable:carml.org.predictor.DatasetRequest.Dataset.category)
  return category_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* DatasetRequest_Dataset::release_category() {
  // @@protoc_insertion_point(field_release:carml.org.predictor.DatasetRequest.Dataset.category)
  
  return category_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* DatasetRequest_Dataset::unsafe_arena_release_category() {
  // @@protoc_insertion_point(field_unsafe_arena_release:carml.org.predictor.DatasetRequest.Dataset.category)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return category_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void DatasetRequest_Dataset::set_allocated_category(::std::string* category) {
  if (category != NULL) {
    
  } else {
    
  }
  category_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), category,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:carml.org.predictor.DatasetRequest.Dataset.category)
}
inline void DatasetRequest_Dataset::unsafe_arena_set_allocated_category(
    ::std::string* category) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (category != NULL) {
    
  } else {
    
  }
  category_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      category, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:carml.org.predictor.DatasetRequest.Dataset.category)
}

// string name = 2 [(.gogoproto.moretags) = "yaml:\"name,omitempty\""];
inline void DatasetRequest_Dataset::clear_name() {
  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& DatasetRequest_Dataset::name() const {
  // @@protoc_insertion_point(field_get:carml.org.predictor.DatasetRequest.Dataset.name)
  return name_.Get();
}
inline void DatasetRequest_Dataset::set_name(const ::std::string& value) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:carml.org.predictor.DatasetRequest.Dataset.name)
}
#if LANG_CXX11
inline void DatasetRequest_Dataset::set_name(::std::string&& value) {
  
  name_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:carml.org.predictor.DatasetRequest.Dataset.name)
}
#endif
inline void DatasetRequest_Dataset::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:carml.org.predictor.DatasetRequest.Dataset.name)
}
inline void DatasetRequest_Dataset::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:carml.org.predictor.DatasetRequest.Dataset.name)
}
inline ::std::string* DatasetRequest_Dataset::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:carml.org.predictor.DatasetRequest.Dataset.name)
  return name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* DatasetRequest_Dataset::release_name() {
  // @@protoc_insertion_point(field_release:carml.org.predictor.DatasetRequest.Dataset.name)
  
  return name_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* DatasetRequest_Dataset::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:carml.org.predictor.DatasetRequest.Dataset.name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void DatasetRequest_Dataset::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:carml.org.predictor.DatasetRequest.Dataset.name)
}
inline void DatasetRequest_Dataset::unsafe_arena_set_allocated_name(
    ::std::string* name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (name != NULL) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:carml.org.predictor.DatasetRequest.Dataset.name)
}

// -------------------------------------------------------------------

// DatasetRequest

// .carml.org.predictor.Predictor predictor = 1 [(.gogoproto.moretags) = "yaml:\"predictor,omitempty\""];
inline bool DatasetRequest::has_predictor() const {
  return this != internal_default_instance() && predictor_ != NULL;
}
inline void DatasetRequest::clear_predictor() {
  if (GetArenaNoVirtual() == NULL && predictor_ != NULL) delete predictor_;
  predictor_ = NULL;
}
inline const ::carml::org::predictor::Predictor& DatasetRequest::predictor() const {
  const ::carml::org::predictor::Predictor* p = predictor_;
  // @@protoc_insertion_point(field_get:carml.org.predictor.DatasetRequest.predictor)
  return p != NULL ? *p : *reinterpret_cast<const ::carml::org::predictor::Predictor*>(
      &::carml::org::predictor::_Predictor_default_instance_);
}
inline ::carml::org::predictor::Predictor* DatasetRequest::mutable_predictor() {
  
  if (predictor_ == NULL) {
    _slow_mutable_predictor();
  }
  // @@protoc_insertion_point(field_mutable:carml.org.predictor.DatasetRequest.predictor)
  return predictor_;
}
inline ::carml::org::predictor::Predictor* DatasetRequest::release_predictor() {
  // @@protoc_insertion_point(field_release:carml.org.predictor.DatasetRequest.predictor)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_predictor();
  } else {
    ::carml::org::predictor::Predictor* temp = predictor_;
    predictor_ = NULL;
    return temp;
  }
}
inline  void DatasetRequest::set_allocated_predictor(::carml::org::predictor::Predictor* predictor) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete predictor_;
  }
  if (predictor != NULL) {
    _slow_set_allocated_predictor(message_arena, &predictor);
  }
  predictor_ = predictor;
  if (predictor) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:carml.org.predictor.DatasetRequest.predictor)
}

// .carml.org.predictor.DatasetRequest.Dataset dataset = 2 [(.gogoproto.moretags) = "yaml:\"dataset,omitempty\""];
inline bool DatasetRequest::has_dataset() const {
  return this != internal_default_instance() && dataset_ != NULL;
}
inline void DatasetRequest::clear_dataset() {
  if (GetArenaNoVirtual() == NULL && dataset_ != NULL) delete dataset_;
  dataset_ = NULL;
}
inline const ::carml::org::predictor::DatasetRequest_Dataset& DatasetRequest::dataset() const {
  const ::carml::org::predictor::DatasetRequest_Dataset* p = dataset_;
  // @@protoc_insertion_point(field_get:carml.org.predictor.DatasetRequest.dataset)
  return p != NULL ? *p : *reinterpret_cast<const ::carml::org::predictor::DatasetRequest_Dataset*>(
      &::carml::org::predictor::_DatasetRequest_Dataset_default_instance_);
}
inline ::carml::org::predictor::DatasetRequest_Dataset* DatasetRequest::mutable_dataset() {
  
  if (dataset_ == NULL) {
    _slow_mutable_dataset();
  }
  // @@protoc_insertion_point(field_mutable:carml.org.predictor.DatasetRequest.dataset)
  return dataset_;
}
inline ::carml::org::predictor::DatasetRequest_Dataset* DatasetRequest::release_dataset() {
  // @@protoc_insertion_point(field_release:carml.org.predictor.DatasetRequest.dataset)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_dataset();
  } else {
    ::carml::org::predictor::DatasetRequest_Dataset* temp = dataset_;
    dataset_ = NULL;
    return temp;
  }
}
inline  void DatasetRequest::set_allocated_dataset(::carml::org::predictor::DatasetRequest_Dataset* dataset) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete dataset_;
  }
  if (dataset != NULL) {
    _slow_set_allocated_dataset(message_arena, &dataset);
  }
  dataset_ = dataset;
  if (dataset) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:carml.org.predictor.DatasetRequest.dataset)
}

// .carml.org.predictor.PredictionOptions options = 3 [(.gogoproto.moretags) = "yaml:\"options,omitempty\""];
inline bool DatasetRequest::has_options() const {
  return this != internal_default_instance() && options_ != NULL;
}
inline void DatasetRequest::clear_options() {
  if (GetArenaNoVirtual() == NULL && options_ != NULL) delete options_;
  options_ = NULL;
}
inline const ::carml::org::predictor::PredictionOptions& DatasetRequest::options() const {
  const ::carml::org::predictor::PredictionOptions* p = options_;
  // @@protoc_insertion_point(field_get:carml.org.predictor.DatasetRequest.options)
  return p != NULL ? *p : *reinterpret_cast<const ::carml::org::predictor::PredictionOptions*>(
      &::carml::org::predictor::_PredictionOptions_default_instance_);
}
inline ::carml::org::predictor::PredictionOptions* DatasetRequest::mutable_options() {
  
  if (options_ == NULL) {
    _slow_mutable_options();
  }
  // @@protoc_insertion_point(field_mutable:carml.org.predictor.DatasetRequest.options)
  return options_;
}
inline ::carml::org::predictor::PredictionOptions* DatasetRequest::release_options() {
  // @@protoc_insertion_point(field_release:carml.org.predictor.DatasetRequest.options)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_options();
  } else {
    ::carml::org::predictor::PredictionOptions* temp = options_;
    options_ = NULL;
    return temp;
  }
}
inline  void DatasetRequest::set_allocated_options(::carml::org::predictor::PredictionOptions* options) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete options_;
  }
  if (options != NULL) {
    _slow_set_allocated_options(message_arena, &options);
  }
  options_ = options;
  if (options) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:carml.org.predictor.DatasetRequest.options)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// Feature

// int64 index = 1 [(.gogoproto.moretags) = "yaml:\"index,omitempty\""];
inline void Feature::clear_index() {
  index_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Feature::index() const {
  // @@protoc_insertion_point(field_get:carml.org.predictor.Feature.index)
  return index_;
}
inline void Feature::set_index(::google::protobuf::int64 value) {
  
  index_ = value;
  // @@protoc_insertion_point(field_set:carml.org.predictor.Feature.index)
}

// string name = 2 [(.gogoproto.moretags) = "yaml:\"name,omitempty\""];
inline void Feature::clear_name() {
  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& Feature::name() const {
  // @@protoc_insertion_point(field_get:carml.org.predictor.Feature.name)
  return name_.Get();
}
inline void Feature::set_name(const ::std::string& value) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:carml.org.predictor.Feature.name)
}
#if LANG_CXX11
inline void Feature::set_name(::std::string&& value) {
  
  name_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:carml.org.predictor.Feature.name)
}
#endif
inline void Feature::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:carml.org.predictor.Feature.name)
}
inline void Feature::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:carml.org.predictor.Feature.name)
}
inline ::std::string* Feature::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:carml.org.predictor.Feature.name)
  return name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* Feature::release_name() {
  // @@protoc_insertion_point(field_release:carml.org.predictor.Feature.name)
  
  return name_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* Feature::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:carml.org.predictor.Feature.name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void Feature::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:carml.org.predictor.Feature.name)
}
inline void Feature::unsafe_arena_set_allocated_name(
    ::std::string* name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (name != NULL) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:carml.org.predictor.Feature.name)
}

// float probability = 3 [(.gogoproto.moretags) = "yaml:\"probability,omitempty\""];
inline void Feature::clear_probability() {
  probability_ = 0;
}
inline float Feature::probability() const {
  // @@protoc_insertion_point(field_get:carml.org.predictor.Feature.probability)
  return probability_;
}
inline void Feature::set_probability(float value) {
  
  probability_ = value;
  // @@protoc_insertion_point(field_set:carml.org.predictor.Feature.probability)
}

// map<string, string> metadata = 4 [(.gogoproto.moretags) = "yaml:\"metadata,omitempty\""];
inline int Feature::metadata_size() const {
  return metadata_.size();
}
inline void Feature::clear_metadata() {
  metadata_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
Feature::metadata() const {
  // @@protoc_insertion_point(field_map:carml.org.predictor.Feature.metadata)
  return metadata_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
Feature::mutable_metadata() {
  // @@protoc_insertion_point(field_mutable_map:carml.org.predictor.Feature.metadata)
  return metadata_.MutableMap();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// FeatureResponse

// string id = 1 [(.gogoproto.customname) = "ID", (.gogoproto.jsontag) = "id,omitempty", (.gogoproto.moretags) = "yaml:\"id,omitempty\""];
inline void FeatureResponse::clear_id() {
  id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& FeatureResponse::id() const {
  // @@protoc_insertion_point(field_get:carml.org.predictor.FeatureResponse.id)
  return id_.Get();
}
inline void FeatureResponse::set_id(const ::std::string& value) {
  
  id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:carml.org.predictor.FeatureResponse.id)
}
#if LANG_CXX11
inline void FeatureResponse::set_id(::std::string&& value) {
  
  id_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:carml.org.predictor.FeatureResponse.id)
}
#endif
inline void FeatureResponse::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:carml.org.predictor.FeatureResponse.id)
}
inline void FeatureResponse::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:carml.org.predictor.FeatureResponse.id)
}
inline ::std::string* FeatureResponse::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:carml.org.predictor.FeatureResponse.id)
  return id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* FeatureResponse::release_id() {
  // @@protoc_insertion_point(field_release:carml.org.predictor.FeatureResponse.id)
  
  return id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* FeatureResponse::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:carml.org.predictor.FeatureResponse.id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void FeatureResponse::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:carml.org.predictor.FeatureResponse.id)
}
inline void FeatureResponse::unsafe_arena_set_allocated_id(
    ::std::string* id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (id != NULL) {
    
  } else {
    
  }
  id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:carml.org.predictor.FeatureResponse.id)
}

// string request_id = 2 [(.gogoproto.customname) = "RequestID", (.gogoproto.jsontag) = "request_id,omitempty", (.gogoproto.moretags) = "yaml:\"request_id,omitempty\""];
inline void FeatureResponse::clear_request_id() {
  request_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& FeatureResponse::request_id() const {
  // @@protoc_insertion_point(field_get:carml.org.predictor.FeatureResponse.request_id)
  return request_id_.Get();
}
inline void FeatureResponse::set_request_id(const ::std::string& value) {
  
  request_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:carml.org.predictor.FeatureResponse.request_id)
}
#if LANG_CXX11
inline void FeatureResponse::set_request_id(::std::string&& value) {
  
  request_id_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:carml.org.predictor.FeatureResponse.request_id)
}
#endif
inline void FeatureResponse::set_request_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  request_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:carml.org.predictor.FeatureResponse.request_id)
}
inline void FeatureResponse::set_request_id(const char* value,
    size_t size) {
  
  request_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:carml.org.predictor.FeatureResponse.request_id)
}
inline ::std::string* FeatureResponse::mutable_request_id() {
  
  // @@protoc_insertion_point(field_mutable:carml.org.predictor.FeatureResponse.request_id)
  return request_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* FeatureResponse::release_request_id() {
  // @@protoc_insertion_point(field_release:carml.org.predictor.FeatureResponse.request_id)
  
  return request_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* FeatureResponse::unsafe_arena_release_request_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:carml.org.predictor.FeatureResponse.request_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return request_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void FeatureResponse::set_allocated_request_id(::std::string* request_id) {
  if (request_id != NULL) {
    
  } else {
    
  }
  request_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), request_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:carml.org.predictor.FeatureResponse.request_id)
}
inline void FeatureResponse::unsafe_arena_set_allocated_request_id(
    ::std::string* request_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (request_id != NULL) {
    
  } else {
    
  }
  request_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      request_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:carml.org.predictor.FeatureResponse.request_id)
}

// string input_id = 3 [(.gogoproto.customname) = "InputID", (.gogoproto.jsontag) = "input_id,omitempty", (.gogoproto.moretags) = "yaml:\"input_id,omitempty\""];
inline void FeatureResponse::clear_input_id() {
  input_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& FeatureResponse::input_id() const {
  // @@protoc_insertion_point(field_get:carml.org.predictor.FeatureResponse.input_id)
  return input_id_.Get();
}
inline void FeatureResponse::set_input_id(const ::std::string& value) {
  
  input_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:carml.org.predictor.FeatureResponse.input_id)
}
#if LANG_CXX11
inline void FeatureResponse::set_input_id(::std::string&& value) {
  
  input_id_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:carml.org.predictor.FeatureResponse.input_id)
}
#endif
inline void FeatureResponse::set_input_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  input_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:carml.org.predictor.FeatureResponse.input_id)
}
inline void FeatureResponse::set_input_id(const char* value,
    size_t size) {
  
  input_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:carml.org.predictor.FeatureResponse.input_id)
}
inline ::std::string* FeatureResponse::mutable_input_id() {
  
  // @@protoc_insertion_point(field_mutable:carml.org.predictor.FeatureResponse.input_id)
  return input_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* FeatureResponse::release_input_id() {
  // @@protoc_insertion_point(field_release:carml.org.predictor.FeatureResponse.input_id)
  
  return input_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* FeatureResponse::unsafe_arena_release_input_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:carml.org.predictor.FeatureResponse.input_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return input_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void FeatureResponse::set_allocated_input_id(::std::string* input_id) {
  if (input_id != NULL) {
    
  } else {
    
  }
  input_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), input_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:carml.org.predictor.FeatureResponse.input_id)
}
inline void FeatureResponse::unsafe_arena_set_allocated_input_id(
    ::std::string* input_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (input_id != NULL) {
    
  } else {
    
  }
  input_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      input_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:carml.org.predictor.FeatureResponse.input_id)
}

// repeated .carml.org.predictor.Feature features = 4 [(.gogoproto.moretags) = "yaml:\"features,omitempty\""];
inline int FeatureResponse::features_size() const {
  return features_.size();
}
inline void FeatureResponse::clear_features() {
  features_.Clear();
}
inline const ::carml::org::predictor::Feature& FeatureResponse::features(int index) const {
  // @@protoc_insertion_point(field_get:carml.org.predictor.FeatureResponse.features)
  return features_.Get(index);
}
inline ::carml::org::predictor::Feature* FeatureResponse::mutable_features(int index) {
  // @@protoc_insertion_point(field_mutable:carml.org.predictor.FeatureResponse.features)
  return features_.Mutable(index);
}
inline ::carml::org::predictor::Feature* FeatureResponse::add_features() {
  // @@protoc_insertion_point(field_add:carml.org.predictor.FeatureResponse.features)
  return features_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::carml::org::predictor::Feature >*
FeatureResponse::mutable_features() {
  // @@protoc_insertion_point(field_mutable_list:carml.org.predictor.FeatureResponse.features)
  return &features_;
}
inline const ::google::protobuf::RepeatedPtrField< ::carml::org::predictor::Feature >&
FeatureResponse::features() const {
  // @@protoc_insertion_point(field_list:carml.org.predictor.FeatureResponse.features)
  return features_;
}

// map<string, string> metadata = 5 [(.gogoproto.moretags) = "yaml:\"metadata,omitempty\""];
inline int FeatureResponse::metadata_size() const {
  return metadata_.size();
}
inline void FeatureResponse::clear_metadata() {
  metadata_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
FeatureResponse::metadata() const {
  // @@protoc_insertion_point(field_map:carml.org.predictor.FeatureResponse.metadata)
  return metadata_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
FeatureResponse::mutable_metadata() {
  // @@protoc_insertion_point(field_mutable_map:carml.org.predictor.FeatureResponse.metadata)
  return metadata_.MutableMap();
}

// -------------------------------------------------------------------

// FeaturesResponse

// string id = 1 [(.gogoproto.customname) = "ID", (.gogoproto.jsontag) = "id,omitempty", (.gogoproto.moretags) = "yaml:\"id,omitempty\""];
inline void FeaturesResponse::clear_id() {
  id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& FeaturesResponse::id() const {
  // @@protoc_insertion_point(field_get:carml.org.predictor.FeaturesResponse.id)
  return id_.Get();
}
inline void FeaturesResponse::set_id(const ::std::string& value) {
  
  id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:carml.org.predictor.FeaturesResponse.id)
}
#if LANG_CXX11
inline void FeaturesResponse::set_id(::std::string&& value) {
  
  id_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:carml.org.predictor.FeaturesResponse.id)
}
#endif
inline void FeaturesResponse::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:carml.org.predictor.FeaturesResponse.id)
}
inline void FeaturesResponse::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:carml.org.predictor.FeaturesResponse.id)
}
inline ::std::string* FeaturesResponse::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:carml.org.predictor.FeaturesResponse.id)
  return id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* FeaturesResponse::release_id() {
  // @@protoc_insertion_point(field_release:carml.org.predictor.FeaturesResponse.id)
  
  return id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* FeaturesResponse::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:carml.org.predictor.FeaturesResponse.id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void FeaturesResponse::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:carml.org.predictor.FeaturesResponse.id)
}
inline void FeaturesResponse::unsafe_arena_set_allocated_id(
    ::std::string* id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (id != NULL) {
    
  } else {
    
  }
  id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:carml.org.predictor.FeaturesResponse.id)
}

// repeated .carml.org.predictor.FeatureResponse responses = 2 [(.gogoproto.moretags) = "yaml:\"responses,omitempty\""];
inline int FeaturesResponse::responses_size() const {
  return responses_.size();
}
inline void FeaturesResponse::clear_responses() {
  responses_.Clear();
}
inline const ::carml::org::predictor::FeatureResponse& FeaturesResponse::responses(int index) const {
  // @@protoc_insertion_point(field_get:carml.org.predictor.FeaturesResponse.responses)
  return responses_.Get(index);
}
inline ::carml::org::predictor::FeatureResponse* FeaturesResponse::mutable_responses(int index) {
  // @@protoc_insertion_point(field_mutable:carml.org.predictor.FeaturesResponse.responses)
  return responses_.Mutable(index);
}
inline ::carml::org::predictor::FeatureResponse* FeaturesResponse::add_responses() {
  // @@protoc_insertion_point(field_add:carml.org.predictor.FeaturesResponse.responses)
  return responses_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::carml::org::predictor::FeatureResponse >*
FeaturesResponse::mutable_responses() {
  // @@protoc_insertion_point(field_mutable_list:carml.org.predictor.FeaturesResponse.responses)
  return &responses_;
}
inline const ::google::protobuf::RepeatedPtrField< ::carml::org::predictor::FeatureResponse >&
FeaturesResponse::responses() const {
  // @@protoc_insertion_point(field_list:carml.org.predictor.FeaturesResponse.responses)
  return responses_;
}

// -------------------------------------------------------------------

// ResetRequest

// string id = 2 [(.gogoproto.customname) = "ID", (.gogoproto.jsontag) = "id,omitempty", (.gogoproto.moretags) = "yaml:\"id,omitempty\""];
inline void ResetRequest::clear_id() {
  id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& ResetRequest::id() const {
  // @@protoc_insertion_point(field_get:carml.org.predictor.ResetRequest.id)
  return id_.Get();
}
inline void ResetRequest::set_id(const ::std::string& value) {
  
  id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:carml.org.predictor.ResetRequest.id)
}
#if LANG_CXX11
inline void ResetRequest::set_id(::std::string&& value) {
  
  id_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:carml.org.predictor.ResetRequest.id)
}
#endif
inline void ResetRequest::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:carml.org.predictor.ResetRequest.id)
}
inline void ResetRequest::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:carml.org.predictor.ResetRequest.id)
}
inline ::std::string* ResetRequest::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:carml.org.predictor.ResetRequest.id)
  return id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ResetRequest::release_id() {
  // @@protoc_insertion_point(field_release:carml.org.predictor.ResetRequest.id)
  
  return id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ResetRequest::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:carml.org.predictor.ResetRequest.id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ResetRequest::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:carml.org.predictor.ResetRequest.id)
}
inline void ResetRequest::unsafe_arena_set_allocated_id(
    ::std::string* id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (id != NULL) {
    
  } else {
    
  }
  id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:carml.org.predictor.ResetRequest.id)
}

// .carml.org.predictor.Predictor predictor = 1 [(.gogoproto.moretags) = "yaml:\"predictor,omitempty\""];
inline bool ResetRequest::has_predictor() const {
  return this != internal_default_instance() && predictor_ != NULL;
}
inline void ResetRequest::clear_predictor() {
  if (GetArenaNoVirtual() == NULL && predictor_ != NULL) delete predictor_;
  predictor_ = NULL;
}
inline const ::carml::org::predictor::Predictor& ResetRequest::predictor() const {
  const ::carml::org::predictor::Predictor* p = predictor_;
  // @@protoc_insertion_point(field_get:carml.org.predictor.ResetRequest.predictor)
  return p != NULL ? *p : *reinterpret_cast<const ::carml::org::predictor::Predictor*>(
      &::carml::org::predictor::_Predictor_default_instance_);
}
inline ::carml::org::predictor::Predictor* ResetRequest::mutable_predictor() {
  
  if (predictor_ == NULL) {
    _slow_mutable_predictor();
  }
  // @@protoc_insertion_point(field_mutable:carml.org.predictor.ResetRequest.predictor)
  return predictor_;
}
inline ::carml::org::predictor::Predictor* ResetRequest::release_predictor() {
  // @@protoc_insertion_point(field_release:carml.org.predictor.ResetRequest.predictor)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_predictor();
  } else {
    ::carml::org::predictor::Predictor* temp = predictor_;
    predictor_ = NULL;
    return temp;
  }
}
inline  void ResetRequest::set_allocated_predictor(::carml::org::predictor::Predictor* predictor) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete predictor_;
  }
  if (predictor != NULL) {
    _slow_set_allocated_predictor(message_arena, &predictor);
  }
  predictor_ = predictor;
  if (predictor) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:carml.org.predictor.ResetRequest.predictor)
}

// -------------------------------------------------------------------

// ResetResponse

// .carml.org.predictor.Predictor predictor = 1 [(.gogoproto.embed) = true, (.gogoproto.moretags) = "yaml:\"predictor,omitempty\""];
inline bool ResetResponse::has_predictor() const {
  return this != internal_default_instance() && predictor_ != NULL;
}
inline void ResetResponse::clear_predictor() {
  if (GetArenaNoVirtual() == NULL && predictor_ != NULL) delete predictor_;
  predictor_ = NULL;
}
inline const ::carml::org::predictor::Predictor& ResetResponse::predictor() const {
  const ::carml::org::predictor::Predictor* p = predictor_;
  // @@protoc_insertion_point(field_get:carml.org.predictor.ResetResponse.predictor)
  return p != NULL ? *p : *reinterpret_cast<const ::carml::org::predictor::Predictor*>(
      &::carml::org::predictor::_Predictor_default_instance_);
}
inline ::carml::org::predictor::Predictor* ResetResponse::mutable_predictor() {
  
  if (predictor_ == NULL) {
    _slow_mutable_predictor();
  }
  // @@protoc_insertion_point(field_mutable:carml.org.predictor.ResetResponse.predictor)
  return predictor_;
}
inline ::carml::org::predictor::Predictor* ResetResponse::release_predictor() {
  // @@protoc_insertion_point(field_release:carml.org.predictor.ResetResponse.predictor)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_predictor();
  } else {
    ::carml::org::predictor::Predictor* temp = predictor_;
    predictor_ = NULL;
    return temp;
  }
}
inline  void ResetResponse::set_allocated_predictor(::carml::org::predictor::Predictor* predictor) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete predictor_;
  }
  if (predictor != NULL) {
    _slow_set_allocated_predictor(message_arena, &predictor);
  }
  predictor_ = predictor;
  if (predictor) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:carml.org.predictor.ResetResponse.predictor)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace predictor
}  // namespace org
}  // namespace carml

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_predictor_2eproto__INCLUDED
