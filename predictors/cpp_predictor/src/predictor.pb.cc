// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: predictor.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "predictor.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace carml {
namespace org {
namespace predictor {
class ErrorStatusDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ErrorStatus>
     _instance;
} _ErrorStatus_default_instance_;
class PredictorOpenRequestDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<PredictorOpenRequest>
     _instance;
} _PredictorOpenRequest_default_instance_;
class PredictorCloseResponseDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<PredictorCloseResponse>
     _instance;
} _PredictorCloseResponse_default_instance_;
class PredictionOptionsDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<PredictionOptions>
     _instance;
} _PredictionOptions_default_instance_;
class PredictorDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Predictor>
     _instance;
} _Predictor_default_instance_;
class URLsRequest_URLDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<URLsRequest_URL>
     _instance;
} _URLsRequest_URL_default_instance_;
class URLsRequestDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<URLsRequest>
     _instance;
} _URLsRequest_default_instance_;
class ImagesRequest_ImageDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ImagesRequest_Image>
     _instance;
} _ImagesRequest_Image_default_instance_;
class ImagesRequestDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ImagesRequest>
     _instance;
} _ImagesRequest_default_instance_;
class DatasetRequest_DatasetDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DatasetRequest_Dataset>
     _instance;
} _DatasetRequest_Dataset_default_instance_;
class DatasetRequestDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DatasetRequest>
     _instance;
} _DatasetRequest_default_instance_;
class Feature_MetadataEntryDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Feature::Feature_MetadataEntry>
     _instance;
} _Feature_MetadataEntry_default_instance_;
class FeatureDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Feature>
     _instance;
} _Feature_default_instance_;
class FeatureResponse_MetadataEntryDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<FeatureResponse::FeatureResponse_MetadataEntry>
     _instance;
} _FeatureResponse_MetadataEntry_default_instance_;
class FeatureResponseDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<FeatureResponse>
     _instance;
} _FeatureResponse_default_instance_;
class FeaturesResponseDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<FeaturesResponse>
     _instance;
} _FeaturesResponse_default_instance_;
class ResetRequestDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ResetRequest>
     _instance;
} _ResetRequest_default_instance_;
class ResetResponseDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ResetResponse>
     _instance;
} _ResetResponse_default_instance_;

namespace protobuf_predictor_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[18];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ErrorStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ErrorStatus, ok_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ErrorStatus, message_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PredictorOpenRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PredictorOpenRequest, model_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PredictorOpenRequest, model_version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PredictorOpenRequest, framework_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PredictorOpenRequest, framework_version_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PredictorCloseResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PredictionOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PredictionOptions, request_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PredictionOptions, feature_limit_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Predictor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Predictor, id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(URLsRequest_URL, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(URLsRequest_URL, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(URLsRequest_URL, data_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(URLsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(URLsRequest, predictor_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(URLsRequest, urls_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(URLsRequest, options_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImagesRequest_Image, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImagesRequest_Image, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImagesRequest_Image, data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImagesRequest_Image, preprocessed_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImagesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImagesRequest, predictor_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImagesRequest, images_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImagesRequest, options_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DatasetRequest_Dataset, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DatasetRequest_Dataset, category_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DatasetRequest_Dataset, name_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DatasetRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DatasetRequest, predictor_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DatasetRequest, dataset_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DatasetRequest, options_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Feature, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Feature, index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Feature, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Feature, probability_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Feature, metadata_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureResponse, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureResponse, request_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureResponse, input_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureResponse, features_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureResponse, metadata_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeaturesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeaturesResponse, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeaturesResponse, responses_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResetRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResetRequest, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResetRequest, predictor_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResetResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResetResponse, predictor_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(ErrorStatus)},
  { 7, -1, sizeof(PredictorOpenRequest)},
  { 16, -1, sizeof(PredictorCloseResponse)},
  { 21, -1, sizeof(PredictionOptions)},
  { 28, -1, sizeof(Predictor)},
  { 34, -1, sizeof(URLsRequest_URL)},
  { 41, -1, sizeof(URLsRequest)},
  { 49, -1, sizeof(ImagesRequest_Image)},
  { 57, -1, sizeof(ImagesRequest)},
  { 65, -1, sizeof(DatasetRequest_Dataset)},
  { 72, -1, sizeof(DatasetRequest)},
  { 80, -1, sizeof(Feature)},
  { 89, -1, sizeof(FeatureResponse)},
  { 99, -1, sizeof(FeaturesResponse)},
  { 106, -1, sizeof(ResetRequest)},
  { 113, -1, sizeof(ResetResponse)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_ErrorStatus_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PredictorOpenRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PredictorCloseResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PredictionOptions_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Predictor_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_URLsRequest_URL_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_URLsRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ImagesRequest_Image_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ImagesRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DatasetRequest_Dataset_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DatasetRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Feature_MetadataEntry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Feature_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_FeatureResponse_MetadataEntry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_FeatureResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_FeaturesResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ResetRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ResetResponse_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "predictor.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
file_level_metadata[11].reflection = Feature::Feature_MetadataEntry::CreateReflection(file_level_metadata[11].descriptor, _Feature_MetadataEntry_default_instance_._instance.get_mutable());
file_level_metadata[13].reflection = FeatureResponse::FeatureResponse_MetadataEntry::CreateReflection(file_level_metadata[13].descriptor, _FeatureResponse_MetadataEntry_default_instance_._instance.get_mutable());
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 18);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::google::api::protobuf_google_2fapi_2fannotations_2eproto::InitDefaults();
  ::gogoproto::protobuf_github_2ecom_2fgogo_2fprotobuf_2fgogoproto_2fgogo_2eproto::InitDefaults();
  _ErrorStatus_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ErrorStatus_default_instance_);_PredictorOpenRequest_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_PredictorOpenRequest_default_instance_);_PredictorCloseResponse_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_PredictorCloseResponse_default_instance_);_PredictionOptions_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_PredictionOptions_default_instance_);_Predictor_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Predictor_default_instance_);_URLsRequest_URL_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_URLsRequest_URL_default_instance_);_URLsRequest_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_URLsRequest_default_instance_);_ImagesRequest_Image_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ImagesRequest_Image_default_instance_);_ImagesRequest_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ImagesRequest_default_instance_);_DatasetRequest_Dataset_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DatasetRequest_Dataset_default_instance_);_DatasetRequest_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DatasetRequest_default_instance_);_Feature_MetadataEntry_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Feature_MetadataEntry_default_instance_);_Feature_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Feature_default_instance_);_FeatureResponse_MetadataEntry_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_FeatureResponse_MetadataEntry_default_instance_);_FeatureResponse_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_FeatureResponse_default_instance_);_FeaturesResponse_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_FeaturesResponse_default_instance_);_ResetRequest_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ResetRequest_default_instance_);_ResetResponse_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ResetResponse_default_instance_);_URLsRequest_default_instance_._instance.get_mutable()->predictor_ = const_cast< ::carml::org::predictor::Predictor*>(
      ::carml::org::predictor::Predictor::internal_default_instance());
  _URLsRequest_default_instance_._instance.get_mutable()->options_ = const_cast< ::carml::org::predictor::PredictionOptions*>(
      ::carml::org::predictor::PredictionOptions::internal_default_instance());
  _ImagesRequest_default_instance_._instance.get_mutable()->predictor_ = const_cast< ::carml::org::predictor::Predictor*>(
      ::carml::org::predictor::Predictor::internal_default_instance());
  _ImagesRequest_default_instance_._instance.get_mutable()->options_ = const_cast< ::carml::org::predictor::PredictionOptions*>(
      ::carml::org::predictor::PredictionOptions::internal_default_instance());
  _DatasetRequest_default_instance_._instance.get_mutable()->predictor_ = const_cast< ::carml::org::predictor::Predictor*>(
      ::carml::org::predictor::Predictor::internal_default_instance());
  _DatasetRequest_default_instance_._instance.get_mutable()->dataset_ = const_cast< ::carml::org::predictor::DatasetRequest_Dataset*>(
      ::carml::org::predictor::DatasetRequest_Dataset::internal_default_instance());
  _DatasetRequest_default_instance_._instance.get_mutable()->options_ = const_cast< ::carml::org::predictor::PredictionOptions*>(
      ::carml::org::predictor::PredictionOptions::internal_default_instance());
  _Feature_MetadataEntry_default_instance_._instance.get_mutable()->set_default_instance(_Feature_MetadataEntry_default_instance_._instance.get_mutable());
  _Feature_MetadataEntry_default_instance_._instance.get_mutable()->InitAsDefaultInstance();
  _FeatureResponse_MetadataEntry_default_instance_._instance.get_mutable()->set_default_instance(_FeatureResponse_MetadataEntry_default_instance_._instance.get_mutable());
  _FeatureResponse_MetadataEntry_default_instance_._instance.get_mutable()->InitAsDefaultInstance();
  _ResetRequest_default_instance_._instance.get_mutable()->predictor_ = const_cast< ::carml::org::predictor::Predictor*>(
      ::carml::org::predictor::Predictor::internal_default_instance());
  _ResetResponse_default_instance_._instance.get_mutable()->predictor_ = const_cast< ::carml::org::predictor::Predictor*>(
      ::carml::org::predictor::Predictor::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\017predictor.proto\022\023carml.org.predictor\032\034"
      "google/api/annotations.proto\032-github.com"
      "/gogo/protobuf/gogoproto/gogo.proto\"g\n\013E"
      "rrorStatus\022#\n\002ok\030\001 \001(\010B\027\362\336\037\023yaml:\"ok,omi"
      "tempty\"\022-\n\007message\030\002 \001(\tB\034\362\336\037\030yaml:\"mess"
      "age,omitempty\":\004\360\240\037\001\"\214\002\n\024PredictorOpenRe"
      "quest\0223\n\nmodel_name\030\001 \001(\tB\037\362\336\037\033yaml:\"mod"
      "el_name,omitempty\"\0229\n\rmodel_version\030\002 \001("
      "\tB\"\362\336\037\036yaml:\"model_version,omitempty\"\022;\n"
      "\016framework_name\030\003 \001(\tB#\362\336\037\037yaml:\"framewo"
      "rk_name,omitempty\"\022A\n\021framework_version\030"
      "\004 \001(\tB&\362\336\037\"yaml:\"framework_version,omite"
      "mpty\":\004\360\240\037\001\"\030\n\026PredictorCloseResponse\"\256\001"
      "\n\021PredictionOptions\022X\n\nrequest_id\030\001 \001(\tB"
      "D\342\336\037\tRequestID\352\336\037\024request_id,omitempty\362\336"
      "\037\033yaml:\"request_id,omitempty\"\0229\n\rfeature"
      "_limit\030\002 \001(\005B\"\362\336\037\036yaml:\"feature_limit,om"
      "itempty\":\004\360\240\037\001\"L\n\tPredictor\0229\n\002id\030\001 \001(\tB"
      "-\342\336\037\002ID\352\336\037\014id,omitempty\362\336\037\023yaml:\"id,omit"
      "empty\":\004\360\240\037\001\"\367\002\n\013URLsRequest\022Q\n\tpredicto"
      "r\030\001 \001(\0132\036.carml.org.predictor.PredictorB"
      "\036\362\336\037\032yaml:\"predictor,omitempty\"\022M\n\004urls\030"
      "\002 \003(\0132$.carml.org.predictor.URLsRequest."
      "URLB\031\362\336\037\025yaml:\"urls,omitempty\"\022U\n\007option"
      "s\030\003 \001(\0132&.carml.org.predictor.Prediction"
      "OptionsB\034\362\336\037\030yaml:\"options,omitempty\"\032i\n"
      "\003URL\0229\n\002id\030\001 \001(\tB-\342\336\037\002ID\352\336\037\014id,omitempty"
      "\362\336\037\023yaml:\"id,omitempty\"\022\'\n\004data\030\002 \001(\tB\031\362"
      "\336\037\025yaml:\"data,omitempty\":\004\360\240\037\001\"\275\003\n\rImage"
      "sRequest\022Q\n\tpredictor\030\001 \001(\0132\036.carml.org."
      "predictor.PredictorB\036\362\336\037\032yaml:\"predictor"
      ",omitempty\"\022U\n\006images\030\002 \003(\0132(.carml.org."
      "predictor.ImagesRequest.ImageB\033\362\336\037\027yaml:"
      "\"images,omitempty\"\022U\n\007options\030\003 \001(\0132&.ca"
      "rml.org.predictor.PredictionOptionsB\034\362\336\037"
      "\030yaml:\"options,omitempty\"\032\244\001\n\005Image\0229\n\002i"
      "d\030\001 \001(\tB-\342\336\037\002ID\352\336\037\014id,omitempty\362\336\037\023yaml:"
      "\"id,omitempty\"\022\'\n\004data\030\002 \001(\014B\031\362\336\037\025yaml:\""
      "data,omitempty\"\0227\n\014preprocessed\030\003 \001(\010B!\362"
      "\336\037\035yaml:\"preprocessed,omitempty\":\004\360\240\037\001\"\201"
      "\003\n\016DatasetRequest\022Q\n\tpredictor\030\001 \001(\0132\036.c"
      "arml.org.predictor.PredictorB\036\362\336\037\032yaml:\""
      "predictor,omitempty\"\022Z\n\007dataset\030\002 \001(\0132+."
      "carml.org.predictor.DatasetRequest.Datas"
      "etB\034\362\336\037\030yaml:\"dataset,omitempty\"\022U\n\007opti"
      "ons\030\003 \001(\0132&.carml.org.predictor.Predicti"
      "onOptionsB\034\362\336\037\030yaml:\"options,omitempty\"\032"
      "c\n\007Dataset\022/\n\010category\030\001 \001(\tB\035\362\336\037\031yaml:\""
      "category,omitempty\"\022\'\n\004name\030\002 \001(\tB\031\362\336\037\025y"
      "aml:\"name,omitempty\":\004\360\240\037\001\"\250\002\n\007Feature\022)"
      "\n\005index\030\001 \001(\003B\032\362\336\037\026yaml:\"index,omitempty"
      "\"\022\'\n\004name\030\002 \001(\tB\031\362\336\037\025yaml:\"name,omitempt"
      "y\"\0225\n\013probability\030\003 \001(\002B \362\336\037\034yaml:\"proba"
      "bility,omitempty\"\022[\n\010metadata\030\004 \003(\0132*.ca"
      "rml.org.predictor.Feature.MetadataEntryB"
      "\035\362\336\037\031yaml:\"metadata,omitempty\"\032/\n\rMetada"
      "taEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001:"
      "\004\360\240\037\001\"\343\003\n\017FeatureResponse\0229\n\002id\030\001 \001(\tB-\342"
      "\336\037\002ID\352\336\037\014id,omitempty\362\336\037\023yaml:\"id,omitem"
      "pty\"\022X\n\nrequest_id\030\002 \001(\tBD\342\336\037\tRequestID\352"
      "\336\037\024request_id,omitempty\362\336\037\033yaml:\"request"
      "_id,omitempty\"\022P\n\010input_id\030\003 \001(\tB>\342\336\037\007In"
      "putID\352\336\037\022input_id,omitempty\362\336\037\031yaml:\"inp"
      "ut_id,omitempty\"\022M\n\010features\030\004 \003(\0132\034.car"
      "ml.org.predictor.FeatureB\035\362\336\037\031yaml:\"feat"
      "ures,omitempty\"\022c\n\010metadata\030\005 \003(\01322.carm"
      "l.org.predictor.FeatureResponse.Metadata"
      "EntryB\035\362\336\037\031yaml:\"metadata,omitempty\"\032/\n\r"
      "MetadataEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001("
      "\t:\0028\001:\004\360\240\037\001\"\254\001\n\020FeaturesResponse\0229\n\002id\030\001"
      " \001(\tB-\342\336\037\002ID\352\336\037\014id,omitempty\362\336\037\023yaml:\"id"
      ",omitempty\"\022W\n\tresponses\030\002 \003(\0132$.carml.o"
      "rg.predictor.FeatureResponseB\036\362\336\037\032yaml:\""
      "responses,omitempty\":\004\360\240\037\001\"\242\001\n\014ResetRequ"
      "est\0229\n\002id\030\002 \001(\tB-\342\336\037\002ID\352\336\037\014id,omitempty\362"
      "\336\037\023yaml:\"id,omitempty\"\022Q\n\tpredictor\030\001 \001("
      "\0132\036.carml.org.predictor.PredictorB\036\362\336\037\032y"
      "aml:\"predictor,omitempty\":\004\360\240\037\001\"l\n\rReset"
      "Response\022U\n\tpredictor\030\001 \001(\0132\036.carml.org."
      "predictor.PredictorB\"\320\336\037\001\362\336\037\032yaml:\"predi"
      "ctor,omitempty\":\004\360\240\037\0012\271\010\n\007Predict\022n\n\004Ope"
      "n\022).carml.org.predictor.PredictorOpenReq"
      "uest\032\036.carml.org.predictor.Predictor\"\033\202\323"
      "\344\223\002\025\"\020/v1/predict/open:\001*\022r\n\005Close\022\036.car"
      "ml.org.predictor.Predictor\032+.carml.org.p"
      "redictor.PredictorCloseResponse\"\034\202\323\344\223\002\026\""
      "\021/v1/predict/close:\001*\022l\n\004URLs\022 .carml.or"
      "g.predictor.URLsRequest\032%.carml.org.pred"
      "ictor.FeaturesResponse\"\033\202\323\344\223\002\025\"\020/v1/pred"
      "ict/urls:\001*\022z\n\nURLsStream\022 .carml.org.pr"
      "edictor.URLsRequest\032$.carml.org.predicto"
      "r.FeatureResponse\"\"\202\323\344\223\002\034\"\027/v1/predict/s"
      "tream/urls:\001*0\001\022r\n\006Images\022\".carml.org.pr"
      "edictor.ImagesRequest\032%.carml.org.predic"
      "tor.FeaturesResponse\"\035\202\323\344\223\002\027\"\022/v1/predic"
      "t/images:\001*\022\200\001\n\014ImagesStream\022\".carml.org"
      ".predictor.ImagesRequest\032$.carml.org.pre"
      "dictor.FeatureResponse\"$\202\323\344\223\002\036\"\031/v1/pred"
      "ict/stream/images:\001*0\001\022u\n\007Dataset\022#.carm"
      "l.org.predictor.DatasetRequest\032%.carml.o"
      "rg.predictor.FeaturesResponse\"\036\202\323\344\223\002\030\"\023/"
      "v1/predict/dataset:\001*\022\203\001\n\rDatasetStream\022"
      "#.carml.org.predictor.DatasetRequest\032$.c"
      "arml.org.predictor.FeatureResponse\"%\202\323\344\223"
      "\002\037\"\032/v1/predict/stream/dataset:\001*0\001\022l\n\005R"
      "eset\022!.carml.org.predictor.ResetRequest\032"
      "\".carml.org.predictor.ResetResponse\"\034\202\323\344"
      "\223\002\026\"\021/v1/predict/reset:\001*B;Z\tpredictor\300\343"
      "\036\001\360\341\036\001\250\342\036\001\340\341\036\001\330\341\036\000\200\342\036\001\370\341\036\001\270\342\036\001\300\342\036\001\310\342\036\001\340\342"
      "\036\001\320\342\036\001b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 4374);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "predictor.proto", &protobuf_RegisterTypes);
  ::google::api::protobuf_google_2fapi_2fannotations_2eproto::AddDescriptors();
  ::gogoproto::protobuf_github_2ecom_2fgogo_2fprotobuf_2fgogoproto_2fgogo_2eproto::AddDescriptors();
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_predictor_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ErrorStatus::kOkFieldNumber;
const int ErrorStatus::kMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ErrorStatus::ErrorStatus()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_predictor_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:carml.org.predictor.ErrorStatus)
}
ErrorStatus::ErrorStatus(const ErrorStatus& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.message().size() > 0) {
    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  ok_ = from.ok_;
  // @@protoc_insertion_point(copy_constructor:carml.org.predictor.ErrorStatus)
}

void ErrorStatus::SharedCtor() {
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ok_ = false;
  _cached_size_ = 0;
}

ErrorStatus::~ErrorStatus() {
  // @@protoc_insertion_point(destructor:carml.org.predictor.ErrorStatus)
  SharedDtor();
}

void ErrorStatus::SharedDtor() {
  message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ErrorStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ErrorStatus::descriptor() {
  protobuf_predictor_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_predictor_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ErrorStatus& ErrorStatus::default_instance() {
  protobuf_predictor_2eproto::InitDefaults();
  return *internal_default_instance();
}

ErrorStatus* ErrorStatus::New(::google::protobuf::Arena* arena) const {
  ErrorStatus* n = new ErrorStatus;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ErrorStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:carml.org.predictor.ErrorStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ok_ = false;
  _internal_metadata_.Clear();
}

bool ErrorStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:carml.org.predictor.ErrorStatus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool ok = 1 [(.gogoproto.moretags) = "yaml:\"ok,omitempty\""];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ok_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string message = 2 [(.gogoproto.moretags) = "yaml:\"message,omitempty\""];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->message().data(), static_cast<int>(this->message().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "carml.org.predictor.ErrorStatus.message"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:carml.org.predictor.ErrorStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:carml.org.predictor.ErrorStatus)
  return false;
#undef DO_
}

void ErrorStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:carml.org.predictor.ErrorStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool ok = 1 [(.gogoproto.moretags) = "yaml:\"ok,omitempty\""];
  if (this->ok() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->ok(), output);
  }

  // string message = 2 [(.gogoproto.moretags) = "yaml:\"message,omitempty\""];
  if (this->message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message().data(), static_cast<int>(this->message().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "carml.org.predictor.ErrorStatus.message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->message(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:carml.org.predictor.ErrorStatus)
}

::google::protobuf::uint8* ErrorStatus::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:carml.org.predictor.ErrorStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool ok = 1 [(.gogoproto.moretags) = "yaml:\"ok,omitempty\""];
  if (this->ok() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->ok(), target);
  }

  // string message = 2 [(.gogoproto.moretags) = "yaml:\"message,omitempty\""];
  if (this->message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message().data(), static_cast<int>(this->message().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "carml.org.predictor.ErrorStatus.message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->message(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:carml.org.predictor.ErrorStatus)
  return target;
}

size_t ErrorStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:carml.org.predictor.ErrorStatus)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string message = 2 [(.gogoproto.moretags) = "yaml:\"message,omitempty\""];
  if (this->message().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->message());
  }

  // bool ok = 1 [(.gogoproto.moretags) = "yaml:\"ok,omitempty\""];
  if (this->ok() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ErrorStatus::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:carml.org.predictor.ErrorStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const ErrorStatus* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ErrorStatus>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:carml.org.predictor.ErrorStatus)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:carml.org.predictor.ErrorStatus)
    MergeFrom(*source);
  }
}

void ErrorStatus::MergeFrom(const ErrorStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:carml.org.predictor.ErrorStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.message().size() > 0) {

    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  if (from.ok() != 0) {
    set_ok(from.ok());
  }
}

void ErrorStatus::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:carml.org.predictor.ErrorStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ErrorStatus::CopyFrom(const ErrorStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:carml.org.predictor.ErrorStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ErrorStatus::IsInitialized() const {
  return true;
}

void ErrorStatus::Swap(ErrorStatus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ErrorStatus::InternalSwap(ErrorStatus* other) {
  using std::swap;
  message_.Swap(&other->message_);
  swap(ok_, other->ok_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ErrorStatus::GetMetadata() const {
  protobuf_predictor_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_predictor_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ErrorStatus

// bool ok = 1 [(.gogoproto.moretags) = "yaml:\"ok,omitempty\""];
void ErrorStatus::clear_ok() {
  ok_ = false;
}
bool ErrorStatus::ok() const {
  // @@protoc_insertion_point(field_get:carml.org.predictor.ErrorStatus.ok)
  return ok_;
}
void ErrorStatus::set_ok(bool value) {
  
  ok_ = value;
  // @@protoc_insertion_point(field_set:carml.org.predictor.ErrorStatus.ok)
}

// string message = 2 [(.gogoproto.moretags) = "yaml:\"message,omitempty\""];
void ErrorStatus::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ErrorStatus::message() const {
  // @@protoc_insertion_point(field_get:carml.org.predictor.ErrorStatus.message)
  return message_.GetNoArena();
}
void ErrorStatus::set_message(const ::std::string& value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:carml.org.predictor.ErrorStatus.message)
}
#if LANG_CXX11
void ErrorStatus::set_message(::std::string&& value) {
  
  message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:carml.org.predictor.ErrorStatus.message)
}
#endif
void ErrorStatus::set_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:carml.org.predictor.ErrorStatus.message)
}
void ErrorStatus::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:carml.org.predictor.ErrorStatus.message)
}
::std::string* ErrorStatus::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:carml.org.predictor.ErrorStatus.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ErrorStatus::release_message() {
  // @@protoc_insertion_point(field_release:carml.org.predictor.ErrorStatus.message)
  
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ErrorStatus::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:carml.org.predictor.ErrorStatus.message)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PredictorOpenRequest::kModelNameFieldNumber;
const int PredictorOpenRequest::kModelVersionFieldNumber;
const int PredictorOpenRequest::kFrameworkNameFieldNumber;
const int PredictorOpenRequest::kFrameworkVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PredictorOpenRequest::PredictorOpenRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_predictor_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:carml.org.predictor.PredictorOpenRequest)
}
PredictorOpenRequest::PredictorOpenRequest(const PredictorOpenRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  model_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.model_name().size() > 0) {
    model_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.model_name_);
  }
  model_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.model_version().size() > 0) {
    model_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.model_version_);
  }
  framework_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.framework_name().size() > 0) {
    framework_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.framework_name_);
  }
  framework_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.framework_version().size() > 0) {
    framework_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.framework_version_);
  }
  // @@protoc_insertion_point(copy_constructor:carml.org.predictor.PredictorOpenRequest)
}

void PredictorOpenRequest::SharedCtor() {
  model_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  model_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  framework_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  framework_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

PredictorOpenRequest::~PredictorOpenRequest() {
  // @@protoc_insertion_point(destructor:carml.org.predictor.PredictorOpenRequest)
  SharedDtor();
}

void PredictorOpenRequest::SharedDtor() {
  model_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  model_version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  framework_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  framework_version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PredictorOpenRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PredictorOpenRequest::descriptor() {
  protobuf_predictor_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_predictor_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PredictorOpenRequest& PredictorOpenRequest::default_instance() {
  protobuf_predictor_2eproto::InitDefaults();
  return *internal_default_instance();
}

PredictorOpenRequest* PredictorOpenRequest::New(::google::protobuf::Arena* arena) const {
  PredictorOpenRequest* n = new PredictorOpenRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PredictorOpenRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:carml.org.predictor.PredictorOpenRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  model_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  model_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  framework_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  framework_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool PredictorOpenRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:carml.org.predictor.PredictorOpenRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string model_name = 1 [(.gogoproto.moretags) = "yaml:\"model_name,omitempty\""];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_model_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->model_name().data(), static_cast<int>(this->model_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "carml.org.predictor.PredictorOpenRequest.model_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string model_version = 2 [(.gogoproto.moretags) = "yaml:\"model_version,omitempty\""];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_model_version()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->model_version().data(), static_cast<int>(this->model_version().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "carml.org.predictor.PredictorOpenRequest.model_version"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string framework_name = 3 [(.gogoproto.moretags) = "yaml:\"framework_name,omitempty\""];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_framework_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->framework_name().data(), static_cast<int>(this->framework_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "carml.org.predictor.PredictorOpenRequest.framework_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string framework_version = 4 [(.gogoproto.moretags) = "yaml:\"framework_version,omitempty\""];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_framework_version()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->framework_version().data(), static_cast<int>(this->framework_version().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "carml.org.predictor.PredictorOpenRequest.framework_version"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:carml.org.predictor.PredictorOpenRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:carml.org.predictor.PredictorOpenRequest)
  return false;
#undef DO_
}

void PredictorOpenRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:carml.org.predictor.PredictorOpenRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string model_name = 1 [(.gogoproto.moretags) = "yaml:\"model_name,omitempty\""];
  if (this->model_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->model_name().data(), static_cast<int>(this->model_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "carml.org.predictor.PredictorOpenRequest.model_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->model_name(), output);
  }

  // string model_version = 2 [(.gogoproto.moretags) = "yaml:\"model_version,omitempty\""];
  if (this->model_version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->model_version().data(), static_cast<int>(this->model_version().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "carml.org.predictor.PredictorOpenRequest.model_version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->model_version(), output);
  }

  // string framework_name = 3 [(.gogoproto.moretags) = "yaml:\"framework_name,omitempty\""];
  if (this->framework_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->framework_name().data(), static_cast<int>(this->framework_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "carml.org.predictor.PredictorOpenRequest.framework_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->framework_name(), output);
  }

  // string framework_version = 4 [(.gogoproto.moretags) = "yaml:\"framework_version,omitempty\""];
  if (this->framework_version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->framework_version().data(), static_cast<int>(this->framework_version().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "carml.org.predictor.PredictorOpenRequest.framework_version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->framework_version(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:carml.org.predictor.PredictorOpenRequest)
}

::google::protobuf::uint8* PredictorOpenRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:carml.org.predictor.PredictorOpenRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string model_name = 1 [(.gogoproto.moretags) = "yaml:\"model_name,omitempty\""];
  if (this->model_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->model_name().data(), static_cast<int>(this->model_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "carml.org.predictor.PredictorOpenRequest.model_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->model_name(), target);
  }

  // string model_version = 2 [(.gogoproto.moretags) = "yaml:\"model_version,omitempty\""];
  if (this->model_version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->model_version().data(), static_cast<int>(this->model_version().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "carml.org.predictor.PredictorOpenRequest.model_version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->model_version(), target);
  }

  // string framework_name = 3 [(.gogoproto.moretags) = "yaml:\"framework_name,omitempty\""];
  if (this->framework_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->framework_name().data(), static_cast<int>(this->framework_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "carml.org.predictor.PredictorOpenRequest.framework_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->framework_name(), target);
  }

  // string framework_version = 4 [(.gogoproto.moretags) = "yaml:\"framework_version,omitempty\""];
  if (this->framework_version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->framework_version().data(), static_cast<int>(this->framework_version().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "carml.org.predictor.PredictorOpenRequest.framework_version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->framework_version(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:carml.org.predictor.PredictorOpenRequest)
  return target;
}

size_t PredictorOpenRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:carml.org.predictor.PredictorOpenRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string model_name = 1 [(.gogoproto.moretags) = "yaml:\"model_name,omitempty\""];
  if (this->model_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->model_name());
  }

  // string model_version = 2 [(.gogoproto.moretags) = "yaml:\"model_version,omitempty\""];
  if (this->model_version().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->model_version());
  }

  // string framework_name = 3 [(.gogoproto.moretags) = "yaml:\"framework_name,omitempty\""];
  if (this->framework_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->framework_name());
  }

  // string framework_version = 4 [(.gogoproto.moretags) = "yaml:\"framework_version,omitempty\""];
  if (this->framework_version().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->framework_version());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PredictorOpenRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:carml.org.predictor.PredictorOpenRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PredictorOpenRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PredictorOpenRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:carml.org.predictor.PredictorOpenRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:carml.org.predictor.PredictorOpenRequest)
    MergeFrom(*source);
  }
}

void PredictorOpenRequest::MergeFrom(const PredictorOpenRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:carml.org.predictor.PredictorOpenRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.model_name().size() > 0) {

    model_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.model_name_);
  }
  if (from.model_version().size() > 0) {

    model_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.model_version_);
  }
  if (from.framework_name().size() > 0) {

    framework_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.framework_name_);
  }
  if (from.framework_version().size() > 0) {

    framework_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.framework_version_);
  }
}

void PredictorOpenRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:carml.org.predictor.PredictorOpenRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PredictorOpenRequest::CopyFrom(const PredictorOpenRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:carml.org.predictor.PredictorOpenRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PredictorOpenRequest::IsInitialized() const {
  return true;
}

void PredictorOpenRequest::Swap(PredictorOpenRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PredictorOpenRequest::InternalSwap(PredictorOpenRequest* other) {
  using std::swap;
  model_name_.Swap(&other->model_name_);
  model_version_.Swap(&other->model_version_);
  framework_name_.Swap(&other->framework_name_);
  framework_version_.Swap(&other->framework_version_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PredictorOpenRequest::GetMetadata() const {
  protobuf_predictor_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_predictor_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PredictorOpenRequest

// string model_name = 1 [(.gogoproto.moretags) = "yaml:\"model_name,omitempty\""];
void PredictorOpenRequest::clear_model_name() {
  model_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& PredictorOpenRequest::model_name() const {
  // @@protoc_insertion_point(field_get:carml.org.predictor.PredictorOpenRequest.model_name)
  return model_name_.GetNoArena();
}
void PredictorOpenRequest::set_model_name(const ::std::string& value) {
  
  model_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:carml.org.predictor.PredictorOpenRequest.model_name)
}
#if LANG_CXX11
void PredictorOpenRequest::set_model_name(::std::string&& value) {
  
  model_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:carml.org.predictor.PredictorOpenRequest.model_name)
}
#endif
void PredictorOpenRequest::set_model_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  model_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:carml.org.predictor.PredictorOpenRequest.model_name)
}
void PredictorOpenRequest::set_model_name(const char* value, size_t size) {
  
  model_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:carml.org.predictor.PredictorOpenRequest.model_name)
}
::std::string* PredictorOpenRequest::mutable_model_name() {
  
  // @@protoc_insertion_point(field_mutable:carml.org.predictor.PredictorOpenRequest.model_name)
  return model_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PredictorOpenRequest::release_model_name() {
  // @@protoc_insertion_point(field_release:carml.org.predictor.PredictorOpenRequest.model_name)
  
  return model_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PredictorOpenRequest::set_allocated_model_name(::std::string* model_name) {
  if (model_name != NULL) {
    
  } else {
    
  }
  model_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), model_name);
  // @@protoc_insertion_point(field_set_allocated:carml.org.predictor.PredictorOpenRequest.model_name)
}

// string model_version = 2 [(.gogoproto.moretags) = "yaml:\"model_version,omitempty\""];
void PredictorOpenRequest::clear_model_version() {
  model_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& PredictorOpenRequest::model_version() const {
  // @@protoc_insertion_point(field_get:carml.org.predictor.PredictorOpenRequest.model_version)
  return model_version_.GetNoArena();
}
void PredictorOpenRequest::set_model_version(const ::std::string& value) {
  
  model_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:carml.org.predictor.PredictorOpenRequest.model_version)
}
#if LANG_CXX11
void PredictorOpenRequest::set_model_version(::std::string&& value) {
  
  model_version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:carml.org.predictor.PredictorOpenRequest.model_version)
}
#endif
void PredictorOpenRequest::set_model_version(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  model_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:carml.org.predictor.PredictorOpenRequest.model_version)
}
void PredictorOpenRequest::set_model_version(const char* value, size_t size) {
  
  model_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:carml.org.predictor.PredictorOpenRequest.model_version)
}
::std::string* PredictorOpenRequest::mutable_model_version() {
  
  // @@protoc_insertion_point(field_mutable:carml.org.predictor.PredictorOpenRequest.model_version)
  return model_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PredictorOpenRequest::release_model_version() {
  // @@protoc_insertion_point(field_release:carml.org.predictor.PredictorOpenRequest.model_version)
  
  return model_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PredictorOpenRequest::set_allocated_model_version(::std::string* model_version) {
  if (model_version != NULL) {
    
  } else {
    
  }
  model_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), model_version);
  // @@protoc_insertion_point(field_set_allocated:carml.org.predictor.PredictorOpenRequest.model_version)
}

// string framework_name = 3 [(.gogoproto.moretags) = "yaml:\"framework_name,omitempty\""];
void PredictorOpenRequest::clear_framework_name() {
  framework_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& PredictorOpenRequest::framework_name() const {
  // @@protoc_insertion_point(field_get:carml.org.predictor.PredictorOpenRequest.framework_name)
  return framework_name_.GetNoArena();
}
void PredictorOpenRequest::set_framework_name(const ::std::string& value) {
  
  framework_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:carml.org.predictor.PredictorOpenRequest.framework_name)
}
#if LANG_CXX11
void PredictorOpenRequest::set_framework_name(::std::string&& value) {
  
  framework_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:carml.org.predictor.PredictorOpenRequest.framework_name)
}
#endif
void PredictorOpenRequest::set_framework_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  framework_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:carml.org.predictor.PredictorOpenRequest.framework_name)
}
void PredictorOpenRequest::set_framework_name(const char* value, size_t size) {
  
  framework_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:carml.org.predictor.PredictorOpenRequest.framework_name)
}
::std::string* PredictorOpenRequest::mutable_framework_name() {
  
  // @@protoc_insertion_point(field_mutable:carml.org.predictor.PredictorOpenRequest.framework_name)
  return framework_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PredictorOpenRequest::release_framework_name() {
  // @@protoc_insertion_point(field_release:carml.org.predictor.PredictorOpenRequest.framework_name)
  
  return framework_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PredictorOpenRequest::set_allocated_framework_name(::std::string* framework_name) {
  if (framework_name != NULL) {
    
  } else {
    
  }
  framework_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), framework_name);
  // @@protoc_insertion_point(field_set_allocated:carml.org.predictor.PredictorOpenRequest.framework_name)
}

// string framework_version = 4 [(.gogoproto.moretags) = "yaml:\"framework_version,omitempty\""];
void PredictorOpenRequest::clear_framework_version() {
  framework_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& PredictorOpenRequest::framework_version() const {
  // @@protoc_insertion_point(field_get:carml.org.predictor.PredictorOpenRequest.framework_version)
  return framework_version_.GetNoArena();
}
void PredictorOpenRequest::set_framework_version(const ::std::string& value) {
  
  framework_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:carml.org.predictor.PredictorOpenRequest.framework_version)
}
#if LANG_CXX11
void PredictorOpenRequest::set_framework_version(::std::string&& value) {
  
  framework_version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:carml.org.predictor.PredictorOpenRequest.framework_version)
}
#endif
void PredictorOpenRequest::set_framework_version(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  framework_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:carml.org.predictor.PredictorOpenRequest.framework_version)
}
void PredictorOpenRequest::set_framework_version(const char* value, size_t size) {
  
  framework_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:carml.org.predictor.PredictorOpenRequest.framework_version)
}
::std::string* PredictorOpenRequest::mutable_framework_version() {
  
  // @@protoc_insertion_point(field_mutable:carml.org.predictor.PredictorOpenRequest.framework_version)
  return framework_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PredictorOpenRequest::release_framework_version() {
  // @@protoc_insertion_point(field_release:carml.org.predictor.PredictorOpenRequest.framework_version)
  
  return framework_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PredictorOpenRequest::set_allocated_framework_version(::std::string* framework_version) {
  if (framework_version != NULL) {
    
  } else {
    
  }
  framework_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), framework_version);
  // @@protoc_insertion_point(field_set_allocated:carml.org.predictor.PredictorOpenRequest.framework_version)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PredictorCloseResponse::PredictorCloseResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_predictor_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:carml.org.predictor.PredictorCloseResponse)
}
PredictorCloseResponse::PredictorCloseResponse(const PredictorCloseResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:carml.org.predictor.PredictorCloseResponse)
}

void PredictorCloseResponse::SharedCtor() {
  _cached_size_ = 0;
}

PredictorCloseResponse::~PredictorCloseResponse() {
  // @@protoc_insertion_point(destructor:carml.org.predictor.PredictorCloseResponse)
  SharedDtor();
}

void PredictorCloseResponse::SharedDtor() {
}

void PredictorCloseResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PredictorCloseResponse::descriptor() {
  protobuf_predictor_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_predictor_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PredictorCloseResponse& PredictorCloseResponse::default_instance() {
  protobuf_predictor_2eproto::InitDefaults();
  return *internal_default_instance();
}

PredictorCloseResponse* PredictorCloseResponse::New(::google::protobuf::Arena* arena) const {
  PredictorCloseResponse* n = new PredictorCloseResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PredictorCloseResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:carml.org.predictor.PredictorCloseResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool PredictorCloseResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:carml.org.predictor.PredictorCloseResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:carml.org.predictor.PredictorCloseResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:carml.org.predictor.PredictorCloseResponse)
  return false;
#undef DO_
}

void PredictorCloseResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:carml.org.predictor.PredictorCloseResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:carml.org.predictor.PredictorCloseResponse)
}

::google::protobuf::uint8* PredictorCloseResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:carml.org.predictor.PredictorCloseResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:carml.org.predictor.PredictorCloseResponse)
  return target;
}

size_t PredictorCloseResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:carml.org.predictor.PredictorCloseResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PredictorCloseResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:carml.org.predictor.PredictorCloseResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const PredictorCloseResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PredictorCloseResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:carml.org.predictor.PredictorCloseResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:carml.org.predictor.PredictorCloseResponse)
    MergeFrom(*source);
  }
}

void PredictorCloseResponse::MergeFrom(const PredictorCloseResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:carml.org.predictor.PredictorCloseResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void PredictorCloseResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:carml.org.predictor.PredictorCloseResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PredictorCloseResponse::CopyFrom(const PredictorCloseResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:carml.org.predictor.PredictorCloseResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PredictorCloseResponse::IsInitialized() const {
  return true;
}

void PredictorCloseResponse::Swap(PredictorCloseResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PredictorCloseResponse::InternalSwap(PredictorCloseResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PredictorCloseResponse::GetMetadata() const {
  protobuf_predictor_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_predictor_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PredictorCloseResponse

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PredictionOptions::kRequestIdFieldNumber;
const int PredictionOptions::kFeatureLimitFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PredictionOptions::PredictionOptions()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_predictor_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:carml.org.predictor.PredictionOptions)
}
PredictionOptions::PredictionOptions(const PredictionOptions& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  request_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.request_id().size() > 0) {
    request_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_id_);
  }
  feature_limit_ = from.feature_limit_;
  // @@protoc_insertion_point(copy_constructor:carml.org.predictor.PredictionOptions)
}

void PredictionOptions::SharedCtor() {
  request_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  feature_limit_ = 0;
  _cached_size_ = 0;
}

PredictionOptions::~PredictionOptions() {
  // @@protoc_insertion_point(destructor:carml.org.predictor.PredictionOptions)
  SharedDtor();
}

void PredictionOptions::SharedDtor() {
  request_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PredictionOptions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PredictionOptions::descriptor() {
  protobuf_predictor_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_predictor_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PredictionOptions& PredictionOptions::default_instance() {
  protobuf_predictor_2eproto::InitDefaults();
  return *internal_default_instance();
}

PredictionOptions* PredictionOptions::New(::google::protobuf::Arena* arena) const {
  PredictionOptions* n = new PredictionOptions;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PredictionOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:carml.org.predictor.PredictionOptions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  feature_limit_ = 0;
  _internal_metadata_.Clear();
}

bool PredictionOptions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:carml.org.predictor.PredictionOptions)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string request_id = 1 [(.gogoproto.customname) = "RequestID", (.gogoproto.jsontag) = "request_id,omitempty", (.gogoproto.moretags) = "yaml:\"request_id,omitempty\""];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_request_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->request_id().data(), static_cast<int>(this->request_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "carml.org.predictor.PredictionOptions.request_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 feature_limit = 2 [(.gogoproto.moretags) = "yaml:\"feature_limit,omitempty\""];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &feature_limit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:carml.org.predictor.PredictionOptions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:carml.org.predictor.PredictionOptions)
  return false;
#undef DO_
}

void PredictionOptions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:carml.org.predictor.PredictionOptions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string request_id = 1 [(.gogoproto.customname) = "RequestID", (.gogoproto.jsontag) = "request_id,omitempty", (.gogoproto.moretags) = "yaml:\"request_id,omitempty\""];
  if (this->request_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->request_id().data(), static_cast<int>(this->request_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "carml.org.predictor.PredictionOptions.request_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->request_id(), output);
  }

  // int32 feature_limit = 2 [(.gogoproto.moretags) = "yaml:\"feature_limit,omitempty\""];
  if (this->feature_limit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->feature_limit(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:carml.org.predictor.PredictionOptions)
}

::google::protobuf::uint8* PredictionOptions::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:carml.org.predictor.PredictionOptions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string request_id = 1 [(.gogoproto.customname) = "RequestID", (.gogoproto.jsontag) = "request_id,omitempty", (.gogoproto.moretags) = "yaml:\"request_id,omitempty\""];
  if (this->request_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->request_id().data(), static_cast<int>(this->request_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "carml.org.predictor.PredictionOptions.request_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->request_id(), target);
  }

  // int32 feature_limit = 2 [(.gogoproto.moretags) = "yaml:\"feature_limit,omitempty\""];
  if (this->feature_limit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->feature_limit(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:carml.org.predictor.PredictionOptions)
  return target;
}

size_t PredictionOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:carml.org.predictor.PredictionOptions)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string request_id = 1 [(.gogoproto.customname) = "RequestID", (.gogoproto.jsontag) = "request_id,omitempty", (.gogoproto.moretags) = "yaml:\"request_id,omitempty\""];
  if (this->request_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->request_id());
  }

  // int32 feature_limit = 2 [(.gogoproto.moretags) = "yaml:\"feature_limit,omitempty\""];
  if (this->feature_limit() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->feature_limit());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PredictionOptions::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:carml.org.predictor.PredictionOptions)
  GOOGLE_DCHECK_NE(&from, this);
  const PredictionOptions* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PredictionOptions>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:carml.org.predictor.PredictionOptions)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:carml.org.predictor.PredictionOptions)
    MergeFrom(*source);
  }
}

void PredictionOptions::MergeFrom(const PredictionOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:carml.org.predictor.PredictionOptions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.request_id().size() > 0) {

    request_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_id_);
  }
  if (from.feature_limit() != 0) {
    set_feature_limit(from.feature_limit());
  }
}

void PredictionOptions::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:carml.org.predictor.PredictionOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PredictionOptions::CopyFrom(const PredictionOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:carml.org.predictor.PredictionOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PredictionOptions::IsInitialized() const {
  return true;
}

void PredictionOptions::Swap(PredictionOptions* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PredictionOptions::InternalSwap(PredictionOptions* other) {
  using std::swap;
  request_id_.Swap(&other->request_id_);
  swap(feature_limit_, other->feature_limit_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PredictionOptions::GetMetadata() const {
  protobuf_predictor_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_predictor_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PredictionOptions

// string request_id = 1 [(.gogoproto.customname) = "RequestID", (.gogoproto.jsontag) = "request_id,omitempty", (.gogoproto.moretags) = "yaml:\"request_id,omitempty\""];
void PredictionOptions::clear_request_id() {
  request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& PredictionOptions::request_id() const {
  // @@protoc_insertion_point(field_get:carml.org.predictor.PredictionOptions.request_id)
  return request_id_.GetNoArena();
}
void PredictionOptions::set_request_id(const ::std::string& value) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:carml.org.predictor.PredictionOptions.request_id)
}
#if LANG_CXX11
void PredictionOptions::set_request_id(::std::string&& value) {
  
  request_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:carml.org.predictor.PredictionOptions.request_id)
}
#endif
void PredictionOptions::set_request_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:carml.org.predictor.PredictionOptions.request_id)
}
void PredictionOptions::set_request_id(const char* value, size_t size) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:carml.org.predictor.PredictionOptions.request_id)
}
::std::string* PredictionOptions::mutable_request_id() {
  
  // @@protoc_insertion_point(field_mutable:carml.org.predictor.PredictionOptions.request_id)
  return request_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PredictionOptions::release_request_id() {
  // @@protoc_insertion_point(field_release:carml.org.predictor.PredictionOptions.request_id)
  
  return request_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PredictionOptions::set_allocated_request_id(::std::string* request_id) {
  if (request_id != NULL) {
    
  } else {
    
  }
  request_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), request_id);
  // @@protoc_insertion_point(field_set_allocated:carml.org.predictor.PredictionOptions.request_id)
}

// int32 feature_limit = 2 [(.gogoproto.moretags) = "yaml:\"feature_limit,omitempty\""];
void PredictionOptions::clear_feature_limit() {
  feature_limit_ = 0;
}
::google::protobuf::int32 PredictionOptions::feature_limit() const {
  // @@protoc_insertion_point(field_get:carml.org.predictor.PredictionOptions.feature_limit)
  return feature_limit_;
}
void PredictionOptions::set_feature_limit(::google::protobuf::int32 value) {
  
  feature_limit_ = value;
  // @@protoc_insertion_point(field_set:carml.org.predictor.PredictionOptions.feature_limit)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Predictor::kIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Predictor::Predictor()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_predictor_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:carml.org.predictor.Predictor)
}
Predictor::Predictor(const Predictor& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.id().size() > 0) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  // @@protoc_insertion_point(copy_constructor:carml.org.predictor.Predictor)
}

void Predictor::SharedCtor() {
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

Predictor::~Predictor() {
  // @@protoc_insertion_point(destructor:carml.org.predictor.Predictor)
  SharedDtor();
}

void Predictor::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Predictor::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Predictor::descriptor() {
  protobuf_predictor_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_predictor_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Predictor& Predictor::default_instance() {
  protobuf_predictor_2eproto::InitDefaults();
  return *internal_default_instance();
}

Predictor* Predictor::New(::google::protobuf::Arena* arena) const {
  Predictor* n = new Predictor;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Predictor::Clear() {
// @@protoc_insertion_point(message_clear_start:carml.org.predictor.Predictor)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool Predictor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:carml.org.predictor.Predictor)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string id = 1 [(.gogoproto.customname) = "ID", (.gogoproto.jsontag) = "id,omitempty", (.gogoproto.moretags) = "yaml:\"id,omitempty\""];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), static_cast<int>(this->id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "carml.org.predictor.Predictor.id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:carml.org.predictor.Predictor)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:carml.org.predictor.Predictor)
  return false;
#undef DO_
}

void Predictor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:carml.org.predictor.Predictor)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1 [(.gogoproto.customname) = "ID", (.gogoproto.jsontag) = "id,omitempty", (.gogoproto.moretags) = "yaml:\"id,omitempty\""];
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "carml.org.predictor.Predictor.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:carml.org.predictor.Predictor)
}

::google::protobuf::uint8* Predictor::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:carml.org.predictor.Predictor)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1 [(.gogoproto.customname) = "ID", (.gogoproto.jsontag) = "id,omitempty", (.gogoproto.moretags) = "yaml:\"id,omitempty\""];
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "carml.org.predictor.Predictor.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:carml.org.predictor.Predictor)
  return target;
}

size_t Predictor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:carml.org.predictor.Predictor)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string id = 1 [(.gogoproto.customname) = "ID", (.gogoproto.jsontag) = "id,omitempty", (.gogoproto.moretags) = "yaml:\"id,omitempty\""];
  if (this->id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Predictor::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:carml.org.predictor.Predictor)
  GOOGLE_DCHECK_NE(&from, this);
  const Predictor* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Predictor>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:carml.org.predictor.Predictor)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:carml.org.predictor.Predictor)
    MergeFrom(*source);
  }
}

void Predictor::MergeFrom(const Predictor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:carml.org.predictor.Predictor)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
}

void Predictor::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:carml.org.predictor.Predictor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Predictor::CopyFrom(const Predictor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:carml.org.predictor.Predictor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Predictor::IsInitialized() const {
  return true;
}

void Predictor::Swap(Predictor* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Predictor::InternalSwap(Predictor* other) {
  using std::swap;
  id_.Swap(&other->id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Predictor::GetMetadata() const {
  protobuf_predictor_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_predictor_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Predictor

// string id = 1 [(.gogoproto.customname) = "ID", (.gogoproto.jsontag) = "id,omitempty", (.gogoproto.moretags) = "yaml:\"id,omitempty\""];
void Predictor::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Predictor::id() const {
  // @@protoc_insertion_point(field_get:carml.org.predictor.Predictor.id)
  return id_.GetNoArena();
}
void Predictor::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:carml.org.predictor.Predictor.id)
}
#if LANG_CXX11
void Predictor::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:carml.org.predictor.Predictor.id)
}
#endif
void Predictor::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:carml.org.predictor.Predictor.id)
}
void Predictor::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:carml.org.predictor.Predictor.id)
}
::std::string* Predictor::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:carml.org.predictor.Predictor.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Predictor::release_id() {
  // @@protoc_insertion_point(field_release:carml.org.predictor.Predictor.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Predictor::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:carml.org.predictor.Predictor.id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int URLsRequest_URL::kIdFieldNumber;
const int URLsRequest_URL::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

URLsRequest_URL::URLsRequest_URL()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_predictor_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:carml.org.predictor.URLsRequest.URL)
}
URLsRequest_URL::URLsRequest_URL(const URLsRequest_URL& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.id().size() > 0) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.data().size() > 0) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  // @@protoc_insertion_point(copy_constructor:carml.org.predictor.URLsRequest.URL)
}

void URLsRequest_URL::SharedCtor() {
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

URLsRequest_URL::~URLsRequest_URL() {
  // @@protoc_insertion_point(destructor:carml.org.predictor.URLsRequest.URL)
  SharedDtor();
}

void URLsRequest_URL::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void URLsRequest_URL::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* URLsRequest_URL::descriptor() {
  protobuf_predictor_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_predictor_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const URLsRequest_URL& URLsRequest_URL::default_instance() {
  protobuf_predictor_2eproto::InitDefaults();
  return *internal_default_instance();
}

URLsRequest_URL* URLsRequest_URL::New(::google::protobuf::Arena* arena) const {
  URLsRequest_URL* n = new URLsRequest_URL;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void URLsRequest_URL::Clear() {
// @@protoc_insertion_point(message_clear_start:carml.org.predictor.URLsRequest.URL)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool URLsRequest_URL::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:carml.org.predictor.URLsRequest.URL)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string id = 1 [(.gogoproto.customname) = "ID", (.gogoproto.jsontag) = "id,omitempty", (.gogoproto.moretags) = "yaml:\"id,omitempty\""];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), static_cast<int>(this->id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "carml.org.predictor.URLsRequest.URL.id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string data = 2 [(.gogoproto.moretags) = "yaml:\"data,omitempty\""];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_data()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->data().data(), static_cast<int>(this->data().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "carml.org.predictor.URLsRequest.URL.data"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:carml.org.predictor.URLsRequest.URL)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:carml.org.predictor.URLsRequest.URL)
  return false;
#undef DO_
}

void URLsRequest_URL::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:carml.org.predictor.URLsRequest.URL)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1 [(.gogoproto.customname) = "ID", (.gogoproto.jsontag) = "id,omitempty", (.gogoproto.moretags) = "yaml:\"id,omitempty\""];
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "carml.org.predictor.URLsRequest.URL.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // string data = 2 [(.gogoproto.moretags) = "yaml:\"data,omitempty\""];
  if (this->data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->data().data(), static_cast<int>(this->data().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "carml.org.predictor.URLsRequest.URL.data");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->data(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:carml.org.predictor.URLsRequest.URL)
}

::google::protobuf::uint8* URLsRequest_URL::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:carml.org.predictor.URLsRequest.URL)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1 [(.gogoproto.customname) = "ID", (.gogoproto.jsontag) = "id,omitempty", (.gogoproto.moretags) = "yaml:\"id,omitempty\""];
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "carml.org.predictor.URLsRequest.URL.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // string data = 2 [(.gogoproto.moretags) = "yaml:\"data,omitempty\""];
  if (this->data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->data().data(), static_cast<int>(this->data().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "carml.org.predictor.URLsRequest.URL.data");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->data(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:carml.org.predictor.URLsRequest.URL)
  return target;
}

size_t URLsRequest_URL::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:carml.org.predictor.URLsRequest.URL)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string id = 1 [(.gogoproto.customname) = "ID", (.gogoproto.jsontag) = "id,omitempty", (.gogoproto.moretags) = "yaml:\"id,omitempty\""];
  if (this->id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  // string data = 2 [(.gogoproto.moretags) = "yaml:\"data,omitempty\""];
  if (this->data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->data());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void URLsRequest_URL::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:carml.org.predictor.URLsRequest.URL)
  GOOGLE_DCHECK_NE(&from, this);
  const URLsRequest_URL* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const URLsRequest_URL>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:carml.org.predictor.URLsRequest.URL)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:carml.org.predictor.URLsRequest.URL)
    MergeFrom(*source);
  }
}

void URLsRequest_URL::MergeFrom(const URLsRequest_URL& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:carml.org.predictor.URLsRequest.URL)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
}

void URLsRequest_URL::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:carml.org.predictor.URLsRequest.URL)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void URLsRequest_URL::CopyFrom(const URLsRequest_URL& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:carml.org.predictor.URLsRequest.URL)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool URLsRequest_URL::IsInitialized() const {
  return true;
}

void URLsRequest_URL::Swap(URLsRequest_URL* other) {
  if (other == this) return;
  InternalSwap(other);
}
void URLsRequest_URL::InternalSwap(URLsRequest_URL* other) {
  using std::swap;
  id_.Swap(&other->id_);
  data_.Swap(&other->data_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata URLsRequest_URL::GetMetadata() const {
  protobuf_predictor_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_predictor_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// URLsRequest_URL

// string id = 1 [(.gogoproto.customname) = "ID", (.gogoproto.jsontag) = "id,omitempty", (.gogoproto.moretags) = "yaml:\"id,omitempty\""];
void URLsRequest_URL::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& URLsRequest_URL::id() const {
  // @@protoc_insertion_point(field_get:carml.org.predictor.URLsRequest.URL.id)
  return id_.GetNoArena();
}
void URLsRequest_URL::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:carml.org.predictor.URLsRequest.URL.id)
}
#if LANG_CXX11
void URLsRequest_URL::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:carml.org.predictor.URLsRequest.URL.id)
}
#endif
void URLsRequest_URL::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:carml.org.predictor.URLsRequest.URL.id)
}
void URLsRequest_URL::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:carml.org.predictor.URLsRequest.URL.id)
}
::std::string* URLsRequest_URL::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:carml.org.predictor.URLsRequest.URL.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* URLsRequest_URL::release_id() {
  // @@protoc_insertion_point(field_release:carml.org.predictor.URLsRequest.URL.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void URLsRequest_URL::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:carml.org.predictor.URLsRequest.URL.id)
}

// string data = 2 [(.gogoproto.moretags) = "yaml:\"data,omitempty\""];
void URLsRequest_URL::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& URLsRequest_URL::data() const {
  // @@protoc_insertion_point(field_get:carml.org.predictor.URLsRequest.URL.data)
  return data_.GetNoArena();
}
void URLsRequest_URL::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:carml.org.predictor.URLsRequest.URL.data)
}
#if LANG_CXX11
void URLsRequest_URL::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:carml.org.predictor.URLsRequest.URL.data)
}
#endif
void URLsRequest_URL::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:carml.org.predictor.URLsRequest.URL.data)
}
void URLsRequest_URL::set_data(const char* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:carml.org.predictor.URLsRequest.URL.data)
}
::std::string* URLsRequest_URL::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:carml.org.predictor.URLsRequest.URL.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* URLsRequest_URL::release_data() {
  // @@protoc_insertion_point(field_release:carml.org.predictor.URLsRequest.URL.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void URLsRequest_URL::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:carml.org.predictor.URLsRequest.URL.data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int URLsRequest::kPredictorFieldNumber;
const int URLsRequest::kUrlsFieldNumber;
const int URLsRequest::kOptionsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

URLsRequest::URLsRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_predictor_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:carml.org.predictor.URLsRequest)
}
URLsRequest::URLsRequest(const URLsRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      urls_(from.urls_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_predictor()) {
    predictor_ = new ::carml::org::predictor::Predictor(*from.predictor_);
  } else {
    predictor_ = NULL;
  }
  if (from.has_options()) {
    options_ = new ::carml::org::predictor::PredictionOptions(*from.options_);
  } else {
    options_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:carml.org.predictor.URLsRequest)
}

void URLsRequest::SharedCtor() {
  ::memset(&predictor_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&options_) -
      reinterpret_cast<char*>(&predictor_)) + sizeof(options_));
  _cached_size_ = 0;
}

URLsRequest::~URLsRequest() {
  // @@protoc_insertion_point(destructor:carml.org.predictor.URLsRequest)
  SharedDtor();
}

void URLsRequest::SharedDtor() {
  if (this != internal_default_instance()) delete predictor_;
  if (this != internal_default_instance()) delete options_;
}

void URLsRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* URLsRequest::descriptor() {
  protobuf_predictor_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_predictor_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const URLsRequest& URLsRequest::default_instance() {
  protobuf_predictor_2eproto::InitDefaults();
  return *internal_default_instance();
}

URLsRequest* URLsRequest::New(::google::protobuf::Arena* arena) const {
  URLsRequest* n = new URLsRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void URLsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:carml.org.predictor.URLsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  urls_.Clear();
  if (GetArenaNoVirtual() == NULL && predictor_ != NULL) {
    delete predictor_;
  }
  predictor_ = NULL;
  if (GetArenaNoVirtual() == NULL && options_ != NULL) {
    delete options_;
  }
  options_ = NULL;
  _internal_metadata_.Clear();
}

bool URLsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:carml.org.predictor.URLsRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .carml.org.predictor.Predictor predictor = 1 [(.gogoproto.moretags) = "yaml:\"predictor,omitempty\""];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_predictor()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .carml.org.predictor.URLsRequest.URL urls = 2 [(.gogoproto.moretags) = "yaml:\"urls,omitempty\""];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_urls()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .carml.org.predictor.PredictionOptions options = 3 [(.gogoproto.moretags) = "yaml:\"options,omitempty\""];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_options()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:carml.org.predictor.URLsRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:carml.org.predictor.URLsRequest)
  return false;
#undef DO_
}

void URLsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:carml.org.predictor.URLsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .carml.org.predictor.Predictor predictor = 1 [(.gogoproto.moretags) = "yaml:\"predictor,omitempty\""];
  if (this->has_predictor()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->predictor_, output);
  }

  // repeated .carml.org.predictor.URLsRequest.URL urls = 2 [(.gogoproto.moretags) = "yaml:\"urls,omitempty\""];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->urls_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->urls(static_cast<int>(i)), output);
  }

  // .carml.org.predictor.PredictionOptions options = 3 [(.gogoproto.moretags) = "yaml:\"options,omitempty\""];
  if (this->has_options()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->options_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:carml.org.predictor.URLsRequest)
}

::google::protobuf::uint8* URLsRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:carml.org.predictor.URLsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .carml.org.predictor.Predictor predictor = 1 [(.gogoproto.moretags) = "yaml:\"predictor,omitempty\""];
  if (this->has_predictor()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->predictor_, deterministic, target);
  }

  // repeated .carml.org.predictor.URLsRequest.URL urls = 2 [(.gogoproto.moretags) = "yaml:\"urls,omitempty\""];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->urls_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->urls(static_cast<int>(i)), deterministic, target);
  }

  // .carml.org.predictor.PredictionOptions options = 3 [(.gogoproto.moretags) = "yaml:\"options,omitempty\""];
  if (this->has_options()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->options_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:carml.org.predictor.URLsRequest)
  return target;
}

size_t URLsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:carml.org.predictor.URLsRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .carml.org.predictor.URLsRequest.URL urls = 2 [(.gogoproto.moretags) = "yaml:\"urls,omitempty\""];
  {
    unsigned int count = static_cast<unsigned int>(this->urls_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->urls(static_cast<int>(i)));
    }
  }

  // .carml.org.predictor.Predictor predictor = 1 [(.gogoproto.moretags) = "yaml:\"predictor,omitempty\""];
  if (this->has_predictor()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->predictor_);
  }

  // .carml.org.predictor.PredictionOptions options = 3 [(.gogoproto.moretags) = "yaml:\"options,omitempty\""];
  if (this->has_options()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->options_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void URLsRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:carml.org.predictor.URLsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const URLsRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const URLsRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:carml.org.predictor.URLsRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:carml.org.predictor.URLsRequest)
    MergeFrom(*source);
  }
}

void URLsRequest::MergeFrom(const URLsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:carml.org.predictor.URLsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  urls_.MergeFrom(from.urls_);
  if (from.has_predictor()) {
    mutable_predictor()->::carml::org::predictor::Predictor::MergeFrom(from.predictor());
  }
  if (from.has_options()) {
    mutable_options()->::carml::org::predictor::PredictionOptions::MergeFrom(from.options());
  }
}

void URLsRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:carml.org.predictor.URLsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void URLsRequest::CopyFrom(const URLsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:carml.org.predictor.URLsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool URLsRequest::IsInitialized() const {
  return true;
}

void URLsRequest::Swap(URLsRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void URLsRequest::InternalSwap(URLsRequest* other) {
  using std::swap;
  urls_.InternalSwap(&other->urls_);
  swap(predictor_, other->predictor_);
  swap(options_, other->options_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata URLsRequest::GetMetadata() const {
  protobuf_predictor_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_predictor_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// URLsRequest

// .carml.org.predictor.Predictor predictor = 1 [(.gogoproto.moretags) = "yaml:\"predictor,omitempty\""];
bool URLsRequest::has_predictor() const {
  return this != internal_default_instance() && predictor_ != NULL;
}
void URLsRequest::clear_predictor() {
  if (GetArenaNoVirtual() == NULL && predictor_ != NULL) delete predictor_;
  predictor_ = NULL;
}
const ::carml::org::predictor::Predictor& URLsRequest::predictor() const {
  const ::carml::org::predictor::Predictor* p = predictor_;
  // @@protoc_insertion_point(field_get:carml.org.predictor.URLsRequest.predictor)
  return p != NULL ? *p : *reinterpret_cast<const ::carml::org::predictor::Predictor*>(
      &::carml::org::predictor::_Predictor_default_instance_);
}
::carml::org::predictor::Predictor* URLsRequest::mutable_predictor() {
  
  if (predictor_ == NULL) {
    predictor_ = new ::carml::org::predictor::Predictor;
  }
  // @@protoc_insertion_point(field_mutable:carml.org.predictor.URLsRequest.predictor)
  return predictor_;
}
::carml::org::predictor::Predictor* URLsRequest::release_predictor() {
  // @@protoc_insertion_point(field_release:carml.org.predictor.URLsRequest.predictor)
  
  ::carml::org::predictor::Predictor* temp = predictor_;
  predictor_ = NULL;
  return temp;
}
void URLsRequest::set_allocated_predictor(::carml::org::predictor::Predictor* predictor) {
  delete predictor_;
  predictor_ = predictor;
  if (predictor) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:carml.org.predictor.URLsRequest.predictor)
}

// repeated .carml.org.predictor.URLsRequest.URL urls = 2 [(.gogoproto.moretags) = "yaml:\"urls,omitempty\""];
int URLsRequest::urls_size() const {
  return urls_.size();
}
void URLsRequest::clear_urls() {
  urls_.Clear();
}
const ::carml::org::predictor::URLsRequest_URL& URLsRequest::urls(int index) const {
  // @@protoc_insertion_point(field_get:carml.org.predictor.URLsRequest.urls)
  return urls_.Get(index);
}
::carml::org::predictor::URLsRequest_URL* URLsRequest::mutable_urls(int index) {
  // @@protoc_insertion_point(field_mutable:carml.org.predictor.URLsRequest.urls)
  return urls_.Mutable(index);
}
::carml::org::predictor::URLsRequest_URL* URLsRequest::add_urls() {
  // @@protoc_insertion_point(field_add:carml.org.predictor.URLsRequest.urls)
  return urls_.Add();
}
::google::protobuf::RepeatedPtrField< ::carml::org::predictor::URLsRequest_URL >*
URLsRequest::mutable_urls() {
  // @@protoc_insertion_point(field_mutable_list:carml.org.predictor.URLsRequest.urls)
  return &urls_;
}
const ::google::protobuf::RepeatedPtrField< ::carml::org::predictor::URLsRequest_URL >&
URLsRequest::urls() const {
  // @@protoc_insertion_point(field_list:carml.org.predictor.URLsRequest.urls)
  return urls_;
}

// .carml.org.predictor.PredictionOptions options = 3 [(.gogoproto.moretags) = "yaml:\"options,omitempty\""];
bool URLsRequest::has_options() const {
  return this != internal_default_instance() && options_ != NULL;
}
void URLsRequest::clear_options() {
  if (GetArenaNoVirtual() == NULL && options_ != NULL) delete options_;
  options_ = NULL;
}
const ::carml::org::predictor::PredictionOptions& URLsRequest::options() const {
  const ::carml::org::predictor::PredictionOptions* p = options_;
  // @@protoc_insertion_point(field_get:carml.org.predictor.URLsRequest.options)
  return p != NULL ? *p : *reinterpret_cast<const ::carml::org::predictor::PredictionOptions*>(
      &::carml::org::predictor::_PredictionOptions_default_instance_);
}
::carml::org::predictor::PredictionOptions* URLsRequest::mutable_options() {
  
  if (options_ == NULL) {
    options_ = new ::carml::org::predictor::PredictionOptions;
  }
  // @@protoc_insertion_point(field_mutable:carml.org.predictor.URLsRequest.options)
  return options_;
}
::carml::org::predictor::PredictionOptions* URLsRequest::release_options() {
  // @@protoc_insertion_point(field_release:carml.org.predictor.URLsRequest.options)
  
  ::carml::org::predictor::PredictionOptions* temp = options_;
  options_ = NULL;
  return temp;
}
void URLsRequest::set_allocated_options(::carml::org::predictor::PredictionOptions* options) {
  delete options_;
  options_ = options;
  if (options) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:carml.org.predictor.URLsRequest.options)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ImagesRequest_Image::kIdFieldNumber;
const int ImagesRequest_Image::kDataFieldNumber;
const int ImagesRequest_Image::kPreprocessedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ImagesRequest_Image::ImagesRequest_Image()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_predictor_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:carml.org.predictor.ImagesRequest.Image)
}
ImagesRequest_Image::ImagesRequest_Image(const ImagesRequest_Image& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.id().size() > 0) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.data().size() > 0) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  preprocessed_ = from.preprocessed_;
  // @@protoc_insertion_point(copy_constructor:carml.org.predictor.ImagesRequest.Image)
}

void ImagesRequest_Image::SharedCtor() {
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  preprocessed_ = false;
  _cached_size_ = 0;
}

ImagesRequest_Image::~ImagesRequest_Image() {
  // @@protoc_insertion_point(destructor:carml.org.predictor.ImagesRequest.Image)
  SharedDtor();
}

void ImagesRequest_Image::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ImagesRequest_Image::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ImagesRequest_Image::descriptor() {
  protobuf_predictor_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_predictor_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ImagesRequest_Image& ImagesRequest_Image::default_instance() {
  protobuf_predictor_2eproto::InitDefaults();
  return *internal_default_instance();
}

ImagesRequest_Image* ImagesRequest_Image::New(::google::protobuf::Arena* arena) const {
  ImagesRequest_Image* n = new ImagesRequest_Image;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ImagesRequest_Image::Clear() {
// @@protoc_insertion_point(message_clear_start:carml.org.predictor.ImagesRequest.Image)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  preprocessed_ = false;
  _internal_metadata_.Clear();
}

bool ImagesRequest_Image::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:carml.org.predictor.ImagesRequest.Image)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string id = 1 [(.gogoproto.customname) = "ID", (.gogoproto.jsontag) = "id,omitempty", (.gogoproto.moretags) = "yaml:\"id,omitempty\""];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), static_cast<int>(this->id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "carml.org.predictor.ImagesRequest.Image.id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes data = 2 [(.gogoproto.moretags) = "yaml:\"data,omitempty\""];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool preprocessed = 3 [(.gogoproto.moretags) = "yaml:\"preprocessed,omitempty\""];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &preprocessed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:carml.org.predictor.ImagesRequest.Image)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:carml.org.predictor.ImagesRequest.Image)
  return false;
#undef DO_
}

void ImagesRequest_Image::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:carml.org.predictor.ImagesRequest.Image)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1 [(.gogoproto.customname) = "ID", (.gogoproto.jsontag) = "id,omitempty", (.gogoproto.moretags) = "yaml:\"id,omitempty\""];
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "carml.org.predictor.ImagesRequest.Image.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // bytes data = 2 [(.gogoproto.moretags) = "yaml:\"data,omitempty\""];
  if (this->data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->data(), output);
  }

  // bool preprocessed = 3 [(.gogoproto.moretags) = "yaml:\"preprocessed,omitempty\""];
  if (this->preprocessed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->preprocessed(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:carml.org.predictor.ImagesRequest.Image)
}

::google::protobuf::uint8* ImagesRequest_Image::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:carml.org.predictor.ImagesRequest.Image)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1 [(.gogoproto.customname) = "ID", (.gogoproto.jsontag) = "id,omitempty", (.gogoproto.moretags) = "yaml:\"id,omitempty\""];
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "carml.org.predictor.ImagesRequest.Image.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // bytes data = 2 [(.gogoproto.moretags) = "yaml:\"data,omitempty\""];
  if (this->data().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->data(), target);
  }

  // bool preprocessed = 3 [(.gogoproto.moretags) = "yaml:\"preprocessed,omitempty\""];
  if (this->preprocessed() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->preprocessed(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:carml.org.predictor.ImagesRequest.Image)
  return target;
}

size_t ImagesRequest_Image::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:carml.org.predictor.ImagesRequest.Image)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string id = 1 [(.gogoproto.customname) = "ID", (.gogoproto.jsontag) = "id,omitempty", (.gogoproto.moretags) = "yaml:\"id,omitempty\""];
  if (this->id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  // bytes data = 2 [(.gogoproto.moretags) = "yaml:\"data,omitempty\""];
  if (this->data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());
  }

  // bool preprocessed = 3 [(.gogoproto.moretags) = "yaml:\"preprocessed,omitempty\""];
  if (this->preprocessed() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ImagesRequest_Image::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:carml.org.predictor.ImagesRequest.Image)
  GOOGLE_DCHECK_NE(&from, this);
  const ImagesRequest_Image* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ImagesRequest_Image>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:carml.org.predictor.ImagesRequest.Image)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:carml.org.predictor.ImagesRequest.Image)
    MergeFrom(*source);
  }
}

void ImagesRequest_Image::MergeFrom(const ImagesRequest_Image& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:carml.org.predictor.ImagesRequest.Image)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  if (from.preprocessed() != 0) {
    set_preprocessed(from.preprocessed());
  }
}

void ImagesRequest_Image::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:carml.org.predictor.ImagesRequest.Image)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImagesRequest_Image::CopyFrom(const ImagesRequest_Image& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:carml.org.predictor.ImagesRequest.Image)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImagesRequest_Image::IsInitialized() const {
  return true;
}

void ImagesRequest_Image::Swap(ImagesRequest_Image* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ImagesRequest_Image::InternalSwap(ImagesRequest_Image* other) {
  using std::swap;
  id_.Swap(&other->id_);
  data_.Swap(&other->data_);
  swap(preprocessed_, other->preprocessed_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ImagesRequest_Image::GetMetadata() const {
  protobuf_predictor_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_predictor_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ImagesRequest_Image

// string id = 1 [(.gogoproto.customname) = "ID", (.gogoproto.jsontag) = "id,omitempty", (.gogoproto.moretags) = "yaml:\"id,omitempty\""];
void ImagesRequest_Image::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ImagesRequest_Image::id() const {
  // @@protoc_insertion_point(field_get:carml.org.predictor.ImagesRequest.Image.id)
  return id_.GetNoArena();
}
void ImagesRequest_Image::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:carml.org.predictor.ImagesRequest.Image.id)
}
#if LANG_CXX11
void ImagesRequest_Image::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:carml.org.predictor.ImagesRequest.Image.id)
}
#endif
void ImagesRequest_Image::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:carml.org.predictor.ImagesRequest.Image.id)
}
void ImagesRequest_Image::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:carml.org.predictor.ImagesRequest.Image.id)
}
::std::string* ImagesRequest_Image::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:carml.org.predictor.ImagesRequest.Image.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ImagesRequest_Image::release_id() {
  // @@protoc_insertion_point(field_release:carml.org.predictor.ImagesRequest.Image.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ImagesRequest_Image::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:carml.org.predictor.ImagesRequest.Image.id)
}

// bytes data = 2 [(.gogoproto.moretags) = "yaml:\"data,omitempty\""];
void ImagesRequest_Image::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ImagesRequest_Image::data() const {
  // @@protoc_insertion_point(field_get:carml.org.predictor.ImagesRequest.Image.data)
  return data_.GetNoArena();
}
void ImagesRequest_Image::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:carml.org.predictor.ImagesRequest.Image.data)
}
#if LANG_CXX11
void ImagesRequest_Image::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:carml.org.predictor.ImagesRequest.Image.data)
}
#endif
void ImagesRequest_Image::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:carml.org.predictor.ImagesRequest.Image.data)
}
void ImagesRequest_Image::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:carml.org.predictor.ImagesRequest.Image.data)
}
::std::string* ImagesRequest_Image::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:carml.org.predictor.ImagesRequest.Image.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ImagesRequest_Image::release_data() {
  // @@protoc_insertion_point(field_release:carml.org.predictor.ImagesRequest.Image.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ImagesRequest_Image::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:carml.org.predictor.ImagesRequest.Image.data)
}

// bool preprocessed = 3 [(.gogoproto.moretags) = "yaml:\"preprocessed,omitempty\""];
void ImagesRequest_Image::clear_preprocessed() {
  preprocessed_ = false;
}
bool ImagesRequest_Image::preprocessed() const {
  // @@protoc_insertion_point(field_get:carml.org.predictor.ImagesRequest.Image.preprocessed)
  return preprocessed_;
}
void ImagesRequest_Image::set_preprocessed(bool value) {
  
  preprocessed_ = value;
  // @@protoc_insertion_point(field_set:carml.org.predictor.ImagesRequest.Image.preprocessed)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ImagesRequest::kPredictorFieldNumber;
const int ImagesRequest::kImagesFieldNumber;
const int ImagesRequest::kOptionsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ImagesRequest::ImagesRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_predictor_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:carml.org.predictor.ImagesRequest)
}
ImagesRequest::ImagesRequest(const ImagesRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      images_(from.images_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_predictor()) {
    predictor_ = new ::carml::org::predictor::Predictor(*from.predictor_);
  } else {
    predictor_ = NULL;
  }
  if (from.has_options()) {
    options_ = new ::carml::org::predictor::PredictionOptions(*from.options_);
  } else {
    options_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:carml.org.predictor.ImagesRequest)
}

void ImagesRequest::SharedCtor() {
  ::memset(&predictor_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&options_) -
      reinterpret_cast<char*>(&predictor_)) + sizeof(options_));
  _cached_size_ = 0;
}

ImagesRequest::~ImagesRequest() {
  // @@protoc_insertion_point(destructor:carml.org.predictor.ImagesRequest)
  SharedDtor();
}

void ImagesRequest::SharedDtor() {
  if (this != internal_default_instance()) delete predictor_;
  if (this != internal_default_instance()) delete options_;
}

void ImagesRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ImagesRequest::descriptor() {
  protobuf_predictor_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_predictor_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ImagesRequest& ImagesRequest::default_instance() {
  protobuf_predictor_2eproto::InitDefaults();
  return *internal_default_instance();
}

ImagesRequest* ImagesRequest::New(::google::protobuf::Arena* arena) const {
  ImagesRequest* n = new ImagesRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ImagesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:carml.org.predictor.ImagesRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  images_.Clear();
  if (GetArenaNoVirtual() == NULL && predictor_ != NULL) {
    delete predictor_;
  }
  predictor_ = NULL;
  if (GetArenaNoVirtual() == NULL && options_ != NULL) {
    delete options_;
  }
  options_ = NULL;
  _internal_metadata_.Clear();
}

bool ImagesRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:carml.org.predictor.ImagesRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .carml.org.predictor.Predictor predictor = 1 [(.gogoproto.moretags) = "yaml:\"predictor,omitempty\""];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_predictor()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .carml.org.predictor.ImagesRequest.Image images = 2 [(.gogoproto.moretags) = "yaml:\"images,omitempty\""];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_images()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .carml.org.predictor.PredictionOptions options = 3 [(.gogoproto.moretags) = "yaml:\"options,omitempty\""];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_options()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:carml.org.predictor.ImagesRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:carml.org.predictor.ImagesRequest)
  return false;
#undef DO_
}

void ImagesRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:carml.org.predictor.ImagesRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .carml.org.predictor.Predictor predictor = 1 [(.gogoproto.moretags) = "yaml:\"predictor,omitempty\""];
  if (this->has_predictor()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->predictor_, output);
  }

  // repeated .carml.org.predictor.ImagesRequest.Image images = 2 [(.gogoproto.moretags) = "yaml:\"images,omitempty\""];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->images_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->images(static_cast<int>(i)), output);
  }

  // .carml.org.predictor.PredictionOptions options = 3 [(.gogoproto.moretags) = "yaml:\"options,omitempty\""];
  if (this->has_options()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->options_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:carml.org.predictor.ImagesRequest)
}

::google::protobuf::uint8* ImagesRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:carml.org.predictor.ImagesRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .carml.org.predictor.Predictor predictor = 1 [(.gogoproto.moretags) = "yaml:\"predictor,omitempty\""];
  if (this->has_predictor()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->predictor_, deterministic, target);
  }

  // repeated .carml.org.predictor.ImagesRequest.Image images = 2 [(.gogoproto.moretags) = "yaml:\"images,omitempty\""];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->images_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->images(static_cast<int>(i)), deterministic, target);
  }

  // .carml.org.predictor.PredictionOptions options = 3 [(.gogoproto.moretags) = "yaml:\"options,omitempty\""];
  if (this->has_options()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->options_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:carml.org.predictor.ImagesRequest)
  return target;
}

size_t ImagesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:carml.org.predictor.ImagesRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .carml.org.predictor.ImagesRequest.Image images = 2 [(.gogoproto.moretags) = "yaml:\"images,omitempty\""];
  {
    unsigned int count = static_cast<unsigned int>(this->images_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->images(static_cast<int>(i)));
    }
  }

  // .carml.org.predictor.Predictor predictor = 1 [(.gogoproto.moretags) = "yaml:\"predictor,omitempty\""];
  if (this->has_predictor()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->predictor_);
  }

  // .carml.org.predictor.PredictionOptions options = 3 [(.gogoproto.moretags) = "yaml:\"options,omitempty\""];
  if (this->has_options()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->options_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ImagesRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:carml.org.predictor.ImagesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ImagesRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ImagesRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:carml.org.predictor.ImagesRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:carml.org.predictor.ImagesRequest)
    MergeFrom(*source);
  }
}

void ImagesRequest::MergeFrom(const ImagesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:carml.org.predictor.ImagesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  images_.MergeFrom(from.images_);
  if (from.has_predictor()) {
    mutable_predictor()->::carml::org::predictor::Predictor::MergeFrom(from.predictor());
  }
  if (from.has_options()) {
    mutable_options()->::carml::org::predictor::PredictionOptions::MergeFrom(from.options());
  }
}

void ImagesRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:carml.org.predictor.ImagesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImagesRequest::CopyFrom(const ImagesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:carml.org.predictor.ImagesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImagesRequest::IsInitialized() const {
  return true;
}

void ImagesRequest::Swap(ImagesRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ImagesRequest::InternalSwap(ImagesRequest* other) {
  using std::swap;
  images_.InternalSwap(&other->images_);
  swap(predictor_, other->predictor_);
  swap(options_, other->options_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ImagesRequest::GetMetadata() const {
  protobuf_predictor_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_predictor_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ImagesRequest

// .carml.org.predictor.Predictor predictor = 1 [(.gogoproto.moretags) = "yaml:\"predictor,omitempty\""];
bool ImagesRequest::has_predictor() const {
  return this != internal_default_instance() && predictor_ != NULL;
}
void ImagesRequest::clear_predictor() {
  if (GetArenaNoVirtual() == NULL && predictor_ != NULL) delete predictor_;
  predictor_ = NULL;
}
const ::carml::org::predictor::Predictor& ImagesRequest::predictor() const {
  const ::carml::org::predictor::Predictor* p = predictor_;
  // @@protoc_insertion_point(field_get:carml.org.predictor.ImagesRequest.predictor)
  return p != NULL ? *p : *reinterpret_cast<const ::carml::org::predictor::Predictor*>(
      &::carml::org::predictor::_Predictor_default_instance_);
}
::carml::org::predictor::Predictor* ImagesRequest::mutable_predictor() {
  
  if (predictor_ == NULL) {
    predictor_ = new ::carml::org::predictor::Predictor;
  }
  // @@protoc_insertion_point(field_mutable:carml.org.predictor.ImagesRequest.predictor)
  return predictor_;
}
::carml::org::predictor::Predictor* ImagesRequest::release_predictor() {
  // @@protoc_insertion_point(field_release:carml.org.predictor.ImagesRequest.predictor)
  
  ::carml::org::predictor::Predictor* temp = predictor_;
  predictor_ = NULL;
  return temp;
}
void ImagesRequest::set_allocated_predictor(::carml::org::predictor::Predictor* predictor) {
  delete predictor_;
  predictor_ = predictor;
  if (predictor) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:carml.org.predictor.ImagesRequest.predictor)
}

// repeated .carml.org.predictor.ImagesRequest.Image images = 2 [(.gogoproto.moretags) = "yaml:\"images,omitempty\""];
int ImagesRequest::images_size() const {
  return images_.size();
}
void ImagesRequest::clear_images() {
  images_.Clear();
}
const ::carml::org::predictor::ImagesRequest_Image& ImagesRequest::images(int index) const {
  // @@protoc_insertion_point(field_get:carml.org.predictor.ImagesRequest.images)
  return images_.Get(index);
}
::carml::org::predictor::ImagesRequest_Image* ImagesRequest::mutable_images(int index) {
  // @@protoc_insertion_point(field_mutable:carml.org.predictor.ImagesRequest.images)
  return images_.Mutable(index);
}
::carml::org::predictor::ImagesRequest_Image* ImagesRequest::add_images() {
  // @@protoc_insertion_point(field_add:carml.org.predictor.ImagesRequest.images)
  return images_.Add();
}
::google::protobuf::RepeatedPtrField< ::carml::org::predictor::ImagesRequest_Image >*
ImagesRequest::mutable_images() {
  // @@protoc_insertion_point(field_mutable_list:carml.org.predictor.ImagesRequest.images)
  return &images_;
}
const ::google::protobuf::RepeatedPtrField< ::carml::org::predictor::ImagesRequest_Image >&
ImagesRequest::images() const {
  // @@protoc_insertion_point(field_list:carml.org.predictor.ImagesRequest.images)
  return images_;
}

// .carml.org.predictor.PredictionOptions options = 3 [(.gogoproto.moretags) = "yaml:\"options,omitempty\""];
bool ImagesRequest::has_options() const {
  return this != internal_default_instance() && options_ != NULL;
}
void ImagesRequest::clear_options() {
  if (GetArenaNoVirtual() == NULL && options_ != NULL) delete options_;
  options_ = NULL;
}
const ::carml::org::predictor::PredictionOptions& ImagesRequest::options() const {
  const ::carml::org::predictor::PredictionOptions* p = options_;
  // @@protoc_insertion_point(field_get:carml.org.predictor.ImagesRequest.options)
  return p != NULL ? *p : *reinterpret_cast<const ::carml::org::predictor::PredictionOptions*>(
      &::carml::org::predictor::_PredictionOptions_default_instance_);
}
::carml::org::predictor::PredictionOptions* ImagesRequest::mutable_options() {
  
  if (options_ == NULL) {
    options_ = new ::carml::org::predictor::PredictionOptions;
  }
  // @@protoc_insertion_point(field_mutable:carml.org.predictor.ImagesRequest.options)
  return options_;
}
::carml::org::predictor::PredictionOptions* ImagesRequest::release_options() {
  // @@protoc_insertion_point(field_release:carml.org.predictor.ImagesRequest.options)
  
  ::carml::org::predictor::PredictionOptions* temp = options_;
  options_ = NULL;
  return temp;
}
void ImagesRequest::set_allocated_options(::carml::org::predictor::PredictionOptions* options) {
  delete options_;
  options_ = options;
  if (options) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:carml.org.predictor.ImagesRequest.options)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DatasetRequest_Dataset::kCategoryFieldNumber;
const int DatasetRequest_Dataset::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DatasetRequest_Dataset::DatasetRequest_Dataset()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_predictor_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:carml.org.predictor.DatasetRequest.Dataset)
}
DatasetRequest_Dataset::DatasetRequest_Dataset(const DatasetRequest_Dataset& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  category_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.category().size() > 0) {
    category_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.category_);
  }
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  // @@protoc_insertion_point(copy_constructor:carml.org.predictor.DatasetRequest.Dataset)
}

void DatasetRequest_Dataset::SharedCtor() {
  category_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

DatasetRequest_Dataset::~DatasetRequest_Dataset() {
  // @@protoc_insertion_point(destructor:carml.org.predictor.DatasetRequest.Dataset)
  SharedDtor();
}

void DatasetRequest_Dataset::SharedDtor() {
  category_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DatasetRequest_Dataset::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DatasetRequest_Dataset::descriptor() {
  protobuf_predictor_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_predictor_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DatasetRequest_Dataset& DatasetRequest_Dataset::default_instance() {
  protobuf_predictor_2eproto::InitDefaults();
  return *internal_default_instance();
}

DatasetRequest_Dataset* DatasetRequest_Dataset::New(::google::protobuf::Arena* arena) const {
  DatasetRequest_Dataset* n = new DatasetRequest_Dataset;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DatasetRequest_Dataset::Clear() {
// @@protoc_insertion_point(message_clear_start:carml.org.predictor.DatasetRequest.Dataset)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  category_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool DatasetRequest_Dataset::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:carml.org.predictor.DatasetRequest.Dataset)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string category = 1 [(.gogoproto.moretags) = "yaml:\"category,omitempty\""];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_category()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->category().data(), static_cast<int>(this->category().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "carml.org.predictor.DatasetRequest.Dataset.category"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 2 [(.gogoproto.moretags) = "yaml:\"name,omitempty\""];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "carml.org.predictor.DatasetRequest.Dataset.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:carml.org.predictor.DatasetRequest.Dataset)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:carml.org.predictor.DatasetRequest.Dataset)
  return false;
#undef DO_
}

void DatasetRequest_Dataset::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:carml.org.predictor.DatasetRequest.Dataset)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string category = 1 [(.gogoproto.moretags) = "yaml:\"category,omitempty\""];
  if (this->category().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->category().data(), static_cast<int>(this->category().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "carml.org.predictor.DatasetRequest.Dataset.category");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->category(), output);
  }

  // string name = 2 [(.gogoproto.moretags) = "yaml:\"name,omitempty\""];
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "carml.org.predictor.DatasetRequest.Dataset.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:carml.org.predictor.DatasetRequest.Dataset)
}

::google::protobuf::uint8* DatasetRequest_Dataset::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:carml.org.predictor.DatasetRequest.Dataset)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string category = 1 [(.gogoproto.moretags) = "yaml:\"category,omitempty\""];
  if (this->category().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->category().data(), static_cast<int>(this->category().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "carml.org.predictor.DatasetRequest.Dataset.category");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->category(), target);
  }

  // string name = 2 [(.gogoproto.moretags) = "yaml:\"name,omitempty\""];
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "carml.org.predictor.DatasetRequest.Dataset.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:carml.org.predictor.DatasetRequest.Dataset)
  return target;
}

size_t DatasetRequest_Dataset::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:carml.org.predictor.DatasetRequest.Dataset)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string category = 1 [(.gogoproto.moretags) = "yaml:\"category,omitempty\""];
  if (this->category().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->category());
  }

  // string name = 2 [(.gogoproto.moretags) = "yaml:\"name,omitempty\""];
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DatasetRequest_Dataset::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:carml.org.predictor.DatasetRequest.Dataset)
  GOOGLE_DCHECK_NE(&from, this);
  const DatasetRequest_Dataset* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DatasetRequest_Dataset>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:carml.org.predictor.DatasetRequest.Dataset)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:carml.org.predictor.DatasetRequest.Dataset)
    MergeFrom(*source);
  }
}

void DatasetRequest_Dataset::MergeFrom(const DatasetRequest_Dataset& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:carml.org.predictor.DatasetRequest.Dataset)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.category().size() > 0) {

    category_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.category_);
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
}

void DatasetRequest_Dataset::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:carml.org.predictor.DatasetRequest.Dataset)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DatasetRequest_Dataset::CopyFrom(const DatasetRequest_Dataset& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:carml.org.predictor.DatasetRequest.Dataset)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DatasetRequest_Dataset::IsInitialized() const {
  return true;
}

void DatasetRequest_Dataset::Swap(DatasetRequest_Dataset* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DatasetRequest_Dataset::InternalSwap(DatasetRequest_Dataset* other) {
  using std::swap;
  category_.Swap(&other->category_);
  name_.Swap(&other->name_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DatasetRequest_Dataset::GetMetadata() const {
  protobuf_predictor_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_predictor_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DatasetRequest_Dataset

// string category = 1 [(.gogoproto.moretags) = "yaml:\"category,omitempty\""];
void DatasetRequest_Dataset::clear_category() {
  category_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DatasetRequest_Dataset::category() const {
  // @@protoc_insertion_point(field_get:carml.org.predictor.DatasetRequest.Dataset.category)
  return category_.GetNoArena();
}
void DatasetRequest_Dataset::set_category(const ::std::string& value) {
  
  category_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:carml.org.predictor.DatasetRequest.Dataset.category)
}
#if LANG_CXX11
void DatasetRequest_Dataset::set_category(::std::string&& value) {
  
  category_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:carml.org.predictor.DatasetRequest.Dataset.category)
}
#endif
void DatasetRequest_Dataset::set_category(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  category_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:carml.org.predictor.DatasetRequest.Dataset.category)
}
void DatasetRequest_Dataset::set_category(const char* value, size_t size) {
  
  category_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:carml.org.predictor.DatasetRequest.Dataset.category)
}
::std::string* DatasetRequest_Dataset::mutable_category() {
  
  // @@protoc_insertion_point(field_mutable:carml.org.predictor.DatasetRequest.Dataset.category)
  return category_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DatasetRequest_Dataset::release_category() {
  // @@protoc_insertion_point(field_release:carml.org.predictor.DatasetRequest.Dataset.category)
  
  return category_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DatasetRequest_Dataset::set_allocated_category(::std::string* category) {
  if (category != NULL) {
    
  } else {
    
  }
  category_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), category);
  // @@protoc_insertion_point(field_set_allocated:carml.org.predictor.DatasetRequest.Dataset.category)
}

// string name = 2 [(.gogoproto.moretags) = "yaml:\"name,omitempty\""];
void DatasetRequest_Dataset::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DatasetRequest_Dataset::name() const {
  // @@protoc_insertion_point(field_get:carml.org.predictor.DatasetRequest.Dataset.name)
  return name_.GetNoArena();
}
void DatasetRequest_Dataset::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:carml.org.predictor.DatasetRequest.Dataset.name)
}
#if LANG_CXX11
void DatasetRequest_Dataset::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:carml.org.predictor.DatasetRequest.Dataset.name)
}
#endif
void DatasetRequest_Dataset::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:carml.org.predictor.DatasetRequest.Dataset.name)
}
void DatasetRequest_Dataset::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:carml.org.predictor.DatasetRequest.Dataset.name)
}
::std::string* DatasetRequest_Dataset::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:carml.org.predictor.DatasetRequest.Dataset.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DatasetRequest_Dataset::release_name() {
  // @@protoc_insertion_point(field_release:carml.org.predictor.DatasetRequest.Dataset.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DatasetRequest_Dataset::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:carml.org.predictor.DatasetRequest.Dataset.name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DatasetRequest::kPredictorFieldNumber;
const int DatasetRequest::kDatasetFieldNumber;
const int DatasetRequest::kOptionsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DatasetRequest::DatasetRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_predictor_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:carml.org.predictor.DatasetRequest)
}
DatasetRequest::DatasetRequest(const DatasetRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_predictor()) {
    predictor_ = new ::carml::org::predictor::Predictor(*from.predictor_);
  } else {
    predictor_ = NULL;
  }
  if (from.has_dataset()) {
    dataset_ = new ::carml::org::predictor::DatasetRequest_Dataset(*from.dataset_);
  } else {
    dataset_ = NULL;
  }
  if (from.has_options()) {
    options_ = new ::carml::org::predictor::PredictionOptions(*from.options_);
  } else {
    options_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:carml.org.predictor.DatasetRequest)
}

void DatasetRequest::SharedCtor() {
  ::memset(&predictor_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&options_) -
      reinterpret_cast<char*>(&predictor_)) + sizeof(options_));
  _cached_size_ = 0;
}

DatasetRequest::~DatasetRequest() {
  // @@protoc_insertion_point(destructor:carml.org.predictor.DatasetRequest)
  SharedDtor();
}

void DatasetRequest::SharedDtor() {
  if (this != internal_default_instance()) delete predictor_;
  if (this != internal_default_instance()) delete dataset_;
  if (this != internal_default_instance()) delete options_;
}

void DatasetRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DatasetRequest::descriptor() {
  protobuf_predictor_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_predictor_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DatasetRequest& DatasetRequest::default_instance() {
  protobuf_predictor_2eproto::InitDefaults();
  return *internal_default_instance();
}

DatasetRequest* DatasetRequest::New(::google::protobuf::Arena* arena) const {
  DatasetRequest* n = new DatasetRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DatasetRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:carml.org.predictor.DatasetRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && predictor_ != NULL) {
    delete predictor_;
  }
  predictor_ = NULL;
  if (GetArenaNoVirtual() == NULL && dataset_ != NULL) {
    delete dataset_;
  }
  dataset_ = NULL;
  if (GetArenaNoVirtual() == NULL && options_ != NULL) {
    delete options_;
  }
  options_ = NULL;
  _internal_metadata_.Clear();
}

bool DatasetRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:carml.org.predictor.DatasetRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .carml.org.predictor.Predictor predictor = 1 [(.gogoproto.moretags) = "yaml:\"predictor,omitempty\""];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_predictor()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .carml.org.predictor.DatasetRequest.Dataset dataset = 2 [(.gogoproto.moretags) = "yaml:\"dataset,omitempty\""];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dataset()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .carml.org.predictor.PredictionOptions options = 3 [(.gogoproto.moretags) = "yaml:\"options,omitempty\""];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_options()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:carml.org.predictor.DatasetRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:carml.org.predictor.DatasetRequest)
  return false;
#undef DO_
}

void DatasetRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:carml.org.predictor.DatasetRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .carml.org.predictor.Predictor predictor = 1 [(.gogoproto.moretags) = "yaml:\"predictor,omitempty\""];
  if (this->has_predictor()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->predictor_, output);
  }

  // .carml.org.predictor.DatasetRequest.Dataset dataset = 2 [(.gogoproto.moretags) = "yaml:\"dataset,omitempty\""];
  if (this->has_dataset()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->dataset_, output);
  }

  // .carml.org.predictor.PredictionOptions options = 3 [(.gogoproto.moretags) = "yaml:\"options,omitempty\""];
  if (this->has_options()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->options_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:carml.org.predictor.DatasetRequest)
}

::google::protobuf::uint8* DatasetRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:carml.org.predictor.DatasetRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .carml.org.predictor.Predictor predictor = 1 [(.gogoproto.moretags) = "yaml:\"predictor,omitempty\""];
  if (this->has_predictor()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->predictor_, deterministic, target);
  }

  // .carml.org.predictor.DatasetRequest.Dataset dataset = 2 [(.gogoproto.moretags) = "yaml:\"dataset,omitempty\""];
  if (this->has_dataset()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->dataset_, deterministic, target);
  }

  // .carml.org.predictor.PredictionOptions options = 3 [(.gogoproto.moretags) = "yaml:\"options,omitempty\""];
  if (this->has_options()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->options_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:carml.org.predictor.DatasetRequest)
  return target;
}

size_t DatasetRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:carml.org.predictor.DatasetRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .carml.org.predictor.Predictor predictor = 1 [(.gogoproto.moretags) = "yaml:\"predictor,omitempty\""];
  if (this->has_predictor()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->predictor_);
  }

  // .carml.org.predictor.DatasetRequest.Dataset dataset = 2 [(.gogoproto.moretags) = "yaml:\"dataset,omitempty\""];
  if (this->has_dataset()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->dataset_);
  }

  // .carml.org.predictor.PredictionOptions options = 3 [(.gogoproto.moretags) = "yaml:\"options,omitempty\""];
  if (this->has_options()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->options_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DatasetRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:carml.org.predictor.DatasetRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DatasetRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DatasetRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:carml.org.predictor.DatasetRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:carml.org.predictor.DatasetRequest)
    MergeFrom(*source);
  }
}

void DatasetRequest::MergeFrom(const DatasetRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:carml.org.predictor.DatasetRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_predictor()) {
    mutable_predictor()->::carml::org::predictor::Predictor::MergeFrom(from.predictor());
  }
  if (from.has_dataset()) {
    mutable_dataset()->::carml::org::predictor::DatasetRequest_Dataset::MergeFrom(from.dataset());
  }
  if (from.has_options()) {
    mutable_options()->::carml::org::predictor::PredictionOptions::MergeFrom(from.options());
  }
}

void DatasetRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:carml.org.predictor.DatasetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DatasetRequest::CopyFrom(const DatasetRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:carml.org.predictor.DatasetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DatasetRequest::IsInitialized() const {
  return true;
}

void DatasetRequest::Swap(DatasetRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DatasetRequest::InternalSwap(DatasetRequest* other) {
  using std::swap;
  swap(predictor_, other->predictor_);
  swap(dataset_, other->dataset_);
  swap(options_, other->options_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DatasetRequest::GetMetadata() const {
  protobuf_predictor_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_predictor_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DatasetRequest

// .carml.org.predictor.Predictor predictor = 1 [(.gogoproto.moretags) = "yaml:\"predictor,omitempty\""];
bool DatasetRequest::has_predictor() const {
  return this != internal_default_instance() && predictor_ != NULL;
}
void DatasetRequest::clear_predictor() {
  if (GetArenaNoVirtual() == NULL && predictor_ != NULL) delete predictor_;
  predictor_ = NULL;
}
const ::carml::org::predictor::Predictor& DatasetRequest::predictor() const {
  const ::carml::org::predictor::Predictor* p = predictor_;
  // @@protoc_insertion_point(field_get:carml.org.predictor.DatasetRequest.predictor)
  return p != NULL ? *p : *reinterpret_cast<const ::carml::org::predictor::Predictor*>(
      &::carml::org::predictor::_Predictor_default_instance_);
}
::carml::org::predictor::Predictor* DatasetRequest::mutable_predictor() {
  
  if (predictor_ == NULL) {
    predictor_ = new ::carml::org::predictor::Predictor;
  }
  // @@protoc_insertion_point(field_mutable:carml.org.predictor.DatasetRequest.predictor)
  return predictor_;
}
::carml::org::predictor::Predictor* DatasetRequest::release_predictor() {
  // @@protoc_insertion_point(field_release:carml.org.predictor.DatasetRequest.predictor)
  
  ::carml::org::predictor::Predictor* temp = predictor_;
  predictor_ = NULL;
  return temp;
}
void DatasetRequest::set_allocated_predictor(::carml::org::predictor::Predictor* predictor) {
  delete predictor_;
  predictor_ = predictor;
  if (predictor) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:carml.org.predictor.DatasetRequest.predictor)
}

// .carml.org.predictor.DatasetRequest.Dataset dataset = 2 [(.gogoproto.moretags) = "yaml:\"dataset,omitempty\""];
bool DatasetRequest::has_dataset() const {
  return this != internal_default_instance() && dataset_ != NULL;
}
void DatasetRequest::clear_dataset() {
  if (GetArenaNoVirtual() == NULL && dataset_ != NULL) delete dataset_;
  dataset_ = NULL;
}
const ::carml::org::predictor::DatasetRequest_Dataset& DatasetRequest::dataset() const {
  const ::carml::org::predictor::DatasetRequest_Dataset* p = dataset_;
  // @@protoc_insertion_point(field_get:carml.org.predictor.DatasetRequest.dataset)
  return p != NULL ? *p : *reinterpret_cast<const ::carml::org::predictor::DatasetRequest_Dataset*>(
      &::carml::org::predictor::_DatasetRequest_Dataset_default_instance_);
}
::carml::org::predictor::DatasetRequest_Dataset* DatasetRequest::mutable_dataset() {
  
  if (dataset_ == NULL) {
    dataset_ = new ::carml::org::predictor::DatasetRequest_Dataset;
  }
  // @@protoc_insertion_point(field_mutable:carml.org.predictor.DatasetRequest.dataset)
  return dataset_;
}
::carml::org::predictor::DatasetRequest_Dataset* DatasetRequest::release_dataset() {
  // @@protoc_insertion_point(field_release:carml.org.predictor.DatasetRequest.dataset)
  
  ::carml::org::predictor::DatasetRequest_Dataset* temp = dataset_;
  dataset_ = NULL;
  return temp;
}
void DatasetRequest::set_allocated_dataset(::carml::org::predictor::DatasetRequest_Dataset* dataset) {
  delete dataset_;
  dataset_ = dataset;
  if (dataset) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:carml.org.predictor.DatasetRequest.dataset)
}

// .carml.org.predictor.PredictionOptions options = 3 [(.gogoproto.moretags) = "yaml:\"options,omitempty\""];
bool DatasetRequest::has_options() const {
  return this != internal_default_instance() && options_ != NULL;
}
void DatasetRequest::clear_options() {
  if (GetArenaNoVirtual() == NULL && options_ != NULL) delete options_;
  options_ = NULL;
}
const ::carml::org::predictor::PredictionOptions& DatasetRequest::options() const {
  const ::carml::org::predictor::PredictionOptions* p = options_;
  // @@protoc_insertion_point(field_get:carml.org.predictor.DatasetRequest.options)
  return p != NULL ? *p : *reinterpret_cast<const ::carml::org::predictor::PredictionOptions*>(
      &::carml::org::predictor::_PredictionOptions_default_instance_);
}
::carml::org::predictor::PredictionOptions* DatasetRequest::mutable_options() {
  
  if (options_ == NULL) {
    options_ = new ::carml::org::predictor::PredictionOptions;
  }
  // @@protoc_insertion_point(field_mutable:carml.org.predictor.DatasetRequest.options)
  return options_;
}
::carml::org::predictor::PredictionOptions* DatasetRequest::release_options() {
  // @@protoc_insertion_point(field_release:carml.org.predictor.DatasetRequest.options)
  
  ::carml::org::predictor::PredictionOptions* temp = options_;
  options_ = NULL;
  return temp;
}
void DatasetRequest::set_allocated_options(::carml::org::predictor::PredictionOptions* options) {
  delete options_;
  options_ = options;
  if (options) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:carml.org.predictor.DatasetRequest.options)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

Feature::Feature_MetadataEntry::Feature_MetadataEntry() {}
Feature::Feature_MetadataEntry::Feature_MetadataEntry(::google::protobuf::Arena* arena) : SuperType(arena) {}
::google::protobuf::Metadata Feature::Feature_MetadataEntry::GetMetadata() const {
  protobuf_predictor_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_predictor_2eproto::file_level_metadata[11];
}
void Feature::Feature_MetadataEntry::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}
void Feature::Feature_MetadataEntry::MergeFrom(const Feature_MetadataEntry& other) {
  MergeFromInternal(other);
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Feature::kIndexFieldNumber;
const int Feature::kNameFieldNumber;
const int Feature::kProbabilityFieldNumber;
const int Feature::kMetadataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Feature::Feature()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_predictor_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:carml.org.predictor.Feature)
}
Feature::Feature(const Feature& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  metadata_.MergeFrom(from.metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&index_, &from.index_,
    static_cast<size_t>(reinterpret_cast<char*>(&probability_) -
    reinterpret_cast<char*>(&index_)) + sizeof(probability_));
  // @@protoc_insertion_point(copy_constructor:carml.org.predictor.Feature)
}

void Feature::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&probability_) -
      reinterpret_cast<char*>(&index_)) + sizeof(probability_));
  _cached_size_ = 0;
}

Feature::~Feature() {
  // @@protoc_insertion_point(destructor:carml.org.predictor.Feature)
  SharedDtor();
}

void Feature::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Feature::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Feature::descriptor() {
  protobuf_predictor_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_predictor_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Feature& Feature::default_instance() {
  protobuf_predictor_2eproto::InitDefaults();
  return *internal_default_instance();
}

Feature* Feature::New(::google::protobuf::Arena* arena) const {
  Feature* n = new Feature;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Feature::Clear() {
// @@protoc_insertion_point(message_clear_start:carml.org.predictor.Feature)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  metadata_.Clear();
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&probability_) -
      reinterpret_cast<char*>(&index_)) + sizeof(probability_));
  _internal_metadata_.Clear();
}

bool Feature::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:carml.org.predictor.Feature)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 index = 1 [(.gogoproto.moretags) = "yaml:\"index,omitempty\""];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 2 [(.gogoproto.moretags) = "yaml:\"name,omitempty\""];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "carml.org.predictor.Feature.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float probability = 3 [(.gogoproto.moretags) = "yaml:\"probability,omitempty\""];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &probability_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, string> metadata = 4 [(.gogoproto.moretags) = "yaml:\"metadata,omitempty\""];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          Feature_MetadataEntry::Parser< ::google::protobuf::internal::MapField<
              Feature_MetadataEntry,
              ::std::string, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::google::protobuf::Map< ::std::string, ::std::string > > parser(&metadata_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "carml.org.predictor.Feature.MetadataEntry.key"));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.value().data(), static_cast<int>(parser.value().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "carml.org.predictor.Feature.MetadataEntry.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:carml.org.predictor.Feature)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:carml.org.predictor.Feature)
  return false;
#undef DO_
}

void Feature::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:carml.org.predictor.Feature)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 index = 1 [(.gogoproto.moretags) = "yaml:\"index,omitempty\""];
  if (this->index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->index(), output);
  }

  // string name = 2 [(.gogoproto.moretags) = "yaml:\"name,omitempty\""];
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "carml.org.predictor.Feature.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // float probability = 3 [(.gogoproto.moretags) = "yaml:\"probability,omitempty\""];
  if (this->probability() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->probability(), output);
  }

  // map<string, string> metadata = 4 [(.gogoproto.moretags) = "yaml:\"metadata,omitempty\""];
  if (!this->metadata().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "carml.org.predictor.Feature.MetadataEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "carml.org.predictor.Feature.MetadataEntry.value");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->metadata().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->metadata().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->metadata().begin();
          it != this->metadata().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<Feature_MetadataEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(metadata_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            4, *entry, output);
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::google::protobuf::scoped_ptr<Feature_MetadataEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->metadata().begin();
          it != this->metadata().end(); ++it) {
        entry.reset(metadata_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            4, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:carml.org.predictor.Feature)
}

::google::protobuf::uint8* Feature::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:carml.org.predictor.Feature)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 index = 1 [(.gogoproto.moretags) = "yaml:\"index,omitempty\""];
  if (this->index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->index(), target);
  }

  // string name = 2 [(.gogoproto.moretags) = "yaml:\"name,omitempty\""];
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "carml.org.predictor.Feature.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // float probability = 3 [(.gogoproto.moretags) = "yaml:\"probability,omitempty\""];
  if (this->probability() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->probability(), target);
  }

  // map<string, string> metadata = 4 [(.gogoproto.moretags) = "yaml:\"metadata,omitempty\""];
  if (!this->metadata().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "carml.org.predictor.Feature.MetadataEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "carml.org.predictor.Feature.MetadataEntry.value");
      }
    };

    if (deterministic &&
        this->metadata().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->metadata().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->metadata().begin();
          it != this->metadata().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<Feature_MetadataEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(metadata_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       4, *entry, deterministic, target);
;
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::google::protobuf::scoped_ptr<Feature_MetadataEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->metadata().begin();
          it != this->metadata().end(); ++it) {
        entry.reset(metadata_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       4, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:carml.org.predictor.Feature)
  return target;
}

size_t Feature::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:carml.org.predictor.Feature)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // map<string, string> metadata = 4 [(.gogoproto.moretags) = "yaml:\"metadata,omitempty\""];
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->metadata_size());
  {
    ::google::protobuf::scoped_ptr<Feature_MetadataEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
        it = this->metadata().begin();
        it != this->metadata().end(); ++it) {
      entry.reset(metadata_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // string name = 2 [(.gogoproto.moretags) = "yaml:\"name,omitempty\""];
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // int64 index = 1 [(.gogoproto.moretags) = "yaml:\"index,omitempty\""];
  if (this->index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->index());
  }

  // float probability = 3 [(.gogoproto.moretags) = "yaml:\"probability,omitempty\""];
  if (this->probability() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Feature::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:carml.org.predictor.Feature)
  GOOGLE_DCHECK_NE(&from, this);
  const Feature* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Feature>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:carml.org.predictor.Feature)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:carml.org.predictor.Feature)
    MergeFrom(*source);
  }
}

void Feature::MergeFrom(const Feature& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:carml.org.predictor.Feature)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  metadata_.MergeFrom(from.metadata_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.index() != 0) {
    set_index(from.index());
  }
  if (from.probability() != 0) {
    set_probability(from.probability());
  }
}

void Feature::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:carml.org.predictor.Feature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Feature::CopyFrom(const Feature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:carml.org.predictor.Feature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Feature::IsInitialized() const {
  return true;
}

void Feature::Swap(Feature* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Feature::InternalSwap(Feature* other) {
  using std::swap;
  metadata_.Swap(&other->metadata_);
  name_.Swap(&other->name_);
  swap(index_, other->index_);
  swap(probability_, other->probability_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Feature::GetMetadata() const {
  protobuf_predictor_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_predictor_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Feature

// int64 index = 1 [(.gogoproto.moretags) = "yaml:\"index,omitempty\""];
void Feature::clear_index() {
  index_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 Feature::index() const {
  // @@protoc_insertion_point(field_get:carml.org.predictor.Feature.index)
  return index_;
}
void Feature::set_index(::google::protobuf::int64 value) {
  
  index_ = value;
  // @@protoc_insertion_point(field_set:carml.org.predictor.Feature.index)
}

// string name = 2 [(.gogoproto.moretags) = "yaml:\"name,omitempty\""];
void Feature::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Feature::name() const {
  // @@protoc_insertion_point(field_get:carml.org.predictor.Feature.name)
  return name_.GetNoArena();
}
void Feature::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:carml.org.predictor.Feature.name)
}
#if LANG_CXX11
void Feature::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:carml.org.predictor.Feature.name)
}
#endif
void Feature::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:carml.org.predictor.Feature.name)
}
void Feature::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:carml.org.predictor.Feature.name)
}
::std::string* Feature::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:carml.org.predictor.Feature.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Feature::release_name() {
  // @@protoc_insertion_point(field_release:carml.org.predictor.Feature.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Feature::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:carml.org.predictor.Feature.name)
}

// float probability = 3 [(.gogoproto.moretags) = "yaml:\"probability,omitempty\""];
void Feature::clear_probability() {
  probability_ = 0;
}
float Feature::probability() const {
  // @@protoc_insertion_point(field_get:carml.org.predictor.Feature.probability)
  return probability_;
}
void Feature::set_probability(float value) {
  
  probability_ = value;
  // @@protoc_insertion_point(field_set:carml.org.predictor.Feature.probability)
}

// map<string, string> metadata = 4 [(.gogoproto.moretags) = "yaml:\"metadata,omitempty\""];
int Feature::metadata_size() const {
  return metadata_.size();
}
void Feature::clear_metadata() {
  metadata_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::std::string >&
Feature::metadata() const {
  // @@protoc_insertion_point(field_map:carml.org.predictor.Feature.metadata)
  return metadata_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::std::string >*
Feature::mutable_metadata() {
  // @@protoc_insertion_point(field_mutable_map:carml.org.predictor.Feature.metadata)
  return metadata_.MutableMap();
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

FeatureResponse::FeatureResponse_MetadataEntry::FeatureResponse_MetadataEntry() {}
FeatureResponse::FeatureResponse_MetadataEntry::FeatureResponse_MetadataEntry(::google::protobuf::Arena* arena) : SuperType(arena) {}
::google::protobuf::Metadata FeatureResponse::FeatureResponse_MetadataEntry::GetMetadata() const {
  protobuf_predictor_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_predictor_2eproto::file_level_metadata[13];
}
void FeatureResponse::FeatureResponse_MetadataEntry::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}
void FeatureResponse::FeatureResponse_MetadataEntry::MergeFrom(const FeatureResponse_MetadataEntry& other) {
  MergeFromInternal(other);
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FeatureResponse::kIdFieldNumber;
const int FeatureResponse::kRequestIdFieldNumber;
const int FeatureResponse::kInputIdFieldNumber;
const int FeatureResponse::kFeaturesFieldNumber;
const int FeatureResponse::kMetadataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FeatureResponse::FeatureResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_predictor_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:carml.org.predictor.FeatureResponse)
}
FeatureResponse::FeatureResponse(const FeatureResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      features_(from.features_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  metadata_.MergeFrom(from.metadata_);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.id().size() > 0) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  request_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.request_id().size() > 0) {
    request_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_id_);
  }
  input_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.input_id().size() > 0) {
    input_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.input_id_);
  }
  // @@protoc_insertion_point(copy_constructor:carml.org.predictor.FeatureResponse)
}

void FeatureResponse::SharedCtor() {
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  request_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  input_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

FeatureResponse::~FeatureResponse() {
  // @@protoc_insertion_point(destructor:carml.org.predictor.FeatureResponse)
  SharedDtor();
}

void FeatureResponse::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  request_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  input_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void FeatureResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FeatureResponse::descriptor() {
  protobuf_predictor_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_predictor_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FeatureResponse& FeatureResponse::default_instance() {
  protobuf_predictor_2eproto::InitDefaults();
  return *internal_default_instance();
}

FeatureResponse* FeatureResponse::New(::google::protobuf::Arena* arena) const {
  FeatureResponse* n = new FeatureResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FeatureResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:carml.org.predictor.FeatureResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  features_.Clear();
  metadata_.Clear();
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  input_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool FeatureResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:carml.org.predictor.FeatureResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string id = 1 [(.gogoproto.customname) = "ID", (.gogoproto.jsontag) = "id,omitempty", (.gogoproto.moretags) = "yaml:\"id,omitempty\""];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), static_cast<int>(this->id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "carml.org.predictor.FeatureResponse.id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string request_id = 2 [(.gogoproto.customname) = "RequestID", (.gogoproto.jsontag) = "request_id,omitempty", (.gogoproto.moretags) = "yaml:\"request_id,omitempty\""];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_request_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->request_id().data(), static_cast<int>(this->request_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "carml.org.predictor.FeatureResponse.request_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string input_id = 3 [(.gogoproto.customname) = "InputID", (.gogoproto.jsontag) = "input_id,omitempty", (.gogoproto.moretags) = "yaml:\"input_id,omitempty\""];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_input_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->input_id().data(), static_cast<int>(this->input_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "carml.org.predictor.FeatureResponse.input_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .carml.org.predictor.Feature features = 4 [(.gogoproto.moretags) = "yaml:\"features,omitempty\""];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_features()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, string> metadata = 5 [(.gogoproto.moretags) = "yaml:\"metadata,omitempty\""];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          FeatureResponse_MetadataEntry::Parser< ::google::protobuf::internal::MapField<
              FeatureResponse_MetadataEntry,
              ::std::string, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::google::protobuf::Map< ::std::string, ::std::string > > parser(&metadata_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "carml.org.predictor.FeatureResponse.MetadataEntry.key"));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.value().data(), static_cast<int>(parser.value().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "carml.org.predictor.FeatureResponse.MetadataEntry.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:carml.org.predictor.FeatureResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:carml.org.predictor.FeatureResponse)
  return false;
#undef DO_
}

void FeatureResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:carml.org.predictor.FeatureResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1 [(.gogoproto.customname) = "ID", (.gogoproto.jsontag) = "id,omitempty", (.gogoproto.moretags) = "yaml:\"id,omitempty\""];
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "carml.org.predictor.FeatureResponse.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // string request_id = 2 [(.gogoproto.customname) = "RequestID", (.gogoproto.jsontag) = "request_id,omitempty", (.gogoproto.moretags) = "yaml:\"request_id,omitempty\""];
  if (this->request_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->request_id().data(), static_cast<int>(this->request_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "carml.org.predictor.FeatureResponse.request_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->request_id(), output);
  }

  // string input_id = 3 [(.gogoproto.customname) = "InputID", (.gogoproto.jsontag) = "input_id,omitempty", (.gogoproto.moretags) = "yaml:\"input_id,omitempty\""];
  if (this->input_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->input_id().data(), static_cast<int>(this->input_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "carml.org.predictor.FeatureResponse.input_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->input_id(), output);
  }

  // repeated .carml.org.predictor.Feature features = 4 [(.gogoproto.moretags) = "yaml:\"features,omitempty\""];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->features_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->features(static_cast<int>(i)), output);
  }

  // map<string, string> metadata = 5 [(.gogoproto.moretags) = "yaml:\"metadata,omitempty\""];
  if (!this->metadata().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "carml.org.predictor.FeatureResponse.MetadataEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "carml.org.predictor.FeatureResponse.MetadataEntry.value");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->metadata().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->metadata().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->metadata().begin();
          it != this->metadata().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<FeatureResponse_MetadataEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(metadata_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            5, *entry, output);
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::google::protobuf::scoped_ptr<FeatureResponse_MetadataEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->metadata().begin();
          it != this->metadata().end(); ++it) {
        entry.reset(metadata_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            5, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:carml.org.predictor.FeatureResponse)
}

::google::protobuf::uint8* FeatureResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:carml.org.predictor.FeatureResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1 [(.gogoproto.customname) = "ID", (.gogoproto.jsontag) = "id,omitempty", (.gogoproto.moretags) = "yaml:\"id,omitempty\""];
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "carml.org.predictor.FeatureResponse.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // string request_id = 2 [(.gogoproto.customname) = "RequestID", (.gogoproto.jsontag) = "request_id,omitempty", (.gogoproto.moretags) = "yaml:\"request_id,omitempty\""];
  if (this->request_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->request_id().data(), static_cast<int>(this->request_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "carml.org.predictor.FeatureResponse.request_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->request_id(), target);
  }

  // string input_id = 3 [(.gogoproto.customname) = "InputID", (.gogoproto.jsontag) = "input_id,omitempty", (.gogoproto.moretags) = "yaml:\"input_id,omitempty\""];
  if (this->input_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->input_id().data(), static_cast<int>(this->input_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "carml.org.predictor.FeatureResponse.input_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->input_id(), target);
  }

  // repeated .carml.org.predictor.Feature features = 4 [(.gogoproto.moretags) = "yaml:\"features,omitempty\""];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->features_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->features(static_cast<int>(i)), deterministic, target);
  }

  // map<string, string> metadata = 5 [(.gogoproto.moretags) = "yaml:\"metadata,omitempty\""];
  if (!this->metadata().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "carml.org.predictor.FeatureResponse.MetadataEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "carml.org.predictor.FeatureResponse.MetadataEntry.value");
      }
    };

    if (deterministic &&
        this->metadata().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->metadata().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->metadata().begin();
          it != this->metadata().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<FeatureResponse_MetadataEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(metadata_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       5, *entry, deterministic, target);
;
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::google::protobuf::scoped_ptr<FeatureResponse_MetadataEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->metadata().begin();
          it != this->metadata().end(); ++it) {
        entry.reset(metadata_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       5, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:carml.org.predictor.FeatureResponse)
  return target;
}

size_t FeatureResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:carml.org.predictor.FeatureResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .carml.org.predictor.Feature features = 4 [(.gogoproto.moretags) = "yaml:\"features,omitempty\""];
  {
    unsigned int count = static_cast<unsigned int>(this->features_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->features(static_cast<int>(i)));
    }
  }

  // map<string, string> metadata = 5 [(.gogoproto.moretags) = "yaml:\"metadata,omitempty\""];
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->metadata_size());
  {
    ::google::protobuf::scoped_ptr<FeatureResponse_MetadataEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
        it = this->metadata().begin();
        it != this->metadata().end(); ++it) {
      entry.reset(metadata_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // string id = 1 [(.gogoproto.customname) = "ID", (.gogoproto.jsontag) = "id,omitempty", (.gogoproto.moretags) = "yaml:\"id,omitempty\""];
  if (this->id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  // string request_id = 2 [(.gogoproto.customname) = "RequestID", (.gogoproto.jsontag) = "request_id,omitempty", (.gogoproto.moretags) = "yaml:\"request_id,omitempty\""];
  if (this->request_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->request_id());
  }

  // string input_id = 3 [(.gogoproto.customname) = "InputID", (.gogoproto.jsontag) = "input_id,omitempty", (.gogoproto.moretags) = "yaml:\"input_id,omitempty\""];
  if (this->input_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->input_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FeatureResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:carml.org.predictor.FeatureResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const FeatureResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FeatureResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:carml.org.predictor.FeatureResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:carml.org.predictor.FeatureResponse)
    MergeFrom(*source);
  }
}

void FeatureResponse::MergeFrom(const FeatureResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:carml.org.predictor.FeatureResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  features_.MergeFrom(from.features_);
  metadata_.MergeFrom(from.metadata_);
  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.request_id().size() > 0) {

    request_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_id_);
  }
  if (from.input_id().size() > 0) {

    input_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.input_id_);
  }
}

void FeatureResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:carml.org.predictor.FeatureResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FeatureResponse::CopyFrom(const FeatureResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:carml.org.predictor.FeatureResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FeatureResponse::IsInitialized() const {
  return true;
}

void FeatureResponse::Swap(FeatureResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FeatureResponse::InternalSwap(FeatureResponse* other) {
  using std::swap;
  features_.InternalSwap(&other->features_);
  metadata_.Swap(&other->metadata_);
  id_.Swap(&other->id_);
  request_id_.Swap(&other->request_id_);
  input_id_.Swap(&other->input_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FeatureResponse::GetMetadata() const {
  protobuf_predictor_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_predictor_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FeatureResponse

// string id = 1 [(.gogoproto.customname) = "ID", (.gogoproto.jsontag) = "id,omitempty", (.gogoproto.moretags) = "yaml:\"id,omitempty\""];
void FeatureResponse::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& FeatureResponse::id() const {
  // @@protoc_insertion_point(field_get:carml.org.predictor.FeatureResponse.id)
  return id_.GetNoArena();
}
void FeatureResponse::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:carml.org.predictor.FeatureResponse.id)
}
#if LANG_CXX11
void FeatureResponse::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:carml.org.predictor.FeatureResponse.id)
}
#endif
void FeatureResponse::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:carml.org.predictor.FeatureResponse.id)
}
void FeatureResponse::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:carml.org.predictor.FeatureResponse.id)
}
::std::string* FeatureResponse::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:carml.org.predictor.FeatureResponse.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* FeatureResponse::release_id() {
  // @@protoc_insertion_point(field_release:carml.org.predictor.FeatureResponse.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void FeatureResponse::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:carml.org.predictor.FeatureResponse.id)
}

// string request_id = 2 [(.gogoproto.customname) = "RequestID", (.gogoproto.jsontag) = "request_id,omitempty", (.gogoproto.moretags) = "yaml:\"request_id,omitempty\""];
void FeatureResponse::clear_request_id() {
  request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& FeatureResponse::request_id() const {
  // @@protoc_insertion_point(field_get:carml.org.predictor.FeatureResponse.request_id)
  return request_id_.GetNoArena();
}
void FeatureResponse::set_request_id(const ::std::string& value) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:carml.org.predictor.FeatureResponse.request_id)
}
#if LANG_CXX11
void FeatureResponse::set_request_id(::std::string&& value) {
  
  request_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:carml.org.predictor.FeatureResponse.request_id)
}
#endif
void FeatureResponse::set_request_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:carml.org.predictor.FeatureResponse.request_id)
}
void FeatureResponse::set_request_id(const char* value, size_t size) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:carml.org.predictor.FeatureResponse.request_id)
}
::std::string* FeatureResponse::mutable_request_id() {
  
  // @@protoc_insertion_point(field_mutable:carml.org.predictor.FeatureResponse.request_id)
  return request_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* FeatureResponse::release_request_id() {
  // @@protoc_insertion_point(field_release:carml.org.predictor.FeatureResponse.request_id)
  
  return request_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void FeatureResponse::set_allocated_request_id(::std::string* request_id) {
  if (request_id != NULL) {
    
  } else {
    
  }
  request_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), request_id);
  // @@protoc_insertion_point(field_set_allocated:carml.org.predictor.FeatureResponse.request_id)
}

// string input_id = 3 [(.gogoproto.customname) = "InputID", (.gogoproto.jsontag) = "input_id,omitempty", (.gogoproto.moretags) = "yaml:\"input_id,omitempty\""];
void FeatureResponse::clear_input_id() {
  input_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& FeatureResponse::input_id() const {
  // @@protoc_insertion_point(field_get:carml.org.predictor.FeatureResponse.input_id)
  return input_id_.GetNoArena();
}
void FeatureResponse::set_input_id(const ::std::string& value) {
  
  input_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:carml.org.predictor.FeatureResponse.input_id)
}
#if LANG_CXX11
void FeatureResponse::set_input_id(::std::string&& value) {
  
  input_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:carml.org.predictor.FeatureResponse.input_id)
}
#endif
void FeatureResponse::set_input_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  input_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:carml.org.predictor.FeatureResponse.input_id)
}
void FeatureResponse::set_input_id(const char* value, size_t size) {
  
  input_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:carml.org.predictor.FeatureResponse.input_id)
}
::std::string* FeatureResponse::mutable_input_id() {
  
  // @@protoc_insertion_point(field_mutable:carml.org.predictor.FeatureResponse.input_id)
  return input_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* FeatureResponse::release_input_id() {
  // @@protoc_insertion_point(field_release:carml.org.predictor.FeatureResponse.input_id)
  
  return input_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void FeatureResponse::set_allocated_input_id(::std::string* input_id) {
  if (input_id != NULL) {
    
  } else {
    
  }
  input_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), input_id);
  // @@protoc_insertion_point(field_set_allocated:carml.org.predictor.FeatureResponse.input_id)
}

// repeated .carml.org.predictor.Feature features = 4 [(.gogoproto.moretags) = "yaml:\"features,omitempty\""];
int FeatureResponse::features_size() const {
  return features_.size();
}
void FeatureResponse::clear_features() {
  features_.Clear();
}
const ::carml::org::predictor::Feature& FeatureResponse::features(int index) const {
  // @@protoc_insertion_point(field_get:carml.org.predictor.FeatureResponse.features)
  return features_.Get(index);
}
::carml::org::predictor::Feature* FeatureResponse::mutable_features(int index) {
  // @@protoc_insertion_point(field_mutable:carml.org.predictor.FeatureResponse.features)
  return features_.Mutable(index);
}
::carml::org::predictor::Feature* FeatureResponse::add_features() {
  // @@protoc_insertion_point(field_add:carml.org.predictor.FeatureResponse.features)
  return features_.Add();
}
::google::protobuf::RepeatedPtrField< ::carml::org::predictor::Feature >*
FeatureResponse::mutable_features() {
  // @@protoc_insertion_point(field_mutable_list:carml.org.predictor.FeatureResponse.features)
  return &features_;
}
const ::google::protobuf::RepeatedPtrField< ::carml::org::predictor::Feature >&
FeatureResponse::features() const {
  // @@protoc_insertion_point(field_list:carml.org.predictor.FeatureResponse.features)
  return features_;
}

// map<string, string> metadata = 5 [(.gogoproto.moretags) = "yaml:\"metadata,omitempty\""];
int FeatureResponse::metadata_size() const {
  return metadata_.size();
}
void FeatureResponse::clear_metadata() {
  metadata_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::std::string >&
FeatureResponse::metadata() const {
  // @@protoc_insertion_point(field_map:carml.org.predictor.FeatureResponse.metadata)
  return metadata_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::std::string >*
FeatureResponse::mutable_metadata() {
  // @@protoc_insertion_point(field_mutable_map:carml.org.predictor.FeatureResponse.metadata)
  return metadata_.MutableMap();
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FeaturesResponse::kIdFieldNumber;
const int FeaturesResponse::kResponsesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FeaturesResponse::FeaturesResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_predictor_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:carml.org.predictor.FeaturesResponse)
}
FeaturesResponse::FeaturesResponse(const FeaturesResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      responses_(from.responses_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.id().size() > 0) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  // @@protoc_insertion_point(copy_constructor:carml.org.predictor.FeaturesResponse)
}

void FeaturesResponse::SharedCtor() {
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

FeaturesResponse::~FeaturesResponse() {
  // @@protoc_insertion_point(destructor:carml.org.predictor.FeaturesResponse)
  SharedDtor();
}

void FeaturesResponse::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void FeaturesResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FeaturesResponse::descriptor() {
  protobuf_predictor_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_predictor_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FeaturesResponse& FeaturesResponse::default_instance() {
  protobuf_predictor_2eproto::InitDefaults();
  return *internal_default_instance();
}

FeaturesResponse* FeaturesResponse::New(::google::protobuf::Arena* arena) const {
  FeaturesResponse* n = new FeaturesResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FeaturesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:carml.org.predictor.FeaturesResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  responses_.Clear();
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool FeaturesResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:carml.org.predictor.FeaturesResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string id = 1 [(.gogoproto.customname) = "ID", (.gogoproto.jsontag) = "id,omitempty", (.gogoproto.moretags) = "yaml:\"id,omitempty\""];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), static_cast<int>(this->id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "carml.org.predictor.FeaturesResponse.id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .carml.org.predictor.FeatureResponse responses = 2 [(.gogoproto.moretags) = "yaml:\"responses,omitempty\""];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_responses()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:carml.org.predictor.FeaturesResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:carml.org.predictor.FeaturesResponse)
  return false;
#undef DO_
}

void FeaturesResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:carml.org.predictor.FeaturesResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1 [(.gogoproto.customname) = "ID", (.gogoproto.jsontag) = "id,omitempty", (.gogoproto.moretags) = "yaml:\"id,omitempty\""];
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "carml.org.predictor.FeaturesResponse.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // repeated .carml.org.predictor.FeatureResponse responses = 2 [(.gogoproto.moretags) = "yaml:\"responses,omitempty\""];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->responses_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->responses(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:carml.org.predictor.FeaturesResponse)
}

::google::protobuf::uint8* FeaturesResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:carml.org.predictor.FeaturesResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1 [(.gogoproto.customname) = "ID", (.gogoproto.jsontag) = "id,omitempty", (.gogoproto.moretags) = "yaml:\"id,omitempty\""];
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "carml.org.predictor.FeaturesResponse.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // repeated .carml.org.predictor.FeatureResponse responses = 2 [(.gogoproto.moretags) = "yaml:\"responses,omitempty\""];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->responses_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->responses(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:carml.org.predictor.FeaturesResponse)
  return target;
}

size_t FeaturesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:carml.org.predictor.FeaturesResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .carml.org.predictor.FeatureResponse responses = 2 [(.gogoproto.moretags) = "yaml:\"responses,omitempty\""];
  {
    unsigned int count = static_cast<unsigned int>(this->responses_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->responses(static_cast<int>(i)));
    }
  }

  // string id = 1 [(.gogoproto.customname) = "ID", (.gogoproto.jsontag) = "id,omitempty", (.gogoproto.moretags) = "yaml:\"id,omitempty\""];
  if (this->id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FeaturesResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:carml.org.predictor.FeaturesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const FeaturesResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FeaturesResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:carml.org.predictor.FeaturesResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:carml.org.predictor.FeaturesResponse)
    MergeFrom(*source);
  }
}

void FeaturesResponse::MergeFrom(const FeaturesResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:carml.org.predictor.FeaturesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  responses_.MergeFrom(from.responses_);
  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
}

void FeaturesResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:carml.org.predictor.FeaturesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FeaturesResponse::CopyFrom(const FeaturesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:carml.org.predictor.FeaturesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FeaturesResponse::IsInitialized() const {
  return true;
}

void FeaturesResponse::Swap(FeaturesResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FeaturesResponse::InternalSwap(FeaturesResponse* other) {
  using std::swap;
  responses_.InternalSwap(&other->responses_);
  id_.Swap(&other->id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FeaturesResponse::GetMetadata() const {
  protobuf_predictor_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_predictor_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FeaturesResponse

// string id = 1 [(.gogoproto.customname) = "ID", (.gogoproto.jsontag) = "id,omitempty", (.gogoproto.moretags) = "yaml:\"id,omitempty\""];
void FeaturesResponse::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& FeaturesResponse::id() const {
  // @@protoc_insertion_point(field_get:carml.org.predictor.FeaturesResponse.id)
  return id_.GetNoArena();
}
void FeaturesResponse::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:carml.org.predictor.FeaturesResponse.id)
}
#if LANG_CXX11
void FeaturesResponse::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:carml.org.predictor.FeaturesResponse.id)
}
#endif
void FeaturesResponse::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:carml.org.predictor.FeaturesResponse.id)
}
void FeaturesResponse::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:carml.org.predictor.FeaturesResponse.id)
}
::std::string* FeaturesResponse::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:carml.org.predictor.FeaturesResponse.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* FeaturesResponse::release_id() {
  // @@protoc_insertion_point(field_release:carml.org.predictor.FeaturesResponse.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void FeaturesResponse::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:carml.org.predictor.FeaturesResponse.id)
}

// repeated .carml.org.predictor.FeatureResponse responses = 2 [(.gogoproto.moretags) = "yaml:\"responses,omitempty\""];
int FeaturesResponse::responses_size() const {
  return responses_.size();
}
void FeaturesResponse::clear_responses() {
  responses_.Clear();
}
const ::carml::org::predictor::FeatureResponse& FeaturesResponse::responses(int index) const {
  // @@protoc_insertion_point(field_get:carml.org.predictor.FeaturesResponse.responses)
  return responses_.Get(index);
}
::carml::org::predictor::FeatureResponse* FeaturesResponse::mutable_responses(int index) {
  // @@protoc_insertion_point(field_mutable:carml.org.predictor.FeaturesResponse.responses)
  return responses_.Mutable(index);
}
::carml::org::predictor::FeatureResponse* FeaturesResponse::add_responses() {
  // @@protoc_insertion_point(field_add:carml.org.predictor.FeaturesResponse.responses)
  return responses_.Add();
}
::google::protobuf::RepeatedPtrField< ::carml::org::predictor::FeatureResponse >*
FeaturesResponse::mutable_responses() {
  // @@protoc_insertion_point(field_mutable_list:carml.org.predictor.FeaturesResponse.responses)
  return &responses_;
}
const ::google::protobuf::RepeatedPtrField< ::carml::org::predictor::FeatureResponse >&
FeaturesResponse::responses() const {
  // @@protoc_insertion_point(field_list:carml.org.predictor.FeaturesResponse.responses)
  return responses_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResetRequest::kIdFieldNumber;
const int ResetRequest::kPredictorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResetRequest::ResetRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_predictor_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:carml.org.predictor.ResetRequest)
}
ResetRequest::ResetRequest(const ResetRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.id().size() > 0) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.has_predictor()) {
    predictor_ = new ::carml::org::predictor::Predictor(*from.predictor_);
  } else {
    predictor_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:carml.org.predictor.ResetRequest)
}

void ResetRequest::SharedCtor() {
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  predictor_ = NULL;
  _cached_size_ = 0;
}

ResetRequest::~ResetRequest() {
  // @@protoc_insertion_point(destructor:carml.org.predictor.ResetRequest)
  SharedDtor();
}

void ResetRequest::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete predictor_;
}

void ResetRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResetRequest::descriptor() {
  protobuf_predictor_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_predictor_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ResetRequest& ResetRequest::default_instance() {
  protobuf_predictor_2eproto::InitDefaults();
  return *internal_default_instance();
}

ResetRequest* ResetRequest::New(::google::protobuf::Arena* arena) const {
  ResetRequest* n = new ResetRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ResetRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:carml.org.predictor.ResetRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && predictor_ != NULL) {
    delete predictor_;
  }
  predictor_ = NULL;
  _internal_metadata_.Clear();
}

bool ResetRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:carml.org.predictor.ResetRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .carml.org.predictor.Predictor predictor = 1 [(.gogoproto.moretags) = "yaml:\"predictor,omitempty\""];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_predictor()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string id = 2 [(.gogoproto.customname) = "ID", (.gogoproto.jsontag) = "id,omitempty", (.gogoproto.moretags) = "yaml:\"id,omitempty\""];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), static_cast<int>(this->id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "carml.org.predictor.ResetRequest.id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:carml.org.predictor.ResetRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:carml.org.predictor.ResetRequest)
  return false;
#undef DO_
}

void ResetRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:carml.org.predictor.ResetRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .carml.org.predictor.Predictor predictor = 1 [(.gogoproto.moretags) = "yaml:\"predictor,omitempty\""];
  if (this->has_predictor()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->predictor_, output);
  }

  // string id = 2 [(.gogoproto.customname) = "ID", (.gogoproto.jsontag) = "id,omitempty", (.gogoproto.moretags) = "yaml:\"id,omitempty\""];
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "carml.org.predictor.ResetRequest.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:carml.org.predictor.ResetRequest)
}

::google::protobuf::uint8* ResetRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:carml.org.predictor.ResetRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .carml.org.predictor.Predictor predictor = 1 [(.gogoproto.moretags) = "yaml:\"predictor,omitempty\""];
  if (this->has_predictor()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->predictor_, deterministic, target);
  }

  // string id = 2 [(.gogoproto.customname) = "ID", (.gogoproto.jsontag) = "id,omitempty", (.gogoproto.moretags) = "yaml:\"id,omitempty\""];
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "carml.org.predictor.ResetRequest.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:carml.org.predictor.ResetRequest)
  return target;
}

size_t ResetRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:carml.org.predictor.ResetRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string id = 2 [(.gogoproto.customname) = "ID", (.gogoproto.jsontag) = "id,omitempty", (.gogoproto.moretags) = "yaml:\"id,omitempty\""];
  if (this->id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  // .carml.org.predictor.Predictor predictor = 1 [(.gogoproto.moretags) = "yaml:\"predictor,omitempty\""];
  if (this->has_predictor()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->predictor_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResetRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:carml.org.predictor.ResetRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ResetRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ResetRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:carml.org.predictor.ResetRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:carml.org.predictor.ResetRequest)
    MergeFrom(*source);
  }
}

void ResetRequest::MergeFrom(const ResetRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:carml.org.predictor.ResetRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.has_predictor()) {
    mutable_predictor()->::carml::org::predictor::Predictor::MergeFrom(from.predictor());
  }
}

void ResetRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:carml.org.predictor.ResetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResetRequest::CopyFrom(const ResetRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:carml.org.predictor.ResetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResetRequest::IsInitialized() const {
  return true;
}

void ResetRequest::Swap(ResetRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResetRequest::InternalSwap(ResetRequest* other) {
  using std::swap;
  id_.Swap(&other->id_);
  swap(predictor_, other->predictor_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ResetRequest::GetMetadata() const {
  protobuf_predictor_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_predictor_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ResetRequest

// string id = 2 [(.gogoproto.customname) = "ID", (.gogoproto.jsontag) = "id,omitempty", (.gogoproto.moretags) = "yaml:\"id,omitempty\""];
void ResetRequest::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ResetRequest::id() const {
  // @@protoc_insertion_point(field_get:carml.org.predictor.ResetRequest.id)
  return id_.GetNoArena();
}
void ResetRequest::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:carml.org.predictor.ResetRequest.id)
}
#if LANG_CXX11
void ResetRequest::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:carml.org.predictor.ResetRequest.id)
}
#endif
void ResetRequest::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:carml.org.predictor.ResetRequest.id)
}
void ResetRequest::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:carml.org.predictor.ResetRequest.id)
}
::std::string* ResetRequest::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:carml.org.predictor.ResetRequest.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ResetRequest::release_id() {
  // @@protoc_insertion_point(field_release:carml.org.predictor.ResetRequest.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ResetRequest::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:carml.org.predictor.ResetRequest.id)
}

// .carml.org.predictor.Predictor predictor = 1 [(.gogoproto.moretags) = "yaml:\"predictor,omitempty\""];
bool ResetRequest::has_predictor() const {
  return this != internal_default_instance() && predictor_ != NULL;
}
void ResetRequest::clear_predictor() {
  if (GetArenaNoVirtual() == NULL && predictor_ != NULL) delete predictor_;
  predictor_ = NULL;
}
const ::carml::org::predictor::Predictor& ResetRequest::predictor() const {
  const ::carml::org::predictor::Predictor* p = predictor_;
  // @@protoc_insertion_point(field_get:carml.org.predictor.ResetRequest.predictor)
  return p != NULL ? *p : *reinterpret_cast<const ::carml::org::predictor::Predictor*>(
      &::carml::org::predictor::_Predictor_default_instance_);
}
::carml::org::predictor::Predictor* ResetRequest::mutable_predictor() {
  
  if (predictor_ == NULL) {
    predictor_ = new ::carml::org::predictor::Predictor;
  }
  // @@protoc_insertion_point(field_mutable:carml.org.predictor.ResetRequest.predictor)
  return predictor_;
}
::carml::org::predictor::Predictor* ResetRequest::release_predictor() {
  // @@protoc_insertion_point(field_release:carml.org.predictor.ResetRequest.predictor)
  
  ::carml::org::predictor::Predictor* temp = predictor_;
  predictor_ = NULL;
  return temp;
}
void ResetRequest::set_allocated_predictor(::carml::org::predictor::Predictor* predictor) {
  delete predictor_;
  predictor_ = predictor;
  if (predictor) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:carml.org.predictor.ResetRequest.predictor)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResetResponse::kPredictorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResetResponse::ResetResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_predictor_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:carml.org.predictor.ResetResponse)
}
ResetResponse::ResetResponse(const ResetResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_predictor()) {
    predictor_ = new ::carml::org::predictor::Predictor(*from.predictor_);
  } else {
    predictor_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:carml.org.predictor.ResetResponse)
}

void ResetResponse::SharedCtor() {
  predictor_ = NULL;
  _cached_size_ = 0;
}

ResetResponse::~ResetResponse() {
  // @@protoc_insertion_point(destructor:carml.org.predictor.ResetResponse)
  SharedDtor();
}

void ResetResponse::SharedDtor() {
  if (this != internal_default_instance()) delete predictor_;
}

void ResetResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResetResponse::descriptor() {
  protobuf_predictor_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_predictor_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ResetResponse& ResetResponse::default_instance() {
  protobuf_predictor_2eproto::InitDefaults();
  return *internal_default_instance();
}

ResetResponse* ResetResponse::New(::google::protobuf::Arena* arena) const {
  ResetResponse* n = new ResetResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ResetResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:carml.org.predictor.ResetResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && predictor_ != NULL) {
    delete predictor_;
  }
  predictor_ = NULL;
  _internal_metadata_.Clear();
}

bool ResetResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:carml.org.predictor.ResetResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .carml.org.predictor.Predictor predictor = 1 [(.gogoproto.embed) = true, (.gogoproto.moretags) = "yaml:\"predictor,omitempty\""];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_predictor()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:carml.org.predictor.ResetResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:carml.org.predictor.ResetResponse)
  return false;
#undef DO_
}

void ResetResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:carml.org.predictor.ResetResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .carml.org.predictor.Predictor predictor = 1 [(.gogoproto.embed) = true, (.gogoproto.moretags) = "yaml:\"predictor,omitempty\""];
  if (this->has_predictor()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->predictor_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:carml.org.predictor.ResetResponse)
}

::google::protobuf::uint8* ResetResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:carml.org.predictor.ResetResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .carml.org.predictor.Predictor predictor = 1 [(.gogoproto.embed) = true, (.gogoproto.moretags) = "yaml:\"predictor,omitempty\""];
  if (this->has_predictor()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->predictor_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:carml.org.predictor.ResetResponse)
  return target;
}

size_t ResetResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:carml.org.predictor.ResetResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .carml.org.predictor.Predictor predictor = 1 [(.gogoproto.embed) = true, (.gogoproto.moretags) = "yaml:\"predictor,omitempty\""];
  if (this->has_predictor()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->predictor_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResetResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:carml.org.predictor.ResetResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ResetResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ResetResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:carml.org.predictor.ResetResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:carml.org.predictor.ResetResponse)
    MergeFrom(*source);
  }
}

void ResetResponse::MergeFrom(const ResetResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:carml.org.predictor.ResetResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_predictor()) {
    mutable_predictor()->::carml::org::predictor::Predictor::MergeFrom(from.predictor());
  }
}

void ResetResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:carml.org.predictor.ResetResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResetResponse::CopyFrom(const ResetResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:carml.org.predictor.ResetResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResetResponse::IsInitialized() const {
  return true;
}

void ResetResponse::Swap(ResetResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResetResponse::InternalSwap(ResetResponse* other) {
  using std::swap;
  swap(predictor_, other->predictor_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ResetResponse::GetMetadata() const {
  protobuf_predictor_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_predictor_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ResetResponse

// .carml.org.predictor.Predictor predictor = 1 [(.gogoproto.embed) = true, (.gogoproto.moretags) = "yaml:\"predictor,omitempty\""];
bool ResetResponse::has_predictor() const {
  return this != internal_default_instance() && predictor_ != NULL;
}
void ResetResponse::clear_predictor() {
  if (GetArenaNoVirtual() == NULL && predictor_ != NULL) delete predictor_;
  predictor_ = NULL;
}
const ::carml::org::predictor::Predictor& ResetResponse::predictor() const {
  const ::carml::org::predictor::Predictor* p = predictor_;
  // @@protoc_insertion_point(field_get:carml.org.predictor.ResetResponse.predictor)
  return p != NULL ? *p : *reinterpret_cast<const ::carml::org::predictor::Predictor*>(
      &::carml::org::predictor::_Predictor_default_instance_);
}
::carml::org::predictor::Predictor* ResetResponse::mutable_predictor() {
  
  if (predictor_ == NULL) {
    predictor_ = new ::carml::org::predictor::Predictor;
  }
  // @@protoc_insertion_point(field_mutable:carml.org.predictor.ResetResponse.predictor)
  return predictor_;
}
::carml::org::predictor::Predictor* ResetResponse::release_predictor() {
  // @@protoc_insertion_point(field_release:carml.org.predictor.ResetResponse.predictor)
  
  ::carml::org::predictor::Predictor* temp = predictor_;
  predictor_ = NULL;
  return temp;
}
void ResetResponse::set_allocated_predictor(::carml::org::predictor::Predictor* predictor) {
  delete predictor_;
  predictor_ = predictor;
  if (predictor) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:carml.org.predictor.ResetResponse.predictor)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace predictor
}  // namespace org
}  // namespace carml

// @@protoc_insertion_point(global_scope)
